{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/Alipay.jpeg","path":"images/Alipay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/author.png","path":"images/author.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/WechatPay.jpeg","path":"images/WechatPay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"source/README.MDOWN","path":"README.MDOWN","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/0-1搭建Vue3+Vite3模板工程（2）.md","hash":"f9516030f23d0ab3697471c04eab4264cb7533d7","modified":1703055438901},{"_id":"source/_posts/0-1搭建Vue3-Vite3模板工程（3）-布局.md","hash":"9568e593658c41b070b6a16969ebd427aa5cd565","modified":1703055438916},{"_id":"source/README.MDOWN","hash":"fd198e7292ee1242ffb19a30dd3d00025b5132cc","modified":1657676841831},{"_id":"source/_posts/0-1搭建Vue3+Vite3模板工程（1）.md","hash":"ffa4659cc7aa85d69029f09aa047371c2bbee218","modified":1703055438909},{"_id":"source/_data/APlayer.swig","hash":"beeaca5dfd6dac9b20432900c177244c00300017","modified":1657676841833},{"_id":"source/_posts/Babel使用.md","hash":"6e937ae0111fcbdf387766c86b42e6802125a9ed","modified":1703052492460},{"_id":"source/about/index.md","hash":"9b4928e470084afd2e91b02798f72f076b827eff","modified":1657676842019},{"_id":"source/_posts/JS基础(一).md","hash":"9b016fefbd72e25607ead4899f628c1cb93dfc86","modified":1657676841844},{"_id":"source/_data/DaoVoice.swig","hash":"7ef0c26cc780c4fba77d0411758ee4b4297692f6","modified":1657676841835},{"_id":"source/_posts/0-1搭建Vue3-vite模板工程（4）.md","hash":"871264f4b61be2a728ad9351ee8fe04ad1d75bd0","modified":1703055438935},{"_id":"source/_posts/JS-实现call-apply-bind方法.md","hash":"2f934101efad1b16bd1fafeaf5cbdeface47ee08","modified":1657676841842},{"_id":"source/_posts/Promise2.md","hash":"d8120d2c3269789a1ed1fb313813407d2e4ec493","modified":1657676841867},{"_id":"source/_posts/Vue2-模板编译.md","hash":"dd9bb5a4ecc286c5d43f8d71578ccde1538b80d6","modified":1657676841876},{"_id":"source/_posts/JS基础二.md","hash":"31de6e0aed3971f2231cceb7742ce46f664759e4","modified":1657676841852},{"_id":"source/_posts/Promise1.md","hash":"ee66e6ecf5a051ea7b7e331daa8c76bbe7ed4d04","modified":1657676841864},{"_id":"source/_posts/Upstart.md","hash":"1e471d9fd31ed0d457d912e29a71e882b4fe2ab6","modified":1657676841874},{"_id":"source/_posts/Vue3+TS项目中遇到的eslint问题.md","hash":"a6cc02383111b2b3b831a2160ff92bf3a0976466","modified":1703055438946},{"_id":"source/_posts/Webpack打包原理.md","hash":"6799c48c1be3f1a8d1facec66bad4982491862ee","modified":1657676841928},{"_id":"source/_posts/Webpack常用loader.md","hash":"1a39bc77ca22f4c05e9e386a65ceb7aa667105bc","modified":1657676841922},{"_id":"source/_posts/Webpack常用plugin.md","hash":"e6fe6dcbdf230427da518bc0d6b69fe56bc327d0","modified":1657676841925},{"_id":"source/_posts/import和require区别.md","hash":"b46328ba05384495d0c6812703c7025789a7732f","modified":1657676841934},{"_id":"source/_posts/react-note.md","hash":"80a462d0847f3f71227736c629dcaf63eccfd018","modified":1657676841939},{"_id":"source/_posts/Vue3-Typescript项目配置eslint和commitlint.md","hash":"0aa6421671a465405919a70103bbf996e8e20060","modified":1703055438954},{"_id":"source/_posts/Promise3.md","hash":"e8920c2443fe4dc17471661adf0083a61dcf0f35","modified":1657676841871},{"_id":"source/_posts/reduce.md","hash":"c47fcd6cd329aefe184e9539d9c5ef919e6101f7","modified":1703055438962},{"_id":"source/_posts/js循环知多少.md","hash":"2f64f6f8e8320f4ff6707839282d352793bb5cbe","modified":1657676841936},{"_id":"source/_posts/Vue3学习笔记.md","hash":"e2c4710e2844789c9cc65f21719097de59f5d4f4","modified":1657676841883},{"_id":"source/_posts/require.context使用.md","hash":"c1a80c4c221fb6d43b2cf8aa765d5b4738d6df18","modified":1657676841944},{"_id":"source/_posts/this.md","hash":"1c9d1531b22cf536a99008182dc94cddea0f3f60","modified":1703055438967},{"_id":"source/_posts/vuex.md","hash":"3d85ed97ebb1f6e27fdfa7c513a48a9bd6906de5","modified":1657676841963},{"_id":"source/_posts/小程序开发问题记录.md","hash":"69f30f7e0428d8bd01c122607d1c6da0aa7d4b8f","modified":1703055438981},{"_id":"source/_posts/tsconfig-json配置.md","hash":"0009294e235d4bc95adf7b1cfb4a9c9c5a99bc00","modified":1703055438975},{"_id":"source/_posts/微前端(一)-父子应用.md","hash":"b0ceecd384e03bb546730bf7f0852e6dad515e95","modified":1657676841987},{"_id":"source/_posts/加解密算法.md","hash":"543c85dcfc82e6c3cc63314f37148d4dd900894f","modified":1657676841982},{"_id":"source/_posts/ts常见报错问题.md","hash":"6e1b90376cbbc159b87649ca4584d54d51be1ec5","modified":1703055438989},{"_id":"source/_posts/组件通信.md","hash":"3df98cc2f03ba21348eb8754204190371754d9b1","modified":1657676842004},{"_id":"source/_posts/html知识点集锦.md","hash":"fc10efd7651c9604defd918b4613e81359581a70","modified":1657676841931},{"_id":"source/_posts/模块化1.md","hash":"2a5a1dc598ceeab22e17a5bb38fd2bfb32acc6dc","modified":1657676841997},{"_id":"source/_posts/搭建组件库一.md","hash":"4ca1d755799bfce9d1b6c31941a72b9552ba227a","modified":1703055438999},{"_id":"source/_posts/节流防抖.md","hash":"ffadf7de01f29f75e30295c42c70847edaf0c008","modified":1657676842012},{"_id":"source/_posts/高效能人生的七个习惯.md","hash":"77d9637c532d890ab882a5f2aa6d9edb77493d8f","modified":1657676842017},{"_id":"source/_posts/高刷屏对requestAnimationFrame和setTimeout的影响.md","hash":"178f7cee53e74a07490557f10e4842366f6829c0","modified":1657676842014},{"_id":"source/_posts/模块化2.md","hash":"949cde4e04bb7dfd25bc18adc1581387461faf23","modified":1657676842001},{"_id":"source/_posts/前端安全.md","hash":"19303855425c57bc2612ecfdb69a00f1c9f3c5af","modified":1657676841977},{"_id":"source/_posts/继承.md","hash":"af02bc97d0fc514e22cced920e8b4e42e4899933","modified":1703055439009},{"_id":"source/categories/index.md","hash":"b7255591be5dfd68367286c688851dad7a1134fe","modified":1657676842022},{"_id":"source/tags/index.md","hash":"d9c226e0cc700a60c12d4733aa0ad15e58f77836","modified":1657676842031},{"_id":"source/_posts/Vue3学习笔记/3.png","hash":"54caf834d1c277b16982bd9cbcfd4f81ddb4dc82","modified":1657676841919},{"_id":"source/_posts/Vue2-模板编译/1.png","hash":"d0cfaca2f2011b7e241cc416847faf5265201773","modified":1657676841880},{"_id":"source/_posts/Vue2-模板编译/2.png","hash":"fb4c95f3f67fc071a3a4da0c36bc2dc18a48635d","modified":1657676841881},{"_id":"source/images/wechatpay.jpg","hash":"55bdba5eaf9e12177b004fc7e9c230e4f7685c8f","modified":1657676842029},{"_id":"source/_posts/继承/1.jpeg","hash":"42df57942a8b0c509f5e72e581beac7663bf4fec","modified":1657676842009},{"_id":"source/images/alipay.jpg","hash":"da47959ff0f76b452e4f44e16dd6ece7805a115b","modified":1657676842025},{"_id":"source/_posts/require.context使用/1.jpg","hash":"976e25937109f25dbbc2cae6f03c601297cc4c16","modified":1657676841950},{"_id":"source/_posts/JS基础(一)/1.jpg","hash":"0eb8a20d5ad7294a4625c6ea60f397bb2ac0337a","modified":1657676841849},{"_id":"source/_posts/微前端(一)-父子应用/micro-1.jpg","hash":"8f4a6274d1fbe81241af3c6e10333c5de0a6ad45","modified":1657676841993},{"_id":"source/_posts/require.context使用/2.jpg","hash":"bf6ecf0f3ed64078140326b289c63f28c249a009","modified":1657676841957},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1657676842038},{"_id":"themes/next/.gitignore","hash":"2edf061c2944a33635765dba3d95d3a882cd814b","modified":1657676842102},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1657676842104},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1657676842034},{"_id":"themes/next/_vendors.yml","hash":"73c0c1578f604aa16f9b0f2d1960687a766c7163","modified":1657676842116},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1657676842036},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1657676842107},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1657676842119},{"_id":"themes/next/package.json","hash":"03e5501fc64d008d891d3197d423a465abbc88cd","modified":1657676842478},{"_id":"themes/next/sitemap.xml","hash":"9255d14808c5c6df29d4f95e1fa5382e1d8c5c82","modified":1657676842597},{"_id":"themes/next/_config.yml","hash":"b055d0168bfd4dd9cfd1d49a98776f1bb47f1d22","modified":1657676842113},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1657676842481},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1657676842056},{"_id":"themes/next/.github/labeler.yml","hash":"e34ba46e48966a93a0c82e5c03ffb15eed266434","modified":1657676842074},{"_id":"themes/next/README.md","hash":"63ec8c8c06b018c1ffc2a91dfa71e6a3e2a57133","modified":1657676842110},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1657676842065},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1657676842040},{"_id":"themes/next/.github/release-drafter.yml","hash":"6737b76b184d8e73dcd96972e47edbfcbedbfaa4","modified":1657676842076},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1657676842127},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1657676842130},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1657676842060},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1657676842068},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1657676842123},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1657676842145},{"_id":"themes/next/languages/ar.yml","hash":"143234db25fd275133c9c2ab748b631961d12c31","modified":1657676842148},{"_id":"themes/next/languages/fa.yml","hash":"557b8a7a408bf34f17b598e426c7c2050e39e571","modified":1657676842162},{"_id":"themes/next/languages/en.yml","hash":"7ad763a7ac5f05d10c45acca17ef33087495662f","modified":1657676842156},{"_id":"themes/next/languages/de.yml","hash":"02455e63ed994599c94907e2e2dd40cd4615a079","modified":1657676842150},{"_id":"themes/next/languages/default.yml","hash":"7ad763a7ac5f05d10c45acca17ef33087495662f","modified":1657676842153},{"_id":"themes/next/languages/es.yml","hash":"d984dd6d65d4b1f95d20f0868639aacd7a35dc48","modified":1657676842159},{"_id":"themes/next/languages/fr.yml","hash":"fcf826ff8ef8c4805ec56393499773bf3919235b","modified":1657676842164},{"_id":"themes/next/languages/id.yml","hash":"b22376ccce825fe4bcd935be4e19400fe51505ad","modified":1657676842167},{"_id":"themes/next/languages/it.yml","hash":"4b14448a4779d3826f785d1559b27fc328001dac","modified":1657676842170},{"_id":"themes/next/languages/ko.yml","hash":"8707cc844a24b3aef9ae4c7b06b3f508d32442ff","modified":1657676842176},{"_id":"themes/next/languages/ja.yml","hash":"fb2c6a56255b6b3ce277183104ca3622d3db2b6c","modified":1657676842173},{"_id":"themes/next/languages/nl.yml","hash":"4646c4d7ffa1619a128b1a682aacd659da6dbe7e","modified":1657676842178},{"_id":"themes/next/languages/pt.yml","hash":"d48ddb7c206d8f6e43631cb358a16dcaf5a6b5fe","modified":1657676842183},{"_id":"themes/next/languages/pt-BR.yml","hash":"1d724d9d8b86fe9aaa2757473ae4de12735248ee","modified":1657676842181},{"_id":"themes/next/languages/si.yml","hash":"583daf654bd1600cf16e7fdff74fbac607dca8ca","modified":1657676842190},{"_id":"themes/next/languages/ru.yml","hash":"7b72d3c5b09d50b1f57db6c763130cecf429d18a","modified":1657676842187},{"_id":"themes/next/languages/tr.yml","hash":"a1849c9de54ed28c0bb2bd3bf26049009fbb997f","modified":1657676842193},{"_id":"themes/next/languages/zh-CN.yml","hash":"5d773b4b85a299ceef08891a71d47a8255d81cf2","modified":1657676842201},{"_id":"themes/next/languages/vi.yml","hash":"b0c0b28dc988e15b0e11db3dd1707747695dec2c","modified":1657676842198},{"_id":"themes/next/languages/zh-HK.yml","hash":"506293e4ab1a9b5426e1e7cee0a3194c81ddba8b","modified":1657676842202},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"c9d0cd34590e07b42e2e44728e448205e15b2906","modified":1657676842043},{"_id":"themes/next/languages/uk.yml","hash":"10a2166165beb7364310a917d14ecb27c48d7598","modified":1657676842195},{"_id":"themes/next/layout/_layout.njk","hash":"8ad0f3412da96f246541e0403632f18513ad9e8d","modified":1657676842207},{"_id":"themes/next/languages/zh-TW.yml","hash":"ecd48db39874f17ac0d6c8098c04f680a73e6492","modified":1657676842205},{"_id":"themes/next/layout/page.njk","hash":"5fd0c362019eac987e17954dc85287b682195c76","modified":1657676842468},{"_id":"themes/next/layout/index.njk","hash":"92db3756ad46718a0cbb0d2bda02218bd865a63d","modified":1657676842462},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1657676842473},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1657676842987},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1657676842456},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1657676842051},{"_id":"themes/next/layout/tag.njk","hash":"64148c8f6b623391433595ae691ff64d7941d8af","modified":1657676842476},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1657676842053},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"46d0b29dc561fe571d91fd06a7c8ef606b984c72","modified":1657676842083},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"f21e45c47502ca921fb7722e6d1223726e969c2b","modified":1657676842080},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1657676842046},{"_id":"themes/next/.github/workflows/linter.yml","hash":"aed6d8d10acae714af77a250dfc6f20a6f325668","modified":1657676842085},{"_id":"themes/next/layout/category.njk","hash":"c243c94abe62ec1e7da73067ac2db147f9a42416","modified":1657676842460},{"_id":"themes/next/.github/workflows/lock.yml","hash":"8198c68a613d1a1e2a09f2cbecd0a53697b61962","modified":1657676842088},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1657676842090},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1657676842049},{"_id":"themes/next/.github/workflows/tester.yml","hash":"645bb69d0b6cc062c47fabb1ccb2297ccbcfa7f5","modified":1657676842099},{"_id":"themes/next/.github/workflows/stale.yml","hash":"cfe124e13a5a5f66fca49dfa6f388eadd3c0b444","modified":1657676842093},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"c1ba78b246349f79adcf06a940961bba8a8350cb","modified":1657676842140},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1657676842289},{"_id":"themes/next/docs/zh-CN/README.md","hash":"5ed5f21f406f4c6702d1e71ecdb0596f75a2072b","modified":1657676842142},{"_id":"themes/next/docs/ru/README.md","hash":"09e3e9325101a3129a436233b33f25ef651902ba","modified":1657676842133},{"_id":"themes/next/layout/_partials/languages.njk","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1657676842271},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1657676842136},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"3d35ca1c6025cebfe5a6fd3ecf1d827f7958ceaa","modified":1657676842327},{"_id":"themes/next/layout/_partials/footer.njk","hash":"4ff115f92d82c3fbbe98111369081a24317f4456","modified":1657676842234},{"_id":"themes/next/layout/_macro/passage-end-tag.njk","hash":"537f00a301e103f875ec9c4a48e3e2cc91a27c39","modified":1657676842210},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"8da7b29b265669465fa77896384207d60e0f6e02","modified":1657676842335},{"_id":"themes/next/layout/_partials/comments.njk","hash":"5e6d77ed00be8a0533fe2d7f7fc1daf79e961578","modified":1657676842225},{"_id":"themes/next/layout/_scripts/index.njk","hash":"3583c14670f927bf5a73fd64e9c84b4459fd363d","modified":1657676842329},{"_id":"themes/next/layout/_macro/post.njk","hash":"c12dff0751dbe740f100e4189c36e9628d50020a","modified":1657676842219},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"6914d0bbba2bdc1fedbb30a8a17f539d75e2a047","modified":1657676842342},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1657676842213},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1657676842534},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"886046ff2be3d20b7580b689c570427f8663212a","modified":1657676842222},{"_id":"themes/next/scripts/filters/locals.js","hash":"bc72911802afd6717adb0cb6605bef74712a04b1","modified":1657676842536},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"0ab99e210c6c3446e7bcebdc2422f8acde035428","modified":1657676842338},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1657676842425},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1657676842563},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1657676842566},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1657676842569},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"4cf2002bcd5a6851aea68e9a1971e6399f5c3ed2","modified":1657676842571},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1657676842579},{"_id":"themes/next/scripts/events/index.js","hash":"fb3feea03bacd679bccc1ec0a1ddeede5d2703df","modified":1657676842484},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"7ab092776259e511cac24535f671873afc1c0b0c","modified":1657676842418},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"96b5703f5b5042f703865723c6bdb2ec17dbd373","modified":1657676842584},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"28060f7bd99cc5d61521ecb6894ce5d63244c2a5","modified":1657676842422},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1657676842574},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"2ad94d9d9ea349f87ad53870abb032a8a4fab2fb","modified":1657676842581},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1657676842586},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1657676842589},{"_id":"themes/next/scripts/tags/tabs.js","hash":"a79d3503c1715329ffdc402cd8bcd1579ed1f191","modified":1657676842592},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1657676842595},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"a94bf35140219eb5bf543b4bed48d5e4ce3acb36","modified":1657676842554},{"_id":"themes/next/scripts/helpers/engine.js","hash":"e0c08488a2102b69b79f09ed691e9bab01874b01","modified":1657676842548},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1657676842982},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1657676842551},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"ce3ea97dc80a9813f50a8db707063656c552ce89","modified":1657676842556},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1657676842561},{"_id":"themes/next/test/helpers/next-url.js","hash":"2dd87fe2acb9554ec5cf0ff6b818207c3a48efdb","modified":1657676842984},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1657676842978},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1657676842989},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1657676842998},{"_id":"themes/next/layout/_third-party/index.njk","hash":"36ab0ca7b44b28e91a63332a512ba310fed18fd0","modified":1657676842403},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1657676843004},{"_id":"themes/next/test/tags/mermaid.js","hash":"e4384f6a53d2af20968213bd027ad93c961d08c4","modified":1657676843014},{"_id":"themes/next/test/tags/group-pictures.js","hash":"d7eb1d4402bf96485e69d5944db6aef8f10c8097","modified":1657676843001},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1657676843007},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1657676842993},{"_id":"themes/next/test/tags/link-grid.js","hash":"05c368349a5ebb385a0e6382ad19cab5e3d6528b","modified":1657676843010},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1657676843016},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1657676843020},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1657676843022},{"_id":"themes/next/source/css/_colors.styl","hash":"f3368760774a02969bca9f99a97b5650be7daa88","modified":1657676842599},{"_id":"themes/next/source/css/_mixins.styl","hash":"b20275690fc5d652bb41b40daa5584d1041811eb","modified":1657676842821},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1657676843025},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1657676843030},{"_id":"themes/next/source/js/bookmark.js","hash":"e808854cb650f5cd8b4ed97f41df122328b5bf08","modified":1657676842946},{"_id":"themes/next/source/js/algolia-search.js","hash":"4d03edd62c0c1528701723b0a4ca8f42a5dba5ec","modified":1657676842944},{"_id":"themes/next/source/js/motion.js","hash":"20b979ebe3671cb415e6e7171485d65cc347086e","modified":1657676842953},{"_id":"themes/next/source/js/next-boot.js","hash":"83fe5b5e5a7990a27ae1977677f3e6bfc83ed2b9","modified":1657676842956},{"_id":"themes/next/source/js/schedule.js","hash":"2d461e93f8802463941eff5c2b05ae4a4e38ae24","modified":1657676842960},{"_id":"themes/next/source/css/main.styl","hash":"38b8a12681a3a04bed02aa1659054912ed6def11","modified":1657676842889},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1657676842905},{"_id":"themes/next/source/js/local-search.js","hash":"677af9721fcc33e1c524c7d9a0b8bd83407591ef","modified":1657676842950},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1657676842911},{"_id":"themes/next/source/js/utils.js","hash":"8283b6ab58393f95b86fa3b44a08c5d2a323f07d","modified":1657676842974},{"_id":"themes/next/scripts/filters/post.js","hash":"4666e8e040c4689fbdef15dfc1275ad62e0828e3","modified":1657676842544},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1657676842921},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1657676842914},{"_id":"themes/next/scripts/filters/minify.js","hash":"0626a00515b424c0f2f4bc2ed4d4564121adde98","modified":1657676842540},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1657676842917},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1657676842923},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1657676842934},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1657676842928},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1657676842931},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1657676842926},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1657676842936},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1657676842939},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"2f550b53372ec150c2538f216399995b8c003a21","modified":1657676842252},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"5d02ca876f25038c9f9e1d789c6ebae9ef71ae00","modified":1657676842249},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1657676842941},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1657676842280},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"a2b5f6264577f80880119afdecba4d7f771bb7c1","modified":1657676842244},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"424c285832681150191336c5771512813e808dfc","modified":1657676842238},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1657676842282},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"940cad08a67e6c361214045096bd3cdffdf44fcf","modified":1657676842265},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1657676842287},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"f066390762faf6684a523e2eb943420023aac2b1","modified":1657676842254},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"9c136edd2248e2d50c1f6110b75e2b75c299bbd7","modified":1657676842274},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"681c3f9f12ac4b6c807f8511d6bec6beab51733a","modified":1657676842284},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1657676842291},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1657676842298},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"cb841a7a5db322dacd18c23074be300460aa6353","modified":1657676842261},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1657676842295},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1657676842316},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"2447cc07beba7ebac101573334308acc8478b774","modified":1657676842300},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1657676842305},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1657676842320},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1657676842318},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"6c80003141c9fe5f7621ba9eff12d15e1361db67","modified":1657676842312},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c7cea42f6db2137c11ca1d83e43fcb7ad7ccfb89","modified":1657676842350},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1657676842345},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1657676842375},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1657676842361},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1657676842367},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"14bdca97aca2065703546dde47a715f0c51320bc","modified":1657676842323},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"465fcffd4216f8ca0ea2613fe9cf7308f71b9da5","modified":1657676842365},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"df02e478cebee56dcae1ce6db9513e859e591227","modified":1657676842378},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7a097e4e8bc895cbed7dce493ef53cf6d5a97466","modified":1657676842348},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"71c728a386b8423b0926baea2de844943b5d77d8","modified":1657676842381},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"f7c4c6744bc304b7bb9a1621f8cdab541c56161a","modified":1657676842352},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"6eb39df7c30a17f1800897701cfc25403745fe49","modified":1657676842412},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"bd483e33585e511b4f2729a363813da395e49cad","modified":1657676842385},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6303559d932b990bcdec40c66b4fdd559e31f553","modified":1657676842389},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"86a3f70f6ae02d85f88c9e82a724a36801aa0baa","modified":1657676842400},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1657676842432},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1657676842440},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"e9cdce3d026e406510f90a5751258a7b19b8bf44","modified":1657676842415},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"7e9b7ad375b833e7041a62bd3faa3372cafa5da5","modified":1657676842406},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"f84eaab792ce5a929d781483597782eddb4d1495","modified":1657676842428},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d935385bce684bea5a8339822f1a499a0024f28c","modified":1657676842435},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1657676842430},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"897082f16c022f26803ff32235aacfe25225a95f","modified":1657676842396},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"34c5591b509756660bf2088c6f48ac397a10a4d3","modified":1657676842446},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"8ad312021c5e24452ee3f57df4857b057214e205","modified":1657676842505},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1657676842508},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"307e9c0a1593c52c6fe8a3044984f3b7b1e076fc","modified":1657676842516},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1657676842511},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1657676842526},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"c0b6653584456704ae1628248eb8bce27bb1ec4f","modified":1657676842520},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e1471b538885a73ba74e943b0598d68989e8e265","modified":1657676842524},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"4739364a127cc982993b530e9f2c3dc9d930ce4d","modified":1657676842530},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1657676842532},{"_id":"themes/next/scripts/events/lib/config.js","hash":"331e7897fbe343155fd0088b4f712d94cb1425d6","modified":1657676842486},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1657676842489},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"a150d57c6373a7cac7a18606d127173ee3d71884","modified":1657676842492},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"8508e96a5f883a5a57d8c1b8b5ea438fa29aafd3","modified":1657676842495},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"1aa71987e5581c20ccbcc41cec70527f0a95b00f","modified":1657676842499},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"cc1134a92a8964747fb510282d8d32e2cc55bd1c","modified":1657676842442},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"aa3bc6a432c412a1ceffc389dfc443b08a69bb02","modified":1657676842393},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1657676842876},{"_id":"themes/next/source/js/src/particle.js","hash":"73e792ed1a296cbd3856f2e71abafd7f8ca99cd4","modified":1657676842971},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c367ec2730720654562b44b832ad2e457e6f211d","modified":1657676842886},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1657676842880},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1657676842878},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"166300c5bcab8dec0fc37c5a8a9193569281bb76","modified":1657676842667},{"_id":"themes/next/source/js/schemes/muse.js","hash":"7ecaf3d5d0896fec7b6e37d98acfba40442634d0","modified":1657676842963},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ad044edaf6d3d9402559129841061e3eaea173cb","modified":1657676842602},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"4f692c9d937bb82e6067ee3b9350d32f452c2567","modified":1657676842605},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"f483054d0101e85ff94dad0b531755a03c6277d5","modified":1657676842449},{"_id":"themes/next/source/js/src/love.js","hash":"6583037545c7edc355f76f29b3393e250b150032","modified":1657676842967},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5c08fabded770e3839099f4b7b2513efdb455474","modified":1657676842744},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"b39a58d63606be5076bbbb2d9e20300a5dcfcde2","modified":1657676842711},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1657676842882},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1657676842748},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"fef59a95584be575e17617d138d351b71de1b52e","modified":1657676842713},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1657676842751},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1657676842835},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1657676842772},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1657676842832},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1657676842776},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1657676842819},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"c9a9e07b721bb2376e24753ae0a9452431439114","modified":1657676842841},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"5ec6081092feda51fdfd0bd91d9e3730100331c0","modified":1657676842608},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f337981f8f20944ed366694aea88146c7b0a13ab","modified":1657676842837},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1657676842825},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1657676842843},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1657676842846},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"3caa80aa2aba30f2e1b58b39de23ed5c8c55184e","modified":1657676842781},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1657676842848},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1657676842784},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"6f87f78f90bac7e5275948cb21632ba99d3e5928","modified":1657676842861},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1657676842856},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"89f80e14fe60e2955e3fec7a45ba8c3afec5b05d","modified":1657676842853},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"28030c61288cc0e1321b18373a5c79029fd76a53","modified":1657676842850},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1657676842858},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"69aaa786e608b6f33aba6df763d657229716c165","modified":1657676842866},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1657676842863},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"56201e3963e8696c917b56c234bf3a193f4eb56d","modified":1657676842868},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1657676842873},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1657676842871},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1657676842619},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1657676842626},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1657676842624},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1657676842622},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"942943c7d5ea06b99d4e084aeb0ec2476f8586b6","modified":1657676842637},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d8bbe8571b9032b544d84430420a29247235fad8","modified":1657676842640},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1657676842652},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"b49e233cddd82804f58ebd772fcd3fc8bad24f3b","modified":1657676842646},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1657676842643},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1657676842659},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1657676842649},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"995354f9c23fbb61733fcdbcb30fd511a1d006cf","modified":1657676842655},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"249bfa5449f590367ce8592fa37bf10c4186891c","modified":1657676842661},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1657676842630},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1657676842665},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"aa3543cfb412130ec392a58e60fc39723cbdfbc6","modified":1657676842687},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4f5edfecdd28dec515c1cc9e3b971da69386bb65","modified":1657676842690},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"f067696465a5f812dcc178b4e294794445a59e67","modified":1657676842670},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"fe0f1edf277b0cd23a8a4635cb0f476d165c17b7","modified":1657676842681},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"a2333025b130945b22094c2f9d854ab2485de0dc","modified":1657676842693},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"46567765e0617189e09893ce017db01526bf3d2c","modified":1657676842698},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"d4d2a828868056e69812e7f76d7c4f9ba47f74b2","modified":1657676842695},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"f6bd6c941f76394b43bfa883613729940587213c","modified":1657676842684},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1657676842702},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"033b8beefc9f4ac7f08ee309d4ce9039ddd7b542","modified":1657676842678},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"6d46ac9b2260291bd562f181e5ea63821ae1af37","modified":1657676842671},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"a4003e1408844568cb5102a5a111046cb19b2d31","modified":1657676842754},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1657676842722},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"3ba2aa924171875212434fb1e93932538d826df6","modified":1657676842716},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1657676842720},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"aa1de16f693dd6aa66adc5728cce112f0b6fbe38","modified":1657676842706},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"0ff44ba9cec150aa204dd0b8c006b663f562dd8d","modified":1657676842728},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1657676842726},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"8683311e79e3e5deb8f981e3aa044df4446ccfc2","modified":1657676842708},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"899fed183460e4648f1ffc5fab16909c70c022b7","modified":1657676842787},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"782b06aad720a6225776a0c72e4a8b04633606ae","modified":1657676842740},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"195cfc10c3093054c601310f989119cbcfad01f6","modified":1657676842742},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1657676842731},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"4ecadcc8b8b162a02175e9fa33cbdea376c39d6a","modified":1657676842736},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1c3d0b9c58cf6b9b09232ef749f036b1360a98c5","modified":1657676842733},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1657676842790},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1657676842799},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"fd5af9b40afc126fea71d569b50b1fcfec8328a8","modified":1657676842808},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1657676842814},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"97a4b9cf8e4d5bd0b52e5cac28635649335cfa5e","modified":1657676842811},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"25c639ea7fccc2982459e07ac9ceb8f1224c307d","modified":1657676842792},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"afc2801dbfaed3004f29c3fc9bd56c0477793f64","modified":1657676842816},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"8b1282ce29346e1af690580fca801c4fed3c99d0","modified":1657676842801},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"b9ee15cb65f36e7286e051f9bb60014a357abaaf","modified":1657676842757},{"_id":"themes/next/source/images/author.png","hash":"c0f9632ffbae04b6d95f58c95a165affcc63a804","modified":1657676842908},{"_id":"themes/next/source/images/WechatPay.jpeg","hash":"4b9d75f82c409c0dfe49c72b349b926c3c1f5e1d","modified":1657676842902},{"_id":"source/_posts/vuex/vuex-1.png","hash":"daca8333760b748610b4b726fe6d3bbff44f5208","modified":1657676841972},{"_id":"source/_posts/JS基础二/1.jpg","hash":"85e0da8c8f59688a5298ed6981efa3a5bad4cc50","modified":1657676841860},{"_id":"themes/next/source/images/Alipay.jpeg","hash":"38569d1dc192489a4dca73112fb1258d503cdc3a","modified":1657676842897},{"_id":"source/_posts/Vue3学习笔记/1.image","hash":"de034f390f6f3b4f71146d91a444831ca9ae7627","modified":1657676841897},{"_id":"source/_posts/Vue3学习笔记/2.image","hash":"efb31f0f3a005f4bd6e5529254d6f69dd2131a13","modified":1657676841913},{"_id":"public/search.xml","hash":"548ba871586c357ebcad3be9753fffa3add93de0","modified":1703058728677},{"_id":"public/about/index.html","hash":"3e9ff56a3d24bda49d88472685cba0b3a9803296","modified":1703058728677},{"_id":"public/categories/index.html","hash":"3acde57f4947e2b623ef50479fe762721cceb91c","modified":1703058728677},{"_id":"public/tags/index.html","hash":"1b6bb7e20686d344c7e353eca7eb42c55084e8a0","modified":1703058728677},{"_id":"public/posts/24916/index.html","hash":"069ef23d8da089ca68642e47f73e0cfae2b26b2f","modified":1703058728677},{"_id":"public/posts/59852/index.html","hash":"6a1cb8439e0bdd48baa8181866df5f6fdccca4fc","modified":1703058728677},{"_id":"public/posts/16572/index.html","hash":"e52b727c75eaf650b033e0bffbdcb2288422793f","modified":1703058728677},{"_id":"public/posts/28547/index.html","hash":"198660428cd8a40a56442522787f75a80f3bf609","modified":1703058728677},{"_id":"public/posts/4133/index.html","hash":"abe096b61a967a160bfe1ee780e4b6a6183a699c","modified":1703058728677},{"_id":"public/posts/29511/index.html","hash":"d8f2d64ddd329db0f15e222cf31579d0214933e9","modified":1703058728677},{"_id":"public/posts/33825/index.html","hash":"277886d16d4994b171477c3f2697025bfdecd2a1","modified":1703058728677},{"_id":"public/posts/44161/index.html","hash":"7c715809594f2cee699b566b9eb1cdc7f79799d7","modified":1703058728677},{"_id":"public/posts/39130/index.html","hash":"15d0bf381c378b770f5903fefdd4176312c0d4b3","modified":1703058728677},{"_id":"public/posts/58156/index.html","hash":"9ddb10953d18cb1ede652f939947bd00d0894a5c","modified":1703058728677},{"_id":"public/posts/25025/index.html","hash":"1bf6cf5ca021a2e3992d95f4ac723d729aa8d1ad","modified":1703058728677},{"_id":"public/posts/42732/index.html","hash":"18e5a5c3cbc37a9f396df9f3f5714adb19e03147","modified":1703058728677},{"_id":"public/posts/14526/index.html","hash":"27ac79bc4ed38068ea69a52a6280ed03b62c07eb","modified":1703058728677},{"_id":"public/posts/22769/index.html","hash":"74e24f15dc809ac112c11776e1acc2c38a693dac","modified":1703058728677},{"_id":"public/posts/13579/index.html","hash":"673547fa67604c0bd7279825c3e6f58ad4ac4d58","modified":1703058728677},{"_id":"public/posts/42062/index.html","hash":"086682d7869d9dc7fed6f194c1e6b391407e2aae","modified":1703058728677},{"_id":"public/posts/42397/index.html","hash":"174b46fe95b7f195dfdb2b18eb6a771ce429f1fc","modified":1703058728677},{"_id":"public/posts/38405/index.html","hash":"375d7e47d999e3688ad32fa78021a2dfb09f335e","modified":1703058728677},{"_id":"public/posts/28265/index.html","hash":"5232948824266a52a3ddf8e09842aaf83b00e5ae","modified":1703058728677},{"_id":"public/posts/52606/index.html","hash":"4dd8d7445dbceb146cc35e3eca85fa818e261f88","modified":1703058728677},{"_id":"public/posts/8636/index.html","hash":"6e023b1348caeb5d5a24d1602c9202986bbee6b9","modified":1703058728677},{"_id":"public/posts/60546/index.html","hash":"45944d27305396fe65bc18482b4b20fa1681ac59","modified":1703058728677},{"_id":"public/posts/59071/index.html","hash":"9156ea12b04bf1569c70fb1a46b52da6fd90eed6","modified":1703058728677},{"_id":"public/posts/51847/index.html","hash":"d72554c54020b657a8f19188467f86da3a22b699","modified":1703058728677},{"_id":"public/posts/22254/index.html","hash":"a6a9909893104355d9dd783746c46c530a44ee6c","modified":1703058728677},{"_id":"public/posts/17039/index.html","hash":"8f51f9eb826fce8a6f2cb4a71f1fc4386753491c","modified":1703058728677},{"_id":"public/posts/27694/index.html","hash":"13c42df2836b134ece84094e64f755e61bf64c1e","modified":1703058728677},{"_id":"public/posts/48187/index.html","hash":"9e2ee9953d094823d3ee60da4a95220b6ef43c97","modified":1703058728677},{"_id":"public/posts/36892/index.html","hash":"9c3f1852475d9737d4a49ca5a9ec8a72215b58d3","modified":1703058728677},{"_id":"public/posts/3002/index.html","hash":"b1b1a82463d75e5dbdd40d129d12cf5fae8eab6f","modified":1703058728677},{"_id":"public/posts/18755/index.html","hash":"4892ce708b97229e5979945f2bfe6cbd5c420aa6","modified":1703058728677},{"_id":"public/posts/28173/index.html","hash":"f7d72ad9b3f21f1a21ac075097be576d24d4b5cd","modified":1703058728677},{"_id":"public/posts/45795/index.html","hash":"9ec3e4f7ec85590f80f9a2f8799ee6e13086f6ab","modified":1703058728677},{"_id":"public/posts/45356/index.html","hash":"9d5ef05bd77e03bd1457ecd7a12f322ec8084489","modified":1703058728677},{"_id":"public/posts/8881/index.html","hash":"9f84898537190672d2230282701e944e1200b39d","modified":1703058728677},{"_id":"public/posts/21747/index.html","hash":"4efec32bc234a3c7c34104ba6b1ee72946851aa0","modified":1703058728677},{"_id":"public/posts/3116/index.html","hash":"3901211ab8617ec98e2e2fa4656c5e4af93fad0a","modified":1703058728677},{"_id":"public/posts/60422/index.html","hash":"0bbc2ed3b41b02bffe425ae1e0eb24623c9b213c","modified":1703058728677},{"_id":"public/posts/49376/index.html","hash":"00bddda86939972ab9074ee30fe010efc4a806da","modified":1703058728677},{"_id":"public/posts/31155/index.html","hash":"6e15b0e9ca681e04a6700ca159fcea5ac7ae4642","modified":1703058728677},{"_id":"public/archives/index.html","hash":"062973a2f398c8152c67a2482127b2142ae71d4f","modified":1703058728677},{"_id":"public/archives/page/2/index.html","hash":"e32d0b1b3b23b9deb9821efb8c8a567f19baba61","modified":1703058728677},{"_id":"public/archives/page/3/index.html","hash":"9a77abe5ce5a5c2b8996100bffe12c7f7c44c016","modified":1703058728677},{"_id":"public/archives/page/4/index.html","hash":"463137b7329a7d07285d985606013b2e4044fa37","modified":1703058728677},{"_id":"public/archives/2021/index.html","hash":"dda92bb01bc9a23f9bdc4b0ecc2e8c5e1d02f38d","modified":1703058728677},{"_id":"public/archives/2021/page/2/index.html","hash":"31499cb815be69857f22f60fb3a0e4739dc6d4e4","modified":1703058728677},{"_id":"public/archives/2021/02/index.html","hash":"dcc34cd2c7a8f87569a17142d229655263ad6c20","modified":1703058728677},{"_id":"public/archives/2021/03/index.html","hash":"200310e49ebe50b090e5322cb1cc36da9af1279d","modified":1703058728677},{"_id":"public/archives/2021/10/index.html","hash":"9e1da5414d2d06bf35fd073a1676891d96f3b297","modified":1703058728677},{"_id":"public/archives/2021/09/index.html","hash":"b55a21285cd6c1bd61464227bd5d322790606d36","modified":1703058728677},{"_id":"public/archives/2021/11/index.html","hash":"d22edbcd2ef94142f4259894ac09b5ad013aa7f1","modified":1703058728677},{"_id":"public/archives/2022/index.html","hash":"5de25c9a1f7fc8fd08d306f05d64fd5bc87bb3af","modified":1703058728677},{"_id":"public/archives/2022/page/2/index.html","hash":"8808aafacc81c0672402f94bdabf0761002c0b15","modified":1703058728677},{"_id":"public/archives/2022/03/index.html","hash":"7f8f88ea32a44d63b8f35fca2cf01187b9961dae","modified":1703058728677},{"_id":"public/archives/2022/04/index.html","hash":"c220c1b66bb48ed1a2d4558784e63a0ab7281516","modified":1703058728677},{"_id":"public/archives/2022/06/index.html","hash":"69717cc4535ff37c89ca225b2ae9932eec7d8310","modified":1703058728677},{"_id":"public/archives/2022/08/index.html","hash":"688f5c3600a44d003bc04c19de7b10e1f2f3e26b","modified":1703058728677},{"_id":"public/archives/2022/10/index.html","hash":"fa4eb08e14272c1995a78d1426897dd5d4d2cf3a","modified":1703058728677},{"_id":"public/categories/Vue3/index.html","hash":"e7e7569d563f91f6659c818f2773d87af75075b0","modified":1703058728677},{"_id":"public/categories/JavaScript/page/2/index.html","hash":"5d179d4df706d7be6f6650b9c656657f5574e125","modified":1703058728677},{"_id":"public/categories/JavaScript/index.html","hash":"241ced13020761155a6f65017ed6ca7fec503b36","modified":1703058728677},{"_id":"public/categories/Vue/index.html","hash":"ceba0e148b5fe6be3af8f3a4f3cb20a1606bca13","modified":1703058728677},{"_id":"public/categories/杂文/index.html","hash":"b3c4286e7f9c10e7c527762fd745980db98f3947","modified":1703058728677},{"_id":"public/categories/Webpack/index.html","hash":"4d89c24206d90e9290d5783fe4aa30847f0b332d","modified":1703058728677},{"_id":"public/categories/前端工程化/index.html","hash":"43adfbc7365877a57ec99dd43493cf715f0055f1","modified":1703058728677},{"_id":"public/categories/Html/index.html","hash":"6fe73994bd7fa4c3342f78930ab86511a85069a8","modified":1703058728677},{"_id":"public/categories/React/index.html","hash":"cc91d4aadfa620378f78779779e26b38c55658f0","modified":1703058728677},{"_id":"public/categories/Vuex/index.html","hash":"ca8703809d9af190de9555363e7980ea2e49ed09","modified":1703058728677},{"_id":"public/categories/计算机网络/index.html","hash":"195e2f84a6b8c5b1c98eefe5cafde1ca87a11b8c","modified":1703058728677},{"_id":"public/categories/安全/index.html","hash":"34f9b80272987060050861debb20a86324c17a0e","modified":1703058728677},{"_id":"public/categories/小程序/index.html","hash":"08f3de9e0adf17259fc901807e84f744595f0c22","modified":1703058728677},{"_id":"public/categories/微前端/index.html","hash":"7dc5725a88a4f83b331e193002da9a4261941a77","modified":1703058728677},{"_id":"public/categories/随笔/index.html","hash":"6a517a298f4430a84106bf87e89b3e98a301e8fc","modified":1703058728677},{"_id":"public/page/2/index.html","hash":"46b61ba8652b6e8ea4a96447e38a15ad46112801","modified":1703058728677},{"_id":"public/page/3/index.html","hash":"cdc77eb4732599004127c3a32163c662e022b299","modified":1703058728677},{"_id":"public/index.html","hash":"34b82d145184d17e03859f1e70a67306d048377a","modified":1703058728677},{"_id":"public/page/4/index.html","hash":"969f28459f6f365bdca3b3aaa1d78262ec0acd92","modified":1703058728677},{"_id":"public/tags/JavaScript/index.html","hash":"cf8526bb6701de4b9889bc1fd2d9a8f1a6d33214","modified":1703058728677},{"_id":"public/tags/Vue3/index.html","hash":"936819003f54a1ecb193866ce8e86d73ba05ff9b","modified":1703058728677},{"_id":"public/tags/Promise/index.html","hash":"f177bc4b5c28ef8c4e471aea5e225db7066365eb","modified":1703058728677},{"_id":"public/tags/杂文/index.html","hash":"69a7245f80da780c6091ab70dde776d2496d0337","modified":1703058728677},{"_id":"public/tags/Vue/index.html","hash":"027c9b42741ac2bb89f6950bac9731f27422df43","modified":1703058728677},{"_id":"public/tags/Webpack/index.html","hash":"56ab389fc48bac3682bc9d538b8badab696be824","modified":1703058728677},{"_id":"public/tags/前端工程化/index.html","hash":"c9733e2007906b47c8dfa5caba665d05be269fc8","modified":1703058728677},{"_id":"public/tags/Html/index.html","hash":"069d4e388156b3d0407532de9ed2e20a289b1c66","modified":1703058728677},{"_id":"public/tags/React/index.html","hash":"8dbdb97123ccd2325d6730e1a34e9a3c35dc527a","modified":1703058728677},{"_id":"public/tags/面试/index.html","hash":"fa79f66c7a7b4f2aaa006e449c6a202676d46565","modified":1703058728677},{"_id":"public/tags/JS基础/index.html","hash":"a23851253dca0b3e3edfbcc1e6b4ffffa899689e","modified":1703058728677},{"_id":"public/tags/Vuex/index.html","hash":"c273f7032073e941e730ea80e4f1577e31a5b248","modified":1703058728677},{"_id":"public/tags/计算机网络/index.html","hash":"7286f2c3b4ebc1c5f091267822509cafa54f1b88","modified":1703058728677},{"_id":"public/tags/网络安全/index.html","hash":"dfef2b0375bc693869c88a4f3d97bc55e086f9ff","modified":1703058728677},{"_id":"public/tags/安全/index.html","hash":"2cc3cb0aaca1eb07387d5ad7f3f6e32d46f3be7f","modified":1703058728677},{"_id":"public/tags/小程序/index.html","hash":"deb69948b633f5a654e4d9dc1c41b034c8ec67c7","modified":1703058728677},{"_id":"public/tags/micro/index.html","hash":"5d1a4b3727321e946d8ff0d2ce35e8e22cf5c1be","modified":1703058728677},{"_id":"public/tags/工程化/index.html","hash":"ebf9269e25f4c935e534f1e2bf9a408b30548f46","modified":1703058728677},{"_id":"public/tags/读书笔记/index.html","hash":"87da66f34133bdbd5712aa2aac5da6f425315ffb","modified":1703058728677},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1703055434970},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1703055434970},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1703055434970},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1703055434970},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1703055434970},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1703055434970},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1703055434970},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1703055434970},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1703055434970},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1703055434970},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1703055434970},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1703055434970},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1703055434970},{"_id":"public/README.MDOWN","hash":"fd198e7292ee1242ffb19a30dd3d00025b5132cc","modified":1703055434970},{"_id":"public/posts/38405/1.png","hash":"d0cfaca2f2011b7e241cc416847faf5265201773","modified":1703055434970},{"_id":"public/posts/38405/2.png","hash":"fb4c95f3f67fc071a3a4da0c36bc2dc18a48635d","modified":1703055434970},{"_id":"public/posts/8636/3.png","hash":"54caf834d1c277b16982bd9cbcfd4f81ddb4dc82","modified":1703055434970},{"_id":"public/live2dw/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1703055434970},{"_id":"public/live2dw/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1703055434970},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1703055434970},{"_id":"public/live2dw/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1703055434970},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1703055434970},{"_id":"public/images/author.png","hash":"c0f9632ffbae04b6d95f58c95a165affcc63a804","modified":1703055434970},{"_id":"public/images/WechatPay.jpeg","hash":"4b9d75f82c409c0dfe49c72b349b926c3c1f5e1d","modified":1703055434970},{"_id":"public/images/wechatpay.jpg","hash":"55bdba5eaf9e12177b004fc7e9c230e4f7685c8f","modified":1703055434970},{"_id":"public/posts/22769/1.jpeg","hash":"42df57942a8b0c509f5e72e581beac7663bf4fec","modified":1703055434970},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1703055434970},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1703055434970},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1703055434970},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1703055434970},{"_id":"public/js/algolia-search.js","hash":"a360423984cdd915d04365c51bcab440e52d7223","modified":1703055434970},{"_id":"public/js/local-search.js","hash":"da2051e7cab184ae4aa64457c5db7476b4645fdc","modified":1703055434970},{"_id":"public/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1703055434970},{"_id":"public/js/src/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1703055434970},{"_id":"public/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1703055434970},{"_id":"public/js/schemes/muse.js","hash":"9d15d0d6a58b1df74827288f117af22b4b6aafe5","modified":1703055434970},{"_id":"public/js/utils.js","hash":"fcb84304fc3ba06f8c4f840fe1e0843339e0899d","modified":1703055434970},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1703055434970},{"_id":"public/css/main.css","hash":"67ce1e2a59cad1a22084213692c32a5e319655f1","modified":1703055434970},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1703055434970},{"_id":"public/images/Alipay.jpeg","hash":"38569d1dc192489a4dca73112fb1258d503cdc3a","modified":1703055434970},{"_id":"public/images/alipay.jpg","hash":"da47959ff0f76b452e4f44e16dd6ece7805a115b","modified":1703055434970},{"_id":"public/posts/36892/1.jpg","hash":"976e25937109f25dbbc2cae6f03c601297cc4c16","modified":1703055434970},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1703055434970},{"_id":"public/live2dw/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1703055434970},{"_id":"public/posts/17039/1.jpg","hash":"0eb8a20d5ad7294a4625c6ea60f397bb2ac0337a","modified":1703055434970},{"_id":"public/posts/45795/micro-1.jpg","hash":"8f4a6274d1fbe81241af3c6e10333c5de0a6ad45","modified":1703055434970},{"_id":"public/live2dw/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1703055434970},{"_id":"public/posts/36892/2.jpg","hash":"bf6ecf0f3ed64078140326b289c63f28c249a009","modified":1703055434970},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1703055434970},{"_id":"public/posts/3116/vuex-1.png","hash":"daca8333760b748610b4b726fe6d3bbff44f5208","modified":1703055434970},{"_id":"public/posts/22254/1.jpg","hash":"85e0da8c8f59688a5298ed6981efa3a5bad4cc50","modified":1703055434970},{"_id":"public/posts/8636/1.image","hash":"de034f390f6f3b4f71146d91a444831ca9ae7627","modified":1703055434970},{"_id":"public/posts/8636/2.image","hash":"efb31f0f3a005f4bd6e5529254d6f69dd2131a13","modified":1703055434970},{"_id":"source/_posts/羽毛球学习记录.md","hash":"620daebdedc009123a9fcbf32eacb887dd67267b","modified":1703058678602},{"_id":"public/posts/44862/index.html","hash":"328592975ddd9a9ea6782ad8c9451ee85a1e1bbe","modified":1703058728677},{"_id":"public/archives/page/5/index.html","hash":"ce360c0877f3118309de1443fac25434ee4b1135","modified":1703058728677},{"_id":"public/archives/2023/12/index.html","hash":"4931f786b7baf056e107474bdd60f3e56cd7ed8d","modified":1703058728677},{"_id":"public/archives/2023/index.html","hash":"0527b972cae36fc92396e31bb6aa38ddcf84bff2","modified":1703058728677},{"_id":"public/page/5/index.html","hash":"8569e18e7395b2b785729b0f8ed09671e0de5ca3","modified":1703058728677}],"Category":[{"name":"Vue3","_id":"clqdf8hsu000444t17f2d8pca"},{"name":"JavaScript","_id":"clqdf8ht8000n44t1fehkdted"},{"name":"Vue","_id":"clqdf8htg001m44t1hhrnc9df"},{"name":"杂文","_id":"clqdf8hth001u44t1gqe1e3bk"},{"name":"Webpack","_id":"clqdf8htj002244t16pca2lo2"},{"name":"前端工程化","_id":"clqdf8htu002o44t16o4m014j"},{"name":"Html","_id":"clqdf8htw002x44t18jp0hwm0"},{"name":"React","_id":"clqdf8hu1003444t1a7xfblpv"},{"name":"Vuex","_id":"clqdf8hu9003i44t1azj671vl"},{"name":"计算机网络","_id":"clqdf8hua003p44t17u8k3th2"},{"name":"安全","_id":"clqdf8huc003u44t1b9rt7lde"},{"name":"小程序","_id":"clqdf8hud003z44t1f86g2uwp"},{"name":"微前端","_id":"clqdf8hue004344t1bwfg32yp"},{"name":"随笔","_id":"clqdf8huq004u44t1gfmycq74"}],"Data":[{"_id":"APlayer","data":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n"},{"_id":"DaoVoice","data":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}],"Page":[{"title":"about","date":"2021-02-25T13:37:37.000Z","_content":"\n本站采用Hexo中Next Picses搭建的网站，使用GitHub+Action自动部署\n\n&emsp;\n&emsp;\n#### <center>你若盛开 蝴蝶自来</center>\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-02-25 21:37:37\n---\n\n本站采用Hexo中Next Picses搭建的网站，使用GitHub+Action自动部署\n\n&emsp;\n&emsp;\n#### <center>你若盛开 蝴蝶自来</center>\n\n\n","updated":"2022-07-13T01:47:22.019Z","path":"about/index.html","comments":1,"layout":"page","_id":"clqdf8hsi000044t1btk17ztp","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>本站采用Hexo中Next Picses搭建的网站，使用GitHub+Action自动部署</p>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"你若盛开-蝴蝶自来\"><a href=\"#你若盛开-蝴蝶自来\" class=\"headerlink\" title=\"你若盛开 蝴蝶自来\"></a><center>你若盛开 蝴蝶自来</center></h4>","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>本站采用Hexo中Next Picses搭建的网站，使用GitHub+Action自动部署</p>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"你若盛开-蝴蝶自来\"><a href=\"#你若盛开-蝴蝶自来\" class=\"headerlink\" title=\"你若盛开 蝴蝶自来\"></a><center>你若盛开 蝴蝶自来</center></h4>","length":64},{"title":"分类","type":"categories","comments":0,"date":"2021-02-24T10:03:47.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ncomments: false\ndate: 2021-02-24 18:03:47\n---\n","updated":"2022-07-13T01:47:22.022Z","path":"categories/index.html","layout":"page","_id":"clqdf8hss000244t16h9e27ay","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"","length":0},{"title":"tags","date":"2021-02-25T06:45:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-02-25 14:45:20\ntype: tags\n---\n","updated":"2022-07-13T01:47:22.031Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clqdf8hsv000644t12hir33bt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"","length":0}],"Post":[{"title":"0-1搭建Vue3+Vite3模板工程（2）-安装依赖","copyright":true,"comments":1,"abbrlink":39130,"date":"2022-08-08T02:13:47.000Z","_content":"\n接上篇[0-1搭建Vue3+Vite3模板工程（1）-创建工程](https://juejin.cn/post/7127204457925836813)\n\n### 一、eslint、css 预处理器sass安装\n\n1. /tsconfig.json配置文件可以配置使用'@'符号引入\n\n```js\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"esnext\", \"dom\"],\n    \"skipLibCheck\": true, // 解决打包报`vue-tsc --noEmit && vite build`的错,忽略所有的声明文件(*.d.ts)的类型检查\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\":[\n        \"src/*\"\n      ]\n    }\n\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.d.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"],\n  // ts 排除的文件\n  \"exclude\": [\"node_modules\"],\n  \"suppressImplicitAnyIndexErrors\":true, // \n}\n```\n\n想了解这些配置含义可以参考这篇文章，\n    [# tsconfig.json常见配置](https://juejin.cn/post/7129321798734184462/)\n\n2. eslint安装\n\n\n```js\nnpm install --save-dev eslint eslint-plugin-vue\n```\n\neslint配置文件： 在src文件夹下建立.eslintrc.ts文件，配置如下：\n\n```js\nmodule.exports = {\n  root: true,\n  parserOptions: {\n    sourceType: 'module'\n  },\n  parser: 'vue-eslint-parser',\n  extends: ['plugin:vue/vue3-essential', 'plugin:vue/vue3-strongly\u0002recommended', 'plugin:vue/vue3-recommended'],\n  env: {\n    browser: true,\n    node: true,\n    es6: true\n  },\n  rules: {\n    'no-console': 'off',\n    'comma-dangle': [2, 'never'] //禁止使用拖尾逗号\n  }\n}\n```\n\nTODO： 整理一下eslint配置含义\n3. 安装css预处理器\n\n```js\nnpm install -D sass sass-loader\n```\n\n### 二、在项目中引入element plus UI组件库\n可参考官网：\nhttps://element-plus.gitee.io/zh-CN/guide/quickstart.html\n\n根据自己的需要，如果不在乎打包后大小可以完整导入，也可以按需引入。\n\n本篇文章就完整引入了。\n\n```js\nnpm install element-plus --save\n```\n\n在main.ts中加入下面两句：\n\n```js\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\n\ncreateApp(App).use(store, key).use(router).use(ElementPlus).mount('#app')\n```\n然后我们验证一下element plus是否安装成功。\n\n修改HelloWorld.vue文件：\n\n```js\n<template>\n  <p>{{ showcount }}</p>\n  <el-button @click=\"addBtn\">增加</el-button>\n</template>\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\"\nimport { useStore } from \"@/store/index\"\nconst store = useStore()\nconst count = ref(0)\nconst showcount = computed(() => {\n  return store.getters[\"getCount\"]\n})\nconst addBtn = () => {\n  store.commit(\"setCount\", ++count.value)\n}\n</script>\n<style scoped></style>\n```\n注意，我们通过“@”符号引入文件可能会报错：\n```\nFailed to resolve import \"@/store/index\" from \"src\\components\\HelloWorld.vue\". Does the file exist?\n```\n解决办法，安装@types/node： \n\n```js\nnpm i --save-dev @types/node\n```\n\n然后修改vite.config.ts文件，配置“@”符号引入：\n\n```js\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport { resolve } from 'path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()],\n  resolve:{\n    alias:[\n      {\n        find: '@',\n        replacement: resolve(__dirname, 'src')\n      }\n    ],\n  },\n  \n})\n```\n\n然后浏览器中就可以看到下面的图，说明element plus引入成功了：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42d367b4b4534682902c696b009a3fe6~tplv-k3u1fbpfcp-watermark.image?)\n\n下面讲解如何布局。\n\n","source":"_posts/0-1搭建Vue3+Vite3模板工程（2）.md","raw":"---\ntitle: 0-1搭建Vue3+Vite3模板工程（2）-安装依赖\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 39130\ndate: 2022-08-08 10:13:47\n---\n\n接上篇[0-1搭建Vue3+Vite3模板工程（1）-创建工程](https://juejin.cn/post/7127204457925836813)\n\n### 一、eslint、css 预处理器sass安装\n\n1. /tsconfig.json配置文件可以配置使用'@'符号引入\n\n```js\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"esnext\", \"dom\"],\n    \"skipLibCheck\": true, // 解决打包报`vue-tsc --noEmit && vite build`的错,忽略所有的声明文件(*.d.ts)的类型检查\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\":[\n        \"src/*\"\n      ]\n    }\n\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.d.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"],\n  // ts 排除的文件\n  \"exclude\": [\"node_modules\"],\n  \"suppressImplicitAnyIndexErrors\":true, // \n}\n```\n\n想了解这些配置含义可以参考这篇文章，\n    [# tsconfig.json常见配置](https://juejin.cn/post/7129321798734184462/)\n\n2. eslint安装\n\n\n```js\nnpm install --save-dev eslint eslint-plugin-vue\n```\n\neslint配置文件： 在src文件夹下建立.eslintrc.ts文件，配置如下：\n\n```js\nmodule.exports = {\n  root: true,\n  parserOptions: {\n    sourceType: 'module'\n  },\n  parser: 'vue-eslint-parser',\n  extends: ['plugin:vue/vue3-essential', 'plugin:vue/vue3-strongly\u0002recommended', 'plugin:vue/vue3-recommended'],\n  env: {\n    browser: true,\n    node: true,\n    es6: true\n  },\n  rules: {\n    'no-console': 'off',\n    'comma-dangle': [2, 'never'] //禁止使用拖尾逗号\n  }\n}\n```\n\nTODO： 整理一下eslint配置含义\n3. 安装css预处理器\n\n```js\nnpm install -D sass sass-loader\n```\n\n### 二、在项目中引入element plus UI组件库\n可参考官网：\nhttps://element-plus.gitee.io/zh-CN/guide/quickstart.html\n\n根据自己的需要，如果不在乎打包后大小可以完整导入，也可以按需引入。\n\n本篇文章就完整引入了。\n\n```js\nnpm install element-plus --save\n```\n\n在main.ts中加入下面两句：\n\n```js\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\n\ncreateApp(App).use(store, key).use(router).use(ElementPlus).mount('#app')\n```\n然后我们验证一下element plus是否安装成功。\n\n修改HelloWorld.vue文件：\n\n```js\n<template>\n  <p>{{ showcount }}</p>\n  <el-button @click=\"addBtn\">增加</el-button>\n</template>\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\"\nimport { useStore } from \"@/store/index\"\nconst store = useStore()\nconst count = ref(0)\nconst showcount = computed(() => {\n  return store.getters[\"getCount\"]\n})\nconst addBtn = () => {\n  store.commit(\"setCount\", ++count.value)\n}\n</script>\n<style scoped></style>\n```\n注意，我们通过“@”符号引入文件可能会报错：\n```\nFailed to resolve import \"@/store/index\" from \"src\\components\\HelloWorld.vue\". Does the file exist?\n```\n解决办法，安装@types/node： \n\n```js\nnpm i --save-dev @types/node\n```\n\n然后修改vite.config.ts文件，配置“@”符号引入：\n\n```js\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport { resolve } from 'path'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [vue()],\n  resolve:{\n    alias:[\n      {\n        find: '@',\n        replacement: resolve(__dirname, 'src')\n      }\n    ],\n  },\n  \n})\n```\n\n然后浏览器中就可以看到下面的图，说明element plus引入成功了：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42d367b4b4534682902c696b009a3fe6~tplv-k3u1fbpfcp-watermark.image?)\n\n下面讲解如何布局。\n\n","slug":"0-1搭建Vue3+Vite3模板工程（2）","published":1,"updated":"2023-12-20T06:57:18.901Z","_id":"clqdf8hsj000144t14vy46psq","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>接上篇<a href=\"https://juejin.cn/post/7127204457925836813\">0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>\n<h3 id=\"一、eslint、css-预处理器sass安装\"><a href=\"#一、eslint、css-预处理器sass安装\" class=\"headerlink\" title=\"一、eslint、css 预处理器sass安装\"></a>一、eslint、css 预处理器sass安装</h3><ol>\n<li>/tsconfig.json配置文件可以配置使用‘@’符号引入</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;useDefineForClassFields&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jsx&quot;</span>: <span class=\"string\">&quot;preserve&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;resolveJsonModule&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;esModuleInterop&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lib&quot;</span>: [<span class=\"string\">&quot;esnext&quot;</span>, <span class=\"string\">&quot;dom&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;skipLibCheck&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 解决打包报`vue-tsc --noEmit &amp;&amp; vite build`的错,忽略所有的声明文件(*.d.ts)的类型检查</span></span><br><span class=\"line\">    <span class=\"string\">&quot;baseUrl&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;paths&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;@/*&quot;</span>:[</span><br><span class=\"line\">        <span class=\"string\">&quot;src/*&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src/**/*.ts&quot;</span>, <span class=\"string\">&quot;src/**/*.d.ts&quot;</span>, <span class=\"string\">&quot;src/**/*.tsx&quot;</span>, <span class=\"string\">&quot;src/**/*.vue&quot;</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ts 排除的文件</span></span><br><span class=\"line\">  <span class=\"string\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class=\"literal\">true</span>, <span class=\"comment\">// </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>想了解这些配置含义可以参考这篇文章，<br>    <a href=\"https://juejin.cn/post/7129321798734184462/\"># tsconfig.json常见配置</a></p>\n<ol start=\"2\">\n<li>eslint安装</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev eslint eslint-plugin-vue</span><br></pre></td></tr></table></figure>\n\n<p>eslint配置文件： 在src文件夹下建立.eslintrc.ts文件，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  root: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    sourceType: <span class=\"string\">&#x27;module&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  parser: <span class=\"string\">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">extends</span>: [<span class=\"string\">&#x27;plugin:vue/vue3-essential&#x27;</span>, <span class=\"string\">&#x27;plugin:vue/vue3-strongly\u0002recommended&#x27;</span>, <span class=\"string\">&#x27;plugin:vue/vue3-recommended&#x27;</span>],</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    node: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    es6: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-console&#x27;</span>: <span class=\"string\">&#x27;off&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;comma-dangle&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;never&#x27;</span>] <span class=\"comment\">//禁止使用拖尾逗号</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TODO： 整理一下eslint配置含义<br>3. 安装css预处理器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D sass sass-loader</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、在项目中引入element-plus-UI组件库\"><a href=\"#二、在项目中引入element-plus-UI组件库\" class=\"headerlink\" title=\"二、在项目中引入element plus UI组件库\"></a>二、在项目中引入element plus UI组件库</h3><p>可参考官网：<br><a href=\"https://element-plus.gitee.io/zh-CN/guide/quickstart.html\">https://element-plus.gitee.io/zh-CN/guide/quickstart.html</a></p>\n<p>根据自己的需要，如果不在乎打包后大小可以完整导入，也可以按需引入。</p>\n<p>本篇文章就完整引入了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install element-plus --save</span><br></pre></td></tr></table></figure>\n\n<p>在main.ts中加入下面两句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ElementPlus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).use(store, key).use(router).use(ElementPlus).mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>然后我们验证一下element plus是否安装成功。</p>\n<p>修改HelloWorld.vue文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123; showcount &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;el-button @click=<span class=\"string\">&quot;addBtn&quot;</span>&gt;增加&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/store/index&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = useStore()</span><br><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> showcount = computed(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> store.getters[<span class=\"string\">&quot;getCount&quot;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> addBtn = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  store.commit(<span class=\"string\">&quot;setCount&quot;</span>, ++count.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>注意，我们通过“@”符号引入文件可能会报错：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed <span class=\"built_in\">to</span> <span class=\"built_in\">resolve</span> import <span class=\"string\">&quot;@/store/index&quot;</span> <span class=\"built_in\">from</span> <span class=\"string\">&quot;src\\components\\HelloWorld.vue&quot;</span>. Does <span class=\"keyword\">the</span> <span class=\"built_in\">file</span> exist?</span><br></pre></td></tr></table></figure>\n<p>解决办法，安装@types/node： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev @types/node</span><br></pre></td></tr></table></figure>\n\n<p>然后修改vite.config.ts文件，配置“@”符号引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  plugins: [vue()],</span><br><span class=\"line\">  resolve:&#123;</span><br><span class=\"line\">    alias:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        find: <span class=\"string\">&#x27;@&#x27;</span>,</span><br><span class=\"line\">        replacement: resolve(__dirname, <span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>然后浏览器中就可以看到下面的图，说明element plus引入成功了：</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42d367b4b4534682902c696b009a3fe6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>下面讲解如何布局。</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>接上篇<a href=\"https://juejin.cn/post/7127204457925836813\">0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>\n<h3 id=\"一、eslint、css-预处理器sass安装\"><a href=\"#一、eslint、css-预处理器sass安装\" class=\"headerlink\" title=\"一、eslint、css 预处理器sass安装\"></a>一、eslint、css 预处理器sass安装</h3><ol>\n<li>/tsconfig.json配置文件可以配置使用‘@’符号引入</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;useDefineForClassFields&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jsx&quot;</span>: <span class=\"string\">&quot;preserve&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;resolveJsonModule&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;esModuleInterop&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lib&quot;</span>: [<span class=\"string\">&quot;esnext&quot;</span>, <span class=\"string\">&quot;dom&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;skipLibCheck&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 解决打包报`vue-tsc --noEmit &amp;&amp; vite build`的错,忽略所有的声明文件(*.d.ts)的类型检查</span></span><br><span class=\"line\">    <span class=\"string\">&quot;baseUrl&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;paths&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;@/*&quot;</span>:[</span><br><span class=\"line\">        <span class=\"string\">&quot;src/*&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src/**/*.ts&quot;</span>, <span class=\"string\">&quot;src/**/*.d.ts&quot;</span>, <span class=\"string\">&quot;src/**/*.tsx&quot;</span>, <span class=\"string\">&quot;src/**/*.vue&quot;</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ts 排除的文件</span></span><br><span class=\"line\">  <span class=\"string\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class=\"literal\">true</span>, <span class=\"comment\">// </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>想了解这些配置含义可以参考这篇文章，<br>    <a href=\"https://juejin.cn/post/7129321798734184462/\"># tsconfig.json常见配置</a></p>\n<ol start=\"2\">\n<li>eslint安装</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev eslint eslint-plugin-vue</span><br></pre></td></tr></table></figure>\n\n<p>eslint配置文件： 在src文件夹下建立.eslintrc.ts文件，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  root: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    sourceType: <span class=\"string\">&#x27;module&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  parser: <span class=\"string\">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">extends</span>: [<span class=\"string\">&#x27;plugin:vue/vue3-essential&#x27;</span>, <span class=\"string\">&#x27;plugin:vue/vue3-strongly\u0002recommended&#x27;</span>, <span class=\"string\">&#x27;plugin:vue/vue3-recommended&#x27;</span>],</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    node: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    es6: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;no-console&#x27;</span>: <span class=\"string\">&#x27;off&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;comma-dangle&#x27;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&#x27;never&#x27;</span>] <span class=\"comment\">//禁止使用拖尾逗号</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TODO： 整理一下eslint配置含义<br>3. 安装css预处理器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D sass sass-loader</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、在项目中引入element-plus-UI组件库\"><a href=\"#二、在项目中引入element-plus-UI组件库\" class=\"headerlink\" title=\"二、在项目中引入element plus UI组件库\"></a>二、在项目中引入element plus UI组件库</h3><p>可参考官网：<br><a href=\"https://element-plus.gitee.io/zh-CN/guide/quickstart.html\">https://element-plus.gitee.io/zh-CN/guide/quickstart.html</a></p>\n<p>根据自己的需要，如果不在乎打包后大小可以完整导入，也可以按需引入。</p>\n<p>本篇文章就完整引入了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install element-plus --save</span><br></pre></td></tr></table></figure>\n\n<p>在main.ts中加入下面两句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ElementPlus <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).use(store, key).use(router).use(ElementPlus).mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>然后我们验证一下element plus是否安装成功。</p>\n<p>修改HelloWorld.vue文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123; showcount &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;el-button @click=<span class=\"string\">&quot;addBtn&quot;</span>&gt;增加&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/store/index&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = useStore()</span><br><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> showcount = computed(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> store.getters[<span class=\"string\">&quot;getCount&quot;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> addBtn = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  store.commit(<span class=\"string\">&quot;setCount&quot;</span>, ++count.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>注意，我们通过“@”符号引入文件可能会报错：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed <span class=\"built_in\">to</span> <span class=\"built_in\">resolve</span> import <span class=\"string\">&quot;@/store/index&quot;</span> <span class=\"built_in\">from</span> <span class=\"string\">&quot;src\\components\\HelloWorld.vue&quot;</span>. Does <span class=\"keyword\">the</span> <span class=\"built_in\">file</span> exist?</span><br></pre></td></tr></table></figure>\n<p>解决办法，安装@types/node： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev @types/node</span><br></pre></td></tr></table></figure>\n\n<p>然后修改vite.config.ts文件，配置“@”符号引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  plugins: [vue()],</span><br><span class=\"line\">  resolve:&#123;</span><br><span class=\"line\">    alias:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        find: <span class=\"string\">&#x27;@&#x27;</span>,</span><br><span class=\"line\">        replacement: resolve(__dirname, <span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>然后浏览器中就可以看到下面的图，说明element plus引入成功了：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42d367b4b4534682902c696b009a3fe6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>下面讲解如何布局。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42d367b4b4534682902c696b009a3fe6~tplv-k3u1fbpfcp-watermark.image","popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"0-1搭建Vue3+Vite3模板工程（2）-安装依赖","path":"posts/39130/","eyeCatchImage":"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42d367b4b4534682902c696b009a3fe6~tplv-k3u1fbpfcp-watermark.image","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-08T02:13:47.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-08T02:13:47.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3182},{"title":"0-1搭建Vue3+Vite3模板工程（1）-创建工程","copyright":true,"comments":1,"abbrlink":44161,"date":"2022-08-05T02:42:35.000Z","_content":"\n从0搭建一个工程可以更清楚的了解工程的组成，对工程的依赖、配置和运行理解更深入，以后搭建自己脚手架，生成自己的模板工程，提高效率。\n### 技术栈\n1. Vite3.x\n2. Vue3.2\n3. TypeScript\n4. Vuex4.x\n5. Vue Router4.x\n6. CSS3\n### 准备\n1. node.js版本需要大于12.0.0\n2. npm\n### 创建项目\n根据vue3官网生成模板工程：https://v3.cn.vuejs.org/guide/installation.html#vite\n\n记得将project-name换成自己项目的名字：\n\n```js\nnpm init vite@latest <project-name> --template vue\n```\n\n1.选择vue：\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a920f9491ef47f0ad6e1c21eaf3ec39~tplv-k3u1fbpfcp-watermark.image?)\n 2.选择vue-ts：\n    \n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b5171c87b2248c7949cbf9e2a9f78b1~tplv-k3u1fbpfcp-watermark.image?)\n  \n3.看到这里就已经创建成功了：\n    \n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d0411a78e174a58910804a3e75d5f8a~tplv-k3u1fbpfcp-watermark.image?)\n4.根据提示启动工程：\n`cd vue3-demo\n  npm install\n  npm run dev`\n5.访问本地http://127.0.0.1:5173/：\n    \n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4ff39b503d64415bf36642605ab3107~tplv-k3u1fbpfcp-watermark.image?)\n    \n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a129e063aada4ce1bade454745091f3d~tplv-k3u1fbpfcp-watermark.image?)\n至此，工程创建成功，接下来需要一步一步根据项目需要安装和配置项目所需的依赖。\n### 安装依赖\n如果使用的是vscode编辑器，需要禁用Vetur插件，安装Vue Language Features (Volar)插件。\n\n1.安装路由\n\n```js\nnpm install vue-router@4\n```\n配置路由：\n在src根目录下建立/router/index.ts文件,路由配置例子如下：\n\n/src/router/index.ts\n```js\nimport { createRouter, createWebHistory, RouteRecordRaw } from 'vue-router'\nimport Layout from '../components/HelloWorld.vue'\nconst routes: Array<RouteRecordRaw> = [\n    {\n    path: '/',\n    name: 'Home',\n    component: Layout\n    }\n]\nconst router = createRouter({\n    history: createWebHistory(),\n    routes\n})\nexport default router\n```\n\nApp.vue\n\n```js\n<template>\n    <router-view/>\n</template>\n<style lang=\"scss\">\n</style>\n```\n\nmain.ts\n\n```js\nimport { createApp } from 'vue'\nimport './style.css'\nimport App from './App.vue'\nimport router from './router'\n\ncreateApp(App).use(router).mount('#app')\n```\n\n2.安装vuex\n\n```js\nnpm install vuex@next --save\n```\n\n建立/store/index.ts文件\n\n```js\nimport { InjectionKey } from 'vue'\nimport { createStore, useStore as baseUseStore, Store } from 'vuex'\nexport interface State {\n  count: number\n}\nexport const key: InjectionKey<Store<State>> = Symbol()\nexport const store = createStore<State>({\n  state: {\n    count: 0\n  },\n  mutations:{\n    setCount(state:State,count:number){\n      state.count = count\n    }\n  },\n  getters:{\n    getCount(state:State){\n      return state.count\n    }\n  }\n})\n// 定义自己的 `useStore` 组合式函数\nexport function useStore () {\n  return baseUseStore(key)\n}\n\n```\n修改main.ts\n\n```js\nimport { createApp } from 'vue'\nimport './style.css'\nimport App from './App.vue'\nimport router from './router'\nimport { store, key } from './store'\n\ncreateApp(App).use(store, key).use(router).mount('#app')\n```\n\n修改HelloWorld.vue文件\n\n```js\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\"\nimport { useStore } from \"../store\"\nconst store = useStore()\nconst count = ref(0)\nconst showcount = computed(() => {\n  return store.getters[\"getCount\"]\n})\nconst addBtn = () => {\n  store.commit(\"setCount\", ++count.value)\n}\n</script>\n<template>\n  <p>{{ showcount }}</p>\n  <button @click=\"addBtn\">增加</button>\n</template>\n<style scoped></style>\n\n```\n至此，vue-router和Vuex安装配置好了， 下面需要安装eslint,css预处理器及sass安装.\n","source":"_posts/0-1搭建Vue3+Vite3模板工程（1）.md","raw":"---\ntitle: 0-1搭建Vue3+Vite3模板工程（1）-创建工程\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 44161\ndate: 2022-08-05 10:42:35\n---\n\n从0搭建一个工程可以更清楚的了解工程的组成，对工程的依赖、配置和运行理解更深入，以后搭建自己脚手架，生成自己的模板工程，提高效率。\n### 技术栈\n1. Vite3.x\n2. Vue3.2\n3. TypeScript\n4. Vuex4.x\n5. Vue Router4.x\n6. CSS3\n### 准备\n1. node.js版本需要大于12.0.0\n2. npm\n### 创建项目\n根据vue3官网生成模板工程：https://v3.cn.vuejs.org/guide/installation.html#vite\n\n记得将project-name换成自己项目的名字：\n\n```js\nnpm init vite@latest <project-name> --template vue\n```\n\n1.选择vue：\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a920f9491ef47f0ad6e1c21eaf3ec39~tplv-k3u1fbpfcp-watermark.image?)\n 2.选择vue-ts：\n    \n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b5171c87b2248c7949cbf9e2a9f78b1~tplv-k3u1fbpfcp-watermark.image?)\n  \n3.看到这里就已经创建成功了：\n    \n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d0411a78e174a58910804a3e75d5f8a~tplv-k3u1fbpfcp-watermark.image?)\n4.根据提示启动工程：\n`cd vue3-demo\n  npm install\n  npm run dev`\n5.访问本地http://127.0.0.1:5173/：\n    \n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4ff39b503d64415bf36642605ab3107~tplv-k3u1fbpfcp-watermark.image?)\n    \n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a129e063aada4ce1bade454745091f3d~tplv-k3u1fbpfcp-watermark.image?)\n至此，工程创建成功，接下来需要一步一步根据项目需要安装和配置项目所需的依赖。\n### 安装依赖\n如果使用的是vscode编辑器，需要禁用Vetur插件，安装Vue Language Features (Volar)插件。\n\n1.安装路由\n\n```js\nnpm install vue-router@4\n```\n配置路由：\n在src根目录下建立/router/index.ts文件,路由配置例子如下：\n\n/src/router/index.ts\n```js\nimport { createRouter, createWebHistory, RouteRecordRaw } from 'vue-router'\nimport Layout from '../components/HelloWorld.vue'\nconst routes: Array<RouteRecordRaw> = [\n    {\n    path: '/',\n    name: 'Home',\n    component: Layout\n    }\n]\nconst router = createRouter({\n    history: createWebHistory(),\n    routes\n})\nexport default router\n```\n\nApp.vue\n\n```js\n<template>\n    <router-view/>\n</template>\n<style lang=\"scss\">\n</style>\n```\n\nmain.ts\n\n```js\nimport { createApp } from 'vue'\nimport './style.css'\nimport App from './App.vue'\nimport router from './router'\n\ncreateApp(App).use(router).mount('#app')\n```\n\n2.安装vuex\n\n```js\nnpm install vuex@next --save\n```\n\n建立/store/index.ts文件\n\n```js\nimport { InjectionKey } from 'vue'\nimport { createStore, useStore as baseUseStore, Store } from 'vuex'\nexport interface State {\n  count: number\n}\nexport const key: InjectionKey<Store<State>> = Symbol()\nexport const store = createStore<State>({\n  state: {\n    count: 0\n  },\n  mutations:{\n    setCount(state:State,count:number){\n      state.count = count\n    }\n  },\n  getters:{\n    getCount(state:State){\n      return state.count\n    }\n  }\n})\n// 定义自己的 `useStore` 组合式函数\nexport function useStore () {\n  return baseUseStore(key)\n}\n\n```\n修改main.ts\n\n```js\nimport { createApp } from 'vue'\nimport './style.css'\nimport App from './App.vue'\nimport router from './router'\nimport { store, key } from './store'\n\ncreateApp(App).use(store, key).use(router).mount('#app')\n```\n\n修改HelloWorld.vue文件\n\n```js\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\"\nimport { useStore } from \"../store\"\nconst store = useStore()\nconst count = ref(0)\nconst showcount = computed(() => {\n  return store.getters[\"getCount\"]\n})\nconst addBtn = () => {\n  store.commit(\"setCount\", ++count.value)\n}\n</script>\n<template>\n  <p>{{ showcount }}</p>\n  <button @click=\"addBtn\">增加</button>\n</template>\n<style scoped></style>\n\n```\n至此，vue-router和Vuex安装配置好了， 下面需要安装eslint,css预处理器及sass安装.\n","slug":"0-1搭建Vue3+Vite3模板工程（1）","published":1,"updated":"2023-12-20T06:57:18.909Z","_id":"clqdf8hst000344t17xvw1nuo","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>从0搭建一个工程可以更清楚的了解工程的组成，对工程的依赖、配置和运行理解更深入，以后搭建自己脚手架，生成自己的模板工程，提高效率。</p>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><ol>\n<li>Vite3.x</li>\n<li>Vue3.2</li>\n<li>TypeScript</li>\n<li>Vuex4.x</li>\n<li>Vue Router4.x</li>\n<li>CSS3<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3></li>\n<li>node.js版本需要大于12.0.0</li>\n<li>npm<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3>根据vue3官网生成模板工程：<a href=\"https://v3.cn.vuejs.org/guide/installation.html#vite\">https://v3.cn.vuejs.org/guide/installation.html#vite</a></li>\n</ol>\n<p>记得将project-name换成自己项目的名字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vite@latest &lt;project-name&gt; --template vue</span><br></pre></td></tr></table></figure>\n\n<p>1.选择vue：<br><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a920f9491ef47f0ad6e1c21eaf3ec39~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br> 2.选择vue-ts：</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b5171c87b2248c7949cbf9e2a9f78b1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>3.看到这里就已经创建成功了：</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d0411a78e174a58910804a3e75d5f8a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>4.根据提示启动工程：<br><code>cd vue3-demo   npm install   npm run dev</code><br>5.访问本地<a href=\"http://127.0.0.1:5173/%EF%BC%9A\">http://127.0.0.1:5173/：</a></p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4ff39b503d64415bf36642605ab3107~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a129e063aada4ce1bade454745091f3d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>至此，工程创建成功，接下来需要一步一步根据项目需要安装和配置项目所需的依赖。</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>如果使用的是vscode编辑器，需要禁用Vetur插件，安装Vue Language Features (Volar)插件。</p>\n<p>1.安装路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-router@<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>配置路由：<br>在src根目录下建立/router/index.ts文件,路由配置例子如下：</p>\n<p>/src/router/index.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/HelloWorld.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: <span class=\"built_in\">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">    component: Layout</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">    history: createWebHistory(),</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n\n<p>App.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;router-view/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>main.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).use(router).mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2.安装vuex</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuex@next --save</span><br></pre></td></tr></table></figure>\n\n<p>建立/store/index.ts文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectionKey &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, useStore <span class=\"keyword\">as</span> baseUseStore, Store &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface State &#123;</span><br><span class=\"line\">  count: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> key: InjectionKey&lt;Store&lt;State&gt;&gt; = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;State&gt;(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setCount</span>(<span class=\"params\">state:State,count:number</span>)</span>&#123;</span><br><span class=\"line\">      state.count = count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getCount</span>(<span class=\"params\">state:State</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 定义自己的 `useStore` 组合式函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useStore</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseUseStore(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>修改main.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; store, key &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).use(store, key).use(router).mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>修改HelloWorld.vue文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../store&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = useStore()</span><br><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> showcount = computed(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> store.getters[<span class=\"string\">&quot;getCount&quot;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> addBtn = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  store.commit(<span class=\"string\">&quot;setCount&quot;</span>, ++count.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123; showcount &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;button @click=<span class=\"string\">&quot;addBtn&quot;</span>&gt;增加&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>至此，vue-router和Vuex安装配置好了， 下面需要安装eslint,css预处理器及sass安装.</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>从0搭建一个工程可以更清楚的了解工程的组成，对工程的依赖、配置和运行理解更深入，以后搭建自己脚手架，生成自己的模板工程，提高效率。</p>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><ol>\n<li>Vite3.x</li>\n<li>Vue3.2</li>\n<li>TypeScript</li>\n<li>Vuex4.x</li>\n<li>Vue Router4.x</li>\n<li>CSS3<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3></li>\n<li>node.js版本需要大于12.0.0</li>\n<li>npm<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3>根据vue3官网生成模板工程：<a href=\"https://v3.cn.vuejs.org/guide/installation.html#vite\">https://v3.cn.vuejs.org/guide/installation.html#vite</a></li>\n</ol>\n<p>记得将project-name换成自己项目的名字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vite@latest &lt;project-name&gt; --template vue</span><br></pre></td></tr></table></figure>\n\n<p>1.选择vue：<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a920f9491ef47f0ad6e1c21eaf3ec39~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br> 2.选择vue-ts：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b5171c87b2248c7949cbf9e2a9f78b1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>3.看到这里就已经创建成功了：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d0411a78e174a58910804a3e75d5f8a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>4.根据提示启动工程：<br><code>cd vue3-demo   npm install   npm run dev</code><br>5.访问本地<a href=\"http://127.0.0.1:5173/%EF%BC%9A\">http://127.0.0.1:5173/：</a></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4ff39b503d64415bf36642605ab3107~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a129e063aada4ce1bade454745091f3d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>至此，工程创建成功，接下来需要一步一步根据项目需要安装和配置项目所需的依赖。</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>如果使用的是vscode编辑器，需要禁用Vetur插件，安装Vue Language Features (Volar)插件。</p>\n<p>1.安装路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-router@<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>配置路由：<br>在src根目录下建立/router/index.ts文件,路由配置例子如下：</p>\n<p>/src/router/index.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/HelloWorld.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: <span class=\"built_in\">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">    component: Layout</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">    history: createWebHistory(),</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n\n<p>App.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;router-view/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>main.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).use(router).mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2.安装vuex</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuex@next --save</span><br></pre></td></tr></table></figure>\n\n<p>建立/store/index.ts文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; InjectionKey &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, useStore <span class=\"keyword\">as</span> baseUseStore, Store &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface State &#123;</span><br><span class=\"line\">  count: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> key: InjectionKey&lt;Store&lt;State&gt;&gt; = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;State&gt;(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">setCount</span>(<span class=\"params\">state:State,count:number</span>)</span>&#123;</span><br><span class=\"line\">      state.count = count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getCount</span>(<span class=\"params\">state:State</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 定义自己的 `useStore` 组合式函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useStore</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseUseStore(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>修改main.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./style.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; store, key &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).use(store, key).use(router).mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>修改HelloWorld.vue文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../store&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = useStore()</span><br><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> showcount = computed(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> store.getters[<span class=\"string\">&quot;getCount&quot;</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> addBtn = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  store.commit(<span class=\"string\">&quot;setCount&quot;</span>, ++count.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123; showcount &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;button @click=<span class=\"string\">&quot;addBtn&quot;</span>&gt;增加&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;style scoped&gt;&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>至此，vue-router和Vuex安装配置好了， 下面需要安装eslint,css预处理器及sass安装.</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a920f9491ef47f0ad6e1c21eaf3ec39~tplv-k3u1fbpfcp-watermark.image","popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"0-1搭建Vue3+Vite3模板工程（1）-创建工程","path":"posts/44161/","eyeCatchImage":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a920f9491ef47f0ad6e1c21eaf3ec39~tplv-k3u1fbpfcp-watermark.image","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-05T02:42:35.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-05T02:42:35.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2817},{"title":"0-1搭建Vue3+Vite3模板工程（3）-布局","copyright":true,"comments":1,"abbrlink":29511,"date":"2022-08-11T07:56:23.000Z","_content":"\n[0-1搭建Vue3+Vite3模板工程（1）-创建工程](https://juejin.cn/post/7127204457925836813/)\n\n[0-1搭建Vue3+Vite3模板工程（2）-安装依赖](https://juejin.cn/post/7128214905953452039)\n\n接上篇。\n\n通常后管平台多以左右布局或上下布局为主，本篇讲解如何进行整体布局，以左右布局为例。\n1. 在index.html中加入以下样式：\n\n```js\nhtml,body,#app{\n  padding: 0px;\n  margin: 0px;\n  height: 100%;\n  box-sizing: border-box;\n}\n```\n2. 将main.ts引入的额外样式注释掉\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1ab2acdcdb4492879dd5d0ab0c51b3~tplv-k3u1fbpfcp-watermark.image?)\n\n3. 在src下新建layout文件夹，在layout下新建index.vue文件，在此文件中写整体布局。\n\nindex.vue\n```js\n<template>\n  <el-container class=\"layout\">\n    <el-aside class=\"asside\" width=\"200px\">Aside</el-aside>\n    <el-container class=\"layout\">\n      <el-header class=\"header\">Header</el-header>\n      <el-main class=\"main\">Main</el-main>\n    </el-container>\n  </el-container>\n</template>\n<script setup lang=\"ts\"></script>\n<style lang=\"scss\">\n.layout {\n  height: 100%;\n  .asside {\n    color: #fff;\n    background-color: rgb(48, 65, 86);\n  }\n  .header {\n    color: #fff;\n    background-color: #212938;\n  }\n  .main {\n    background-color: #fff;\n  }\n}\n</style>\n```\n\n4. 修改router配置：\n    router/index.ts文件修改成下面：\n    \n```js\nimport { createRouter, createWebHistory, RouteRecordRaw } from 'vue-router'\nimport Layout from '@/layout/index.vue'\nconst routes: Array<RouteRecordRaw> = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Layout\n  }\n]\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\nexport default router\n```\n启动工程可以看到首页如下：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0a42f12357c4bc49af076e7c1f9efad~tplv-k3u1fbpfcp-watermark.image?)\n\n5. 抽离头部和左侧菜单导航组件\n\n在layout下新建header和sidebar文件夹，分别新建index.vue文件\n\nheader/index.vue\n```js\n<template>\n  <div>header</div>\n</template>\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n</style>\n```\n\nsidebar/index.vue\n\n```js\n<template>\n  <div>sidebar</div>\n</template>\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n</style>\n```\n\n修改layout/index.vue, 引入header和sidebar两个组件：\n```js\n<template>\n  <el-container class=\"layout\">\n    <el-aside class=\"asside\" width=\"200px\">\n      <sidebar></sidebar>\n    </el-aside>\n    <el-container class=\"layout\">\n      <el-header class=\"header\">\n        <my-header></my-header>\n      </el-header>\n      <el-main class=\"main\">Main</el-main>\n    </el-container>\n  </el-container>\n</template>\n<script setup lang=\"ts\">\nimport MyHeader from './header/index.vue'\nimport Sidebar from './sidebar/index.vue'\n</script>\n<style lang=\"scss\">\n.layout {\n  height: 100%;\n  .asside {\n    color: #fff;\n    background-color: rgb(48, 65, 86);\n  }\n  .header {\n    color: #fff;\n    background-color: #212938;\n  }\n  .main {\n    background-color: #fff;\n  }\n}\n</style>\n\n```\n到此，整体布局做好了，大家可以根据自己需求调整，也可以调整为上下布局，下面讲解如何制作侧边菜单导航及面包屑。\n\n","source":"_posts/0-1搭建Vue3-Vite3模板工程（3）-布局.md","raw":"---\ntitle: 0-1搭建Vue3+Vite3模板工程（3）-布局\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 29511\ndate: 2022-08-11 15:56:23\n---\n\n[0-1搭建Vue3+Vite3模板工程（1）-创建工程](https://juejin.cn/post/7127204457925836813/)\n\n[0-1搭建Vue3+Vite3模板工程（2）-安装依赖](https://juejin.cn/post/7128214905953452039)\n\n接上篇。\n\n通常后管平台多以左右布局或上下布局为主，本篇讲解如何进行整体布局，以左右布局为例。\n1. 在index.html中加入以下样式：\n\n```js\nhtml,body,#app{\n  padding: 0px;\n  margin: 0px;\n  height: 100%;\n  box-sizing: border-box;\n}\n```\n2. 将main.ts引入的额外样式注释掉\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1ab2acdcdb4492879dd5d0ab0c51b3~tplv-k3u1fbpfcp-watermark.image?)\n\n3. 在src下新建layout文件夹，在layout下新建index.vue文件，在此文件中写整体布局。\n\nindex.vue\n```js\n<template>\n  <el-container class=\"layout\">\n    <el-aside class=\"asside\" width=\"200px\">Aside</el-aside>\n    <el-container class=\"layout\">\n      <el-header class=\"header\">Header</el-header>\n      <el-main class=\"main\">Main</el-main>\n    </el-container>\n  </el-container>\n</template>\n<script setup lang=\"ts\"></script>\n<style lang=\"scss\">\n.layout {\n  height: 100%;\n  .asside {\n    color: #fff;\n    background-color: rgb(48, 65, 86);\n  }\n  .header {\n    color: #fff;\n    background-color: #212938;\n  }\n  .main {\n    background-color: #fff;\n  }\n}\n</style>\n```\n\n4. 修改router配置：\n    router/index.ts文件修改成下面：\n    \n```js\nimport { createRouter, createWebHistory, RouteRecordRaw } from 'vue-router'\nimport Layout from '@/layout/index.vue'\nconst routes: Array<RouteRecordRaw> = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Layout\n  }\n]\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\nexport default router\n```\n启动工程可以看到首页如下：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0a42f12357c4bc49af076e7c1f9efad~tplv-k3u1fbpfcp-watermark.image?)\n\n5. 抽离头部和左侧菜单导航组件\n\n在layout下新建header和sidebar文件夹，分别新建index.vue文件\n\nheader/index.vue\n```js\n<template>\n  <div>header</div>\n</template>\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n</style>\n```\n\nsidebar/index.vue\n\n```js\n<template>\n  <div>sidebar</div>\n</template>\n<script lang='ts' setup>\n</script>\n<style lang='scss' scoped>\n</style>\n```\n\n修改layout/index.vue, 引入header和sidebar两个组件：\n```js\n<template>\n  <el-container class=\"layout\">\n    <el-aside class=\"asside\" width=\"200px\">\n      <sidebar></sidebar>\n    </el-aside>\n    <el-container class=\"layout\">\n      <el-header class=\"header\">\n        <my-header></my-header>\n      </el-header>\n      <el-main class=\"main\">Main</el-main>\n    </el-container>\n  </el-container>\n</template>\n<script setup lang=\"ts\">\nimport MyHeader from './header/index.vue'\nimport Sidebar from './sidebar/index.vue'\n</script>\n<style lang=\"scss\">\n.layout {\n  height: 100%;\n  .asside {\n    color: #fff;\n    background-color: rgb(48, 65, 86);\n  }\n  .header {\n    color: #fff;\n    background-color: #212938;\n  }\n  .main {\n    background-color: #fff;\n  }\n}\n</style>\n\n```\n到此，整体布局做好了，大家可以根据自己需求调整，也可以调整为上下布局，下面讲解如何制作侧边菜单导航及面包屑。\n\n","slug":"0-1搭建Vue3-Vite3模板工程（3）-布局","published":1,"updated":"2023-12-20T06:57:18.916Z","_id":"clqdf8hsv000744t1a1dph67y","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p><a href=\"https://juejin.cn/post/7127204457925836813/\">0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>\n<p><a href=\"https://juejin.cn/post/7128214905953452039\">0-1搭建Vue3+Vite3模板工程（2）-安装依赖</a></p>\n<p>接上篇。</p>\n<p>通常后管平台多以左右布局或上下布局为主，本篇讲解如何进行整体布局，以左右布局为例。</p>\n<ol>\n<li>在index.html中加入以下样式：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html,body,#app&#123;</span><br><span class=\"line\">  padding: 0px;</span><br><span class=\"line\">  margin: 0px;</span><br><span class=\"line\">  height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>将main.ts引入的额外样式注释掉</li>\n</ol>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1ab2acdcdb4492879dd5d0ab0c51b3~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>在src下新建layout文件夹，在layout下新建index.vue文件，在此文件中写整体布局。</li>\n</ol>\n<p>index.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><br><span class=\"line\">    &lt;el-aside <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;asside&quot;</span> width=<span class=\"string\">&quot;200px&quot;</span>&gt;Aside&lt;/el-aside&gt;</span><br><span class=\"line\">    &lt;el-container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><br><span class=\"line\">      &lt;el-header <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;header&quot;</span>&gt;Header&lt;/el-header&gt;</span><br><span class=\"line\">      &lt;el-main <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;main&quot;</span>&gt;Main&lt;/el-main&gt;</span><br><span class=\"line\">    &lt;/el-container&gt;</span><br><span class=\"line\">  &lt;/el-container&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><br><span class=\"line\">.layout &#123;</span><br><span class=\"line\">  height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  .asside &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: rgb(<span class=\"number\">48</span>, <span class=\"number\">65</span>, <span class=\"number\">86</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: #212938;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .main &#123;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改router配置：<br> router/index.ts文件修改成下面：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/layout/index.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: <span class=\"built_in\">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">    component: Layout</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">  history: createWebHistory(),</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n启动工程可以看到首页如下：</li>\n</ol>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0a42f12357c4bc49af076e7c1f9efad~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>抽离头部和左侧菜单导航组件</li>\n</ol>\n<p>在layout下新建header和sidebar文件夹，分别新建index.vue文件</p>\n<p>header/index.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;header&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&#x27;ts&#x27;</span> setup&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&#x27;scss&#x27;</span> scoped&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>sidebar/index.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;sidebar&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&#x27;ts&#x27;</span> setup&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&#x27;scss&#x27;</span> scoped&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改layout/index.vue, 引入header和sidebar两个组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><br><span class=\"line\">    &lt;el-aside <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;asside&quot;</span> width=<span class=\"string\">&quot;200px&quot;</span>&gt;</span><br><span class=\"line\">      &lt;sidebar&gt;&lt;/sidebar&gt;</span><br><span class=\"line\">    &lt;/el-aside&gt;</span><br><span class=\"line\">    &lt;el-container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><br><span class=\"line\">      &lt;el-header <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><br><span class=\"line\">        &lt;my-header&gt;&lt;/my-header&gt;</span><br><span class=\"line\">      &lt;/el-header&gt;</span><br><span class=\"line\">      &lt;el-main <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;main&quot;</span>&gt;Main&lt;/el-main&gt;</span><br><span class=\"line\">    &lt;/el-container&gt;</span><br><span class=\"line\">  &lt;/el-container&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> MyHeader <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./header/index.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Sidebar <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./sidebar/index.vue&#x27;</span></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><br><span class=\"line\">.layout &#123;</span><br><span class=\"line\">  height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  .asside &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: rgb(<span class=\"number\">48</span>, <span class=\"number\">65</span>, <span class=\"number\">86</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: #212938;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .main &#123;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到此，整体布局做好了，大家可以根据自己需求调整，也可以调整为上下布局，下面讲解如何制作侧边菜单导航及面包屑。</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p><a href=\"https://juejin.cn/post/7127204457925836813/\">0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>\n<p><a href=\"https://juejin.cn/post/7128214905953452039\">0-1搭建Vue3+Vite3模板工程（2）-安装依赖</a></p>\n<p>接上篇。</p>\n<p>通常后管平台多以左右布局或上下布局为主，本篇讲解如何进行整体布局，以左右布局为例。</p>\n<ol>\n<li>在index.html中加入以下样式：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html,body,#app&#123;</span><br><span class=\"line\">  padding: 0px;</span><br><span class=\"line\">  margin: 0px;</span><br><span class=\"line\">  height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>将main.ts引入的额外样式注释掉</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1ab2acdcdb4492879dd5d0ab0c51b3~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>在src下新建layout文件夹，在layout下新建index.vue文件，在此文件中写整体布局。</li>\n</ol>\n<p>index.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><br><span class=\"line\">    &lt;el-aside <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;asside&quot;</span> width=<span class=\"string\">&quot;200px&quot;</span>&gt;Aside&lt;/el-aside&gt;</span><br><span class=\"line\">    &lt;el-container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><br><span class=\"line\">      &lt;el-header <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;header&quot;</span>&gt;Header&lt;/el-header&gt;</span><br><span class=\"line\">      &lt;el-main <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;main&quot;</span>&gt;Main&lt;/el-main&gt;</span><br><span class=\"line\">    &lt;/el-container&gt;</span><br><span class=\"line\">  &lt;/el-container&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><br><span class=\"line\">.layout &#123;</span><br><span class=\"line\">  height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  .asside &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: rgb(<span class=\"number\">48</span>, <span class=\"number\">65</span>, <span class=\"number\">86</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: #212938;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .main &#123;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改router配置：<br> router/index.ts文件修改成下面：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/layout/index.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: <span class=\"built_in\">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">    component: Layout</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">  history: createWebHistory(),</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n启动工程可以看到首页如下：</li>\n</ol>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0a42f12357c4bc49af076e7c1f9efad~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>抽离头部和左侧菜单导航组件</li>\n</ol>\n<p>在layout下新建header和sidebar文件夹，分别新建index.vue文件</p>\n<p>header/index.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;header&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&#x27;ts&#x27;</span> setup&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&#x27;scss&#x27;</span> scoped&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>sidebar/index.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;sidebar&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&#x27;ts&#x27;</span> setup&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&#x27;scss&#x27;</span> scoped&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改layout/index.vue, 引入header和sidebar两个组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><br><span class=\"line\">    &lt;el-aside <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;asside&quot;</span> width=<span class=\"string\">&quot;200px&quot;</span>&gt;</span><br><span class=\"line\">      &lt;sidebar&gt;&lt;/sidebar&gt;</span><br><span class=\"line\">    &lt;/el-aside&gt;</span><br><span class=\"line\">    &lt;el-container <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;layout&quot;</span>&gt;</span><br><span class=\"line\">      &lt;el-header <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><br><span class=\"line\">        &lt;my-header&gt;&lt;/my-header&gt;</span><br><span class=\"line\">      &lt;/el-header&gt;</span><br><span class=\"line\">      &lt;el-main <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;main&quot;</span>&gt;Main&lt;/el-main&gt;</span><br><span class=\"line\">    &lt;/el-container&gt;</span><br><span class=\"line\">  &lt;/el-container&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> MyHeader <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./header/index.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Sidebar <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./sidebar/index.vue&#x27;</span></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><br><span class=\"line\">.layout &#123;</span><br><span class=\"line\">  height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  .asside &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: rgb(<span class=\"number\">48</span>, <span class=\"number\">65</span>, <span class=\"number\">86</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: #212938;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .main &#123;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到此，整体布局做好了，大家可以根据自己需求调整，也可以调整为上下布局，下面讲解如何制作侧边菜单导航及面包屑。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1ab2acdcdb4492879dd5d0ab0c51b3~tplv-k3u1fbpfcp-watermark.image","popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"0-1搭建Vue3+Vite3模板工程（3）-布局","path":"posts/29511/","eyeCatchImage":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1ab2acdcdb4492879dd5d0ab0c51b3~tplv-k3u1fbpfcp-watermark.image","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-11T07:56:23.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-11T07:56:23.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2788},{"title":"0-1搭建Vue3+Vite3模板工程（4）-左侧菜单导航","copyright":true,"comments":1,"abbrlink":4133,"date":"2022-08-16T09:04:37.000Z","_content":"\n[从0-1搭建Vue3+Vite3模板工程（1）-创建工程](https://juejin.cn/post/7127204457925836813)\n\n[从0-1搭建Vue3+Vite3模板工程（2）-安装依赖](https://juejin.cn/post/7128214905953452039/)\n\n[0-1搭建Vue3+Vite3模板工程（3）-布局](https://juejin.cn/post/7129790915271065637)\n\n左侧菜单导航封装，包含多级菜单，可以配置隐藏某一个菜单。\n\n1. 先配置好路由，根据自己的需求，建立好相应的目录；\n\n我的目录如下：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a4fd8949a2e4e66a1f71e7dce2c8d5a~tplv-k3u1fbpfcp-watermark.image?)\n\n所以我的路由配置如下（别忘了提前在scr/views/下建立相应的页面级组件，在路由中需要引用）：\nsrc\\router\\index.ts：\n\n```js\nimport { createRouter, createWebHistory, RouteRecordRaw } from \"vue-router\"\nimport Layout from \"@/layout/Index.vue\"\nexport const routes: Array<RouteRecordRaw> = [\n  {\n    path: \"/\",\n    component: Layout,\n    redirect: \"/home\",\n    meta: {\n      title: \"首页\",\n      icon: \"House\",\n      hidden: false,\n      roles: [],\n    },\n    children: [\n      {\n        path: \"/home\",\n        component: () => import(\"@/views/home/index.vue\"),\n        name: \"home\",\n        meta: {\n          title: \"首页\",\n          icon: \"House\",\n          hidden: true,\n          roles: [],\n        },\n      },\n    ],\n  },\n  \n  {\n    path: \"/system\",\n    component: Layout,\n    name: \"system\",\n    meta: {\n      title: \"系统管理\",\n      icon: \"Medal\",\n      hidden: false,\n      roles: [],\n    },\n    children: [\n      {\n        path: \"/system/department\",\n        component: () => import(\"@/views/system/department/index.vue\"),\n        name: \"department\",\n        meta: {\n          title: \"机构管理\",\n          icon: \"MostlyCloudy\",\n          hidden: false,\n          roles: [],\n        },\n      },\n      {\n        path: \"/userList\",\n        component: () => import(\"@/views/system/user/index.vue\"),\n        name: \"userList\",\n        meta: {\n          title: \"用户管理\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:user\"],\n          hidden: false,\n        },\n      },\n      {\n        path: \"/roleList\",\n        component: () => import(\"@/views/system/role/index.vue\"),\n        name: \"roleList\",\n        meta: {\n          title: \"角色管理\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:role\"],\n          hidden: false,\n        },\n      },\n      {\n        path: \"/menuList\",\n        component: () => import(\"@/views/system/menu/index.vue\"),\n        name: \"menuList\",\n        meta: {\n          title: \"权限管理\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:menu\"],\n          hidden: false,\n        },\n      },\n    ],\n  },\n  {\n    path: \"/goods\",\n    component: Layout,\n    name: \"goods\",\n    meta: {\n      title: \"商品管理\",\n      icon: \"MostlyCloudy\",\n      roles: [\"sys:goods\"],\n      hidden: false,\n    },\n    children: [\n      {\n        path: \"/goodCategory\",\n        component: () =>\n          import(\"@/views/goods/goodsCategory/index.vue\"),\n        name: \"goodCategory\",\n        meta: {\n          title: \"商品分类\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:goodsCategory\"],\n          hidden: false,\n        },\n      },\n    ],\n  },\n  {\n    path: \"/systenConfig\",\n    component: Layout,\n    name: \"systenConfig\",\n    meta: {\n      title: \"系统工具\",\n      icon: \"MostlyCloudy\",\n      roles: [\"sys:systenConfig\"],\n      hidden: false,\n    },\n    children: [\n      {\n        path: \"/document\",\n        component: () => import(\"@/views/system/config/index.vue\"),\n        name: \"http://42.193.158.170:8089/swagger-ui/index.html\",\n        meta: {\n          title: \"接口文档\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:document\"],\n          hidden: false,\n        },\n      },\n    ],\n  },\n]\n//创建\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\nexport default router\n\n```\n2. 封装sidebar菜单导航组件：\n\nsrc\\layout\\sidebar\\index.vue\n\n```js\n<template>\n  <el-menu\n    default-active=\"2\"\n    class=\"el-menu-vertical-demo\"\n    :collapse=\"isCollapse\"\n    background-color=\"#304156\"\n    router\n  >\n    <menu-item :menuList=\"state.menus\"></menu-item>\n  </el-menu>\n</template>\n<script lang=\"ts\" setup>\nimport MenuItem from \"./menu-item.vue\"\nimport { ref, reactive, onMounted } from \"vue\"\nimport { routes } from '@/router/index'\n\nconst  state =reactive({\n  menus : [],\n})\nonMounted(() => {\n  state.menus = handleRoutes(routes)\n  console.log('menus', state.menus)\n})\n\nconst setObjProperties = (target, source) => {\n  Object.entries(source).forEach(([key, value]) => {\n    if (value || typeof value !== 'undefined') {\n      target[key] = value;\n    }\n  });\n}\n\nconst handleRoutes = (routes) => {\n  // 递归处理路由\n  const routers = [];\n  for (let i = 0; i < routes.length; i++) {\n    const {\n     redirect, path,\n      meta, children = []\n    } = routes[i];\n    const { hidden } = meta\n    if (hidden) break; // 隐藏的菜单\n    // copy route\n    const metaCopy = { ...meta };\n    const router = { path, meta: metaCopy };\n    // 复制属性\n    setObjProperties(router, {\n      redirect\n    });\n    // todo 权限判断\n    \n    // 子菜单\n    const subChildren = children.filter((item) => !item.hidden);\n    if (subChildren && subChildren.length) {\n      if (!meta.showByOneChildren && subChildren.length === 1) {\n        metaCopy.type = 'menu';\n      } else {\n        metaCopy.type = 'submenu';\n      }\n      router.children = handleRoutes(subChildren);\n    } else {\n      metaCopy.type = 'menu';\n    }\n    routers.push(router);\n  }\n  return routers;\n}\n\n//控制菜单展开和关闭\nconst isCollapse = ref(false)\n</script>\n<style scoped>\n.el-menu-vertical-demo:not(.el-menu--collapse) {\n  width: 100%;\n  min-height: 400px;\n}\n.el-menu {\n  border-right: none;\n}\nul{\n  margin: 0;\n}\n::v-deep .el-sub-menu .el-sub-menu__title {\n  color: #f4f4f5 !important;\n}\n/* .el-submenu .is-active .el-submenu__title {\nborder-bottom-color: #1890ff;\n} */\n::v-deep .el-menu .el-menu-item {\n  color: #bfcbd9;\n}\n/* 菜单点中文字的颜色 */\n::v-deep .el-menu-item.is-active {\n  color: #409eff !important;\n}\n/* 当前打开菜单的所有子菜单颜色 */\n::v-deep .is-opened .el-menu-item {\n  background-color: #1f2d3d !important;\n}\n/* 鼠标移动菜单的颜色 */\n::v-deep .el-menu-item:hover {\n  background-color: #001528 !important;\n}\n</style>\n\n```\nsrc\\layout\\sidebar\\menu-item.vue：\n\n```js\n<template>\n  <template v-for=\"menu in menuList\" :key=\"menu.path\">\n    <el-sub-menu v-if=\"menu.children && menu.children.length > 0\" :index=\"menu.path\">\n      <template #title>\n        <!-- 动态组件的使用方式 -->\n        <component class=\"icons\" :is=\"menu.meta.icon\" />\n        <!-- 方式二 -->\n        <!-- <Icon class=\"icons\" :icon=\"menu.mata.icon\"></Icon> -->\n        <span>{{ menu.meta.title }}</span>\n      </template>\n      <menu-item :menuList=\"menu.children\"></menu-item>\n    </el-sub-menu>\n\n    <el-menu-item style=\"color:#f4f4f5\" v-else :index=\"menu.path\">\n      <i v-if=\"menu.meta.icon && menu.meta.icon.includes('el-icon')\" :class=\"menu.meta.icon\"></i>\n      <component class=\"icons\" v-else :is=\"menu.meta.icon\" />\n      <template #title>{{ menu.meta.title }}</template>\n    </el-menu-item>\n  </template>\n</template>\n\n<script setup lang=\"ts\">\n\ndefineProps(['menuList'])\n</script>\n\n<style scoped>\n.icons{\n  width: 24px;\n  height: 18px;\n}\n</style>\n```\n\n3.如果菜单前需要icon, 则需要安装element-plus的icon;\n\n在工程的根目录执行：\n```js\nnpm install @element-plus/icons-vue\n```\n\n根据element-plus官方文档：https://element-plus.gitee.io/zh-CN/component/icon.html#%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87\n\n在main.ts中添加：\n\n```js\n// main.ts\n\n// 如果您正在使用CDN引入，请删除下面一行。\nimport * as ElementPlusIconsVue from '@element-plus/icons-vue'\n\nconst app = createApp(App)\nfor (const [key, component] of Object.entries(ElementPlusIconsVue)) {\n  app.component(key, component)\n}\n```\n\n重新启动工程，大功告成！\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f12c6fcb21374dccaf585f55584737c1~tplv-k3u1fbpfcp-watermark.image?)\n\n\n","source":"_posts/0-1搭建Vue3-vite模板工程（4）.md","raw":"---\ntitle: 0-1搭建Vue3+Vite3模板工程（4）-左侧菜单导航\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 4133\ndate: 2022-08-16 17:04:37\n---\n\n[从0-1搭建Vue3+Vite3模板工程（1）-创建工程](https://juejin.cn/post/7127204457925836813)\n\n[从0-1搭建Vue3+Vite3模板工程（2）-安装依赖](https://juejin.cn/post/7128214905953452039/)\n\n[0-1搭建Vue3+Vite3模板工程（3）-布局](https://juejin.cn/post/7129790915271065637)\n\n左侧菜单导航封装，包含多级菜单，可以配置隐藏某一个菜单。\n\n1. 先配置好路由，根据自己的需求，建立好相应的目录；\n\n我的目录如下：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a4fd8949a2e4e66a1f71e7dce2c8d5a~tplv-k3u1fbpfcp-watermark.image?)\n\n所以我的路由配置如下（别忘了提前在scr/views/下建立相应的页面级组件，在路由中需要引用）：\nsrc\\router\\index.ts：\n\n```js\nimport { createRouter, createWebHistory, RouteRecordRaw } from \"vue-router\"\nimport Layout from \"@/layout/Index.vue\"\nexport const routes: Array<RouteRecordRaw> = [\n  {\n    path: \"/\",\n    component: Layout,\n    redirect: \"/home\",\n    meta: {\n      title: \"首页\",\n      icon: \"House\",\n      hidden: false,\n      roles: [],\n    },\n    children: [\n      {\n        path: \"/home\",\n        component: () => import(\"@/views/home/index.vue\"),\n        name: \"home\",\n        meta: {\n          title: \"首页\",\n          icon: \"House\",\n          hidden: true,\n          roles: [],\n        },\n      },\n    ],\n  },\n  \n  {\n    path: \"/system\",\n    component: Layout,\n    name: \"system\",\n    meta: {\n      title: \"系统管理\",\n      icon: \"Medal\",\n      hidden: false,\n      roles: [],\n    },\n    children: [\n      {\n        path: \"/system/department\",\n        component: () => import(\"@/views/system/department/index.vue\"),\n        name: \"department\",\n        meta: {\n          title: \"机构管理\",\n          icon: \"MostlyCloudy\",\n          hidden: false,\n          roles: [],\n        },\n      },\n      {\n        path: \"/userList\",\n        component: () => import(\"@/views/system/user/index.vue\"),\n        name: \"userList\",\n        meta: {\n          title: \"用户管理\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:user\"],\n          hidden: false,\n        },\n      },\n      {\n        path: \"/roleList\",\n        component: () => import(\"@/views/system/role/index.vue\"),\n        name: \"roleList\",\n        meta: {\n          title: \"角色管理\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:role\"],\n          hidden: false,\n        },\n      },\n      {\n        path: \"/menuList\",\n        component: () => import(\"@/views/system/menu/index.vue\"),\n        name: \"menuList\",\n        meta: {\n          title: \"权限管理\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:menu\"],\n          hidden: false,\n        },\n      },\n    ],\n  },\n  {\n    path: \"/goods\",\n    component: Layout,\n    name: \"goods\",\n    meta: {\n      title: \"商品管理\",\n      icon: \"MostlyCloudy\",\n      roles: [\"sys:goods\"],\n      hidden: false,\n    },\n    children: [\n      {\n        path: \"/goodCategory\",\n        component: () =>\n          import(\"@/views/goods/goodsCategory/index.vue\"),\n        name: \"goodCategory\",\n        meta: {\n          title: \"商品分类\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:goodsCategory\"],\n          hidden: false,\n        },\n      },\n    ],\n  },\n  {\n    path: \"/systenConfig\",\n    component: Layout,\n    name: \"systenConfig\",\n    meta: {\n      title: \"系统工具\",\n      icon: \"MostlyCloudy\",\n      roles: [\"sys:systenConfig\"],\n      hidden: false,\n    },\n    children: [\n      {\n        path: \"/document\",\n        component: () => import(\"@/views/system/config/index.vue\"),\n        name: \"http://42.193.158.170:8089/swagger-ui/index.html\",\n        meta: {\n          title: \"接口文档\",\n          icon: \"MostlyCloudy\",\n          roles: [\"sys:document\"],\n          hidden: false,\n        },\n      },\n    ],\n  },\n]\n//创建\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n})\nexport default router\n\n```\n2. 封装sidebar菜单导航组件：\n\nsrc\\layout\\sidebar\\index.vue\n\n```js\n<template>\n  <el-menu\n    default-active=\"2\"\n    class=\"el-menu-vertical-demo\"\n    :collapse=\"isCollapse\"\n    background-color=\"#304156\"\n    router\n  >\n    <menu-item :menuList=\"state.menus\"></menu-item>\n  </el-menu>\n</template>\n<script lang=\"ts\" setup>\nimport MenuItem from \"./menu-item.vue\"\nimport { ref, reactive, onMounted } from \"vue\"\nimport { routes } from '@/router/index'\n\nconst  state =reactive({\n  menus : [],\n})\nonMounted(() => {\n  state.menus = handleRoutes(routes)\n  console.log('menus', state.menus)\n})\n\nconst setObjProperties = (target, source) => {\n  Object.entries(source).forEach(([key, value]) => {\n    if (value || typeof value !== 'undefined') {\n      target[key] = value;\n    }\n  });\n}\n\nconst handleRoutes = (routes) => {\n  // 递归处理路由\n  const routers = [];\n  for (let i = 0; i < routes.length; i++) {\n    const {\n     redirect, path,\n      meta, children = []\n    } = routes[i];\n    const { hidden } = meta\n    if (hidden) break; // 隐藏的菜单\n    // copy route\n    const metaCopy = { ...meta };\n    const router = { path, meta: metaCopy };\n    // 复制属性\n    setObjProperties(router, {\n      redirect\n    });\n    // todo 权限判断\n    \n    // 子菜单\n    const subChildren = children.filter((item) => !item.hidden);\n    if (subChildren && subChildren.length) {\n      if (!meta.showByOneChildren && subChildren.length === 1) {\n        metaCopy.type = 'menu';\n      } else {\n        metaCopy.type = 'submenu';\n      }\n      router.children = handleRoutes(subChildren);\n    } else {\n      metaCopy.type = 'menu';\n    }\n    routers.push(router);\n  }\n  return routers;\n}\n\n//控制菜单展开和关闭\nconst isCollapse = ref(false)\n</script>\n<style scoped>\n.el-menu-vertical-demo:not(.el-menu--collapse) {\n  width: 100%;\n  min-height: 400px;\n}\n.el-menu {\n  border-right: none;\n}\nul{\n  margin: 0;\n}\n::v-deep .el-sub-menu .el-sub-menu__title {\n  color: #f4f4f5 !important;\n}\n/* .el-submenu .is-active .el-submenu__title {\nborder-bottom-color: #1890ff;\n} */\n::v-deep .el-menu .el-menu-item {\n  color: #bfcbd9;\n}\n/* 菜单点中文字的颜色 */\n::v-deep .el-menu-item.is-active {\n  color: #409eff !important;\n}\n/* 当前打开菜单的所有子菜单颜色 */\n::v-deep .is-opened .el-menu-item {\n  background-color: #1f2d3d !important;\n}\n/* 鼠标移动菜单的颜色 */\n::v-deep .el-menu-item:hover {\n  background-color: #001528 !important;\n}\n</style>\n\n```\nsrc\\layout\\sidebar\\menu-item.vue：\n\n```js\n<template>\n  <template v-for=\"menu in menuList\" :key=\"menu.path\">\n    <el-sub-menu v-if=\"menu.children && menu.children.length > 0\" :index=\"menu.path\">\n      <template #title>\n        <!-- 动态组件的使用方式 -->\n        <component class=\"icons\" :is=\"menu.meta.icon\" />\n        <!-- 方式二 -->\n        <!-- <Icon class=\"icons\" :icon=\"menu.mata.icon\"></Icon> -->\n        <span>{{ menu.meta.title }}</span>\n      </template>\n      <menu-item :menuList=\"menu.children\"></menu-item>\n    </el-sub-menu>\n\n    <el-menu-item style=\"color:#f4f4f5\" v-else :index=\"menu.path\">\n      <i v-if=\"menu.meta.icon && menu.meta.icon.includes('el-icon')\" :class=\"menu.meta.icon\"></i>\n      <component class=\"icons\" v-else :is=\"menu.meta.icon\" />\n      <template #title>{{ menu.meta.title }}</template>\n    </el-menu-item>\n  </template>\n</template>\n\n<script setup lang=\"ts\">\n\ndefineProps(['menuList'])\n</script>\n\n<style scoped>\n.icons{\n  width: 24px;\n  height: 18px;\n}\n</style>\n```\n\n3.如果菜单前需要icon, 则需要安装element-plus的icon;\n\n在工程的根目录执行：\n```js\nnpm install @element-plus/icons-vue\n```\n\n根据element-plus官方文档：https://element-plus.gitee.io/zh-CN/component/icon.html#%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87\n\n在main.ts中添加：\n\n```js\n// main.ts\n\n// 如果您正在使用CDN引入，请删除下面一行。\nimport * as ElementPlusIconsVue from '@element-plus/icons-vue'\n\nconst app = createApp(App)\nfor (const [key, component] of Object.entries(ElementPlusIconsVue)) {\n  app.component(key, component)\n}\n```\n\n重新启动工程，大功告成！\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f12c6fcb21374dccaf585f55584737c1~tplv-k3u1fbpfcp-watermark.image?)\n\n\n","slug":"0-1搭建Vue3-vite模板工程（4）","published":1,"updated":"2023-12-20T06:57:18.935Z","_id":"clqdf8hsw000844t1bjfjg5j9","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p><a href=\"https://juejin.cn/post/7127204457925836813\">从0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>\n<p><a href=\"https://juejin.cn/post/7128214905953452039/\">从0-1搭建Vue3+Vite3模板工程（2）-安装依赖</a></p>\n<p><a href=\"https://juejin.cn/post/7129790915271065637\">0-1搭建Vue3+Vite3模板工程（3）-布局</a></p>\n<p>左侧菜单导航封装，包含多级菜单，可以配置隐藏某一个菜单。</p>\n<ol>\n<li>先配置好路由，根据自己的需求，建立好相应的目录；</li>\n</ol>\n<p>我的目录如下：</p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a4fd8949a2e4e66a1f71e7dce2c8d5a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>所以我的路由配置如下（别忘了提前在scr/views/下建立相应的页面级组件，在路由中需要引用）：<br>src\\router\\index.ts：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/layout/Index.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: <span class=\"built_in\">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    component: Layout,</span><br><span class=\"line\">    redirect: <span class=\"string\">&quot;/home&quot;</span>,</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&quot;首页&quot;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&quot;House&quot;</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      roles: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/home&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/home/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;home&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;首页&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;House&quot;</span>,</span><br><span class=\"line\">          hidden: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          roles: [],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/system&quot;</span>,</span><br><span class=\"line\">    component: Layout,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;system&quot;</span>,</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&quot;系统管理&quot;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&quot;Medal&quot;</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      roles: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/system/department&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/department/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;department&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;机构管理&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          roles: [],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/userList&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/user/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;userList&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;用户管理&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:user&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/roleList&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/role/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;roleList&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;角色管理&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:role&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/menuList&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/menu/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;menuList&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;权限管理&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:menu&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/goods&quot;</span>,</span><br><span class=\"line\">    component: Layout,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;goods&quot;</span>,</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&quot;商品管理&quot;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">      roles: [<span class=\"string\">&quot;sys:goods&quot;</span>],</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/goodCategory&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">          <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/goods/goodsCategory/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;goodCategory&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;商品分类&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:goodsCategory&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/systenConfig&quot;</span>,</span><br><span class=\"line\">    component: Layout,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;systenConfig&quot;</span>,</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&quot;系统工具&quot;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">      roles: [<span class=\"string\">&quot;sys:systenConfig&quot;</span>],</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/document&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/config/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;http://42.193.158.170:8089/swagger-ui/index.html&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;接口文档&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:document&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">//创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">  history: createWebHistory(),</span><br><span class=\"line\">  routes,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>封装sidebar菜单导航组件：</li>\n</ol>\n<p>src\\layout\\sidebar\\index.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-menu</span><br><span class=\"line\">    <span class=\"keyword\">default</span>-active=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;el-menu-vertical-demo&quot;</span></span><br><span class=\"line\">    :collapse=<span class=\"string\">&quot;isCollapse&quot;</span></span><br><span class=\"line\">    background-color=<span class=\"string\">&quot;#304156&quot;</span></span><br><span class=\"line\">    router</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;menu-item :menuList=<span class=\"string\">&quot;state.menus&quot;</span>&gt;&lt;/menu-item&gt;</span><br><span class=\"line\">  &lt;/el-menu&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span> setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> MenuItem <span class=\"keyword\">from</span> <span class=\"string\">&quot;./menu-item.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/router/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  state =reactive(&#123;</span><br><span class=\"line\">  menus : [],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">onMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  state.menus = handleRoutes(routes)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;menus&#x27;</span>, state.menus)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> setObjProperties = <span class=\"function\">(<span class=\"params\">target, source</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.entries(source).forEach(<span class=\"function\">(<span class=\"params\">[key, value]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value || <span class=\"keyword\">typeof</span> value !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      target[key] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handleRoutes = <span class=\"function\">(<span class=\"params\">routes</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 递归处理路由</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> routers = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; routes.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">     redirect, path,</span><br><span class=\"line\">      meta, children = []</span><br><span class=\"line\">    &#125; = routes[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; hidden &#125; = meta</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hidden) <span class=\"keyword\">break</span>; <span class=\"comment\">// 隐藏的菜单</span></span><br><span class=\"line\">    <span class=\"comment\">// copy route</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> metaCopy = &#123; ...meta &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = &#123; path, <span class=\"attr\">meta</span>: metaCopy &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 复制属性</span></span><br><span class=\"line\">    setObjProperties(router, &#123;</span><br><span class=\"line\">      redirect</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// todo 权限判断</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 子菜单</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subChildren = children.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> !item.hidden);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (subChildren &amp;&amp; subChildren.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!meta.showByOneChildren &amp;&amp; subChildren.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        metaCopy.type = <span class=\"string\">&#x27;menu&#x27;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        metaCopy.type = <span class=\"string\">&#x27;submenu&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      router.children = handleRoutes(subChildren);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      metaCopy.type = <span class=\"string\">&#x27;menu&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    routers.push(router);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> routers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制菜单展开和关闭</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isCollapse = ref(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.el-menu-vertical-demo:<span class=\"function\"><span class=\"title\">not</span>(<span class=\"params\">.el-menu--collapse</span>)</span> &#123;</span><br><span class=\"line\">  width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  min-height: 400px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.el-menu &#123;</span><br><span class=\"line\">  border-right: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul&#123;</span><br><span class=\"line\">  margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">::v-deep .el-sub-menu .el-sub-menu__title &#123;</span><br><span class=\"line\">  color: #f4f4f5 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* .el-submenu .is-active .el-submenu__title &#123;</span></span><br><span class=\"line\"><span class=\"comment\">border-bottom-color: #1890ff;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; */</span></span><br><span class=\"line\">::v-deep .el-menu .el-menu-item &#123;</span><br><span class=\"line\">  color: #bfcbd9;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 菜单点中文字的颜色 */</span></span><br><span class=\"line\">::v-deep .el-menu-item.is-active &#123;</span><br><span class=\"line\">  color: #409eff !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 当前打开菜单的所有子菜单颜色 */</span></span><br><span class=\"line\">::v-deep .is-opened .el-menu-item &#123;</span><br><span class=\"line\">  background-color: #1f2d3d !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 鼠标移动菜单的颜色 */</span></span><br><span class=\"line\">::v-deep .el-menu-item:hover &#123;</span><br><span class=\"line\">  background-color: #001528 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>src\\layout\\sidebar\\menu-item.vue：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;template v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;menu in menuList&quot;</span> :key=<span class=\"string\">&quot;menu.path&quot;</span>&gt;</span><br><span class=\"line\">    &lt;el-sub-menu v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;menu.children &amp;&amp; menu.children.length &gt; 0&quot;</span> :index=<span class=\"string\">&quot;menu.path&quot;</span>&gt;</span><br><span class=\"line\">      &lt;template #title&gt;</span><br><span class=\"line\">        &lt;!-- 动态组件的使用方式 --&gt;</span><br><span class=\"line\">        &lt;component <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;icons&quot;</span> :is=<span class=\"string\">&quot;menu.meta.icon&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;!-- 方式二 --&gt;</span><br><span class=\"line\">        &lt;!-- <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icons&quot;</span> <span class=\"attr\">:icon</span>=<span class=\"string\">&quot;menu.mata.icon&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Icon</span>&gt;</span></span> --&gt;</span><br><span class=\"line\">        &lt;span&gt;&#123;&#123; menu.meta.title &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">      &lt;menu-item :menuList=<span class=\"string\">&quot;menu.children&quot;</span>&gt;&lt;/menu-item&gt;</span><br><span class=\"line\">    &lt;/el-sub-menu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;el-menu-item style=<span class=\"string\">&quot;color:#f4f4f5&quot;</span> v-<span class=\"keyword\">else</span> :index=<span class=\"string\">&quot;menu.path&quot;</span>&gt;</span><br><span class=\"line\">      &lt;i v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;menu.meta.icon &amp;&amp; menu.meta.icon.includes(&#x27;el-icon&#x27;)&quot;</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;menu.meta.icon&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">      &lt;component <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;icons&quot;</span> v-<span class=\"keyword\">else</span> :is=<span class=\"string\">&quot;menu.meta.icon&quot;</span> /&gt;</span><br><span class=\"line\">      &lt;template #title&gt;&#123;&#123; menu.meta.title &#125;&#125;&lt;/template&gt;</span><br><span class=\"line\">    &lt;/el-menu-item&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">defineProps([<span class=\"string\">&#x27;menuList&#x27;</span>])</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.icons&#123;</span><br><span class=\"line\">  width: 24px;</span><br><span class=\"line\">  height: 18px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3.如果菜单前需要icon, 则需要安装element-plus的icon;</p>\n<p>在工程的根目录执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure>\n\n<p>根据element-plus官方文档：<a href=\"https://element-plus.gitee.io/zh-CN/component/icon.html#%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87\">https://element-plus.gitee.io/zh-CN/component/icon.html#%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87</a></p>\n<p>在main.ts中添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果您正在使用CDN引入，请删除下面一行。</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> ElementPlusIconsVue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, component] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(ElementPlusIconsVue)) &#123;</span><br><span class=\"line\">  app.component(key, component)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新启动工程，大功告成！</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f12c6fcb21374dccaf585f55584737c1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p><a href=\"https://juejin.cn/post/7127204457925836813\">从0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>\n<p><a href=\"https://juejin.cn/post/7128214905953452039/\">从0-1搭建Vue3+Vite3模板工程（2）-安装依赖</a></p>\n<p><a href=\"https://juejin.cn/post/7129790915271065637\">0-1搭建Vue3+Vite3模板工程（3）-布局</a></p>\n<p>左侧菜单导航封装，包含多级菜单，可以配置隐藏某一个菜单。</p>\n<ol>\n<li>先配置好路由，根据自己的需求，建立好相应的目录；</li>\n</ol>\n<p>我的目录如下：</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a4fd8949a2e4e66a1f71e7dce2c8d5a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>所以我的路由配置如下（别忘了提前在scr/views/下建立相应的页面级组件，在路由中需要引用）：<br>src\\router\\index.ts：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Layout <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/layout/Index.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes: <span class=\"built_in\">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    component: Layout,</span><br><span class=\"line\">    redirect: <span class=\"string\">&quot;/home&quot;</span>,</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&quot;首页&quot;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&quot;House&quot;</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      roles: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/home&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/home/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;home&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;首页&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;House&quot;</span>,</span><br><span class=\"line\">          hidden: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          roles: [],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/system&quot;</span>,</span><br><span class=\"line\">    component: Layout,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;system&quot;</span>,</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&quot;系统管理&quot;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&quot;Medal&quot;</span>,</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      roles: [],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/system/department&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/department/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;department&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;机构管理&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          roles: [],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/userList&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/user/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;userList&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;用户管理&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:user&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/roleList&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/role/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;roleList&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;角色管理&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:role&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/menuList&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/menu/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;menuList&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;权限管理&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:menu&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/goods&quot;</span>,</span><br><span class=\"line\">    component: Layout,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;goods&quot;</span>,</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&quot;商品管理&quot;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">      roles: [<span class=\"string\">&quot;sys:goods&quot;</span>],</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/goodCategory&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">          <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/goods/goodsCategory/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;goodCategory&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;商品分类&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:goodsCategory&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/systenConfig&quot;</span>,</span><br><span class=\"line\">    component: Layout,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;systenConfig&quot;</span>,</span><br><span class=\"line\">    meta: &#123;</span><br><span class=\"line\">      title: <span class=\"string\">&quot;系统工具&quot;</span>,</span><br><span class=\"line\">      icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">      roles: [<span class=\"string\">&quot;sys:systenConfig&quot;</span>],</span><br><span class=\"line\">      hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">&quot;/document&quot;</span>,</span><br><span class=\"line\">        component: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/views/system/config/index.vue&quot;</span>),</span><br><span class=\"line\">        name: <span class=\"string\">&quot;http://42.193.158.170:8089/swagger-ui/index.html&quot;</span>,</span><br><span class=\"line\">        meta: &#123;</span><br><span class=\"line\">          title: <span class=\"string\">&quot;接口文档&quot;</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">&quot;MostlyCloudy&quot;</span>,</span><br><span class=\"line\">          roles: [<span class=\"string\">&quot;sys:document&quot;</span>],</span><br><span class=\"line\">          hidden: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">//创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = createRouter(&#123;</span><br><span class=\"line\">  history: createWebHistory(),</span><br><span class=\"line\">  routes,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>封装sidebar菜单导航组件：</li>\n</ol>\n<p>src\\layout\\sidebar\\index.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-menu</span><br><span class=\"line\">    <span class=\"keyword\">default</span>-active=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;el-menu-vertical-demo&quot;</span></span><br><span class=\"line\">    :collapse=<span class=\"string\">&quot;isCollapse&quot;</span></span><br><span class=\"line\">    background-color=<span class=\"string\">&quot;#304156&quot;</span></span><br><span class=\"line\">    router</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;menu-item :menuList=<span class=\"string\">&quot;state.menus&quot;</span>&gt;&lt;/menu-item&gt;</span><br><span class=\"line\">  &lt;/el-menu&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span> setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> MenuItem <span class=\"keyword\">from</span> <span class=\"string\">&quot;./menu-item.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/router/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  state =reactive(&#123;</span><br><span class=\"line\">  menus : [],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">onMounted(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  state.menus = handleRoutes(routes)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;menus&#x27;</span>, state.menus)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> setObjProperties = <span class=\"function\">(<span class=\"params\">target, source</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.entries(source).forEach(<span class=\"function\">(<span class=\"params\">[key, value]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value || <span class=\"keyword\">typeof</span> value !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">      target[key] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handleRoutes = <span class=\"function\">(<span class=\"params\">routes</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 递归处理路由</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> routers = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; routes.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">     redirect, path,</span><br><span class=\"line\">      meta, children = []</span><br><span class=\"line\">    &#125; = routes[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; hidden &#125; = meta</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hidden) <span class=\"keyword\">break</span>; <span class=\"comment\">// 隐藏的菜单</span></span><br><span class=\"line\">    <span class=\"comment\">// copy route</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> metaCopy = &#123; ...meta &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = &#123; path, <span class=\"attr\">meta</span>: metaCopy &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 复制属性</span></span><br><span class=\"line\">    setObjProperties(router, &#123;</span><br><span class=\"line\">      redirect</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// todo 权限判断</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 子菜单</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subChildren = children.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> !item.hidden);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (subChildren &amp;&amp; subChildren.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!meta.showByOneChildren &amp;&amp; subChildren.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        metaCopy.type = <span class=\"string\">&#x27;menu&#x27;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        metaCopy.type = <span class=\"string\">&#x27;submenu&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      router.children = handleRoutes(subChildren);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      metaCopy.type = <span class=\"string\">&#x27;menu&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    routers.push(router);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> routers;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制菜单展开和关闭</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isCollapse = ref(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.el-menu-vertical-demo:<span class=\"function\"><span class=\"title\">not</span>(<span class=\"params\">.el-menu--collapse</span>)</span> &#123;</span><br><span class=\"line\">  width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">  min-height: 400px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.el-menu &#123;</span><br><span class=\"line\">  border-right: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul&#123;</span><br><span class=\"line\">  margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">::v-deep .el-sub-menu .el-sub-menu__title &#123;</span><br><span class=\"line\">  color: #f4f4f5 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* .el-submenu .is-active .el-submenu__title &#123;</span></span><br><span class=\"line\"><span class=\"comment\">border-bottom-color: #1890ff;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; */</span></span><br><span class=\"line\">::v-deep .el-menu .el-menu-item &#123;</span><br><span class=\"line\">  color: #bfcbd9;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 菜单点中文字的颜色 */</span></span><br><span class=\"line\">::v-deep .el-menu-item.is-active &#123;</span><br><span class=\"line\">  color: #409eff !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 当前打开菜单的所有子菜单颜色 */</span></span><br><span class=\"line\">::v-deep .is-opened .el-menu-item &#123;</span><br><span class=\"line\">  background-color: #1f2d3d !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 鼠标移动菜单的颜色 */</span></span><br><span class=\"line\">::v-deep .el-menu-item:hover &#123;</span><br><span class=\"line\">  background-color: #001528 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>src\\layout\\sidebar\\menu-item.vue：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;template v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;menu in menuList&quot;</span> :key=<span class=\"string\">&quot;menu.path&quot;</span>&gt;</span><br><span class=\"line\">    &lt;el-sub-menu v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;menu.children &amp;&amp; menu.children.length &gt; 0&quot;</span> :index=<span class=\"string\">&quot;menu.path&quot;</span>&gt;</span><br><span class=\"line\">      &lt;template #title&gt;</span><br><span class=\"line\">        &lt;!-- 动态组件的使用方式 --&gt;</span><br><span class=\"line\">        &lt;component <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;icons&quot;</span> :is=<span class=\"string\">&quot;menu.meta.icon&quot;</span> /&gt;</span><br><span class=\"line\">        &lt;!-- 方式二 --&gt;</span><br><span class=\"line\">        &lt;!-- <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icons&quot;</span> <span class=\"attr\">:icon</span>=<span class=\"string\">&quot;menu.mata.icon&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Icon</span>&gt;</span></span> --&gt;</span><br><span class=\"line\">        &lt;span&gt;&#123;&#123; menu.meta.title &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;/template&gt;</span><br><span class=\"line\">      &lt;menu-item :menuList=<span class=\"string\">&quot;menu.children&quot;</span>&gt;&lt;/menu-item&gt;</span><br><span class=\"line\">    &lt;/el-sub-menu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;el-menu-item style=<span class=\"string\">&quot;color:#f4f4f5&quot;</span> v-<span class=\"keyword\">else</span> :index=<span class=\"string\">&quot;menu.path&quot;</span>&gt;</span><br><span class=\"line\">      &lt;i v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;menu.meta.icon &amp;&amp; menu.meta.icon.includes(&#x27;el-icon&#x27;)&quot;</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;menu.meta.icon&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">      &lt;component <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;icons&quot;</span> v-<span class=\"keyword\">else</span> :is=<span class=\"string\">&quot;menu.meta.icon&quot;</span> /&gt;</span><br><span class=\"line\">      &lt;template #title&gt;&#123;&#123; menu.meta.title &#125;&#125;&lt;/template&gt;</span><br><span class=\"line\">    &lt;/el-menu-item&gt;</span><br><span class=\"line\">  &lt;/template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">defineProps([<span class=\"string\">&#x27;menuList&#x27;</span>])</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.icons&#123;</span><br><span class=\"line\">  width: 24px;</span><br><span class=\"line\">  height: 18px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3.如果菜单前需要icon, 则需要安装element-plus的icon;</p>\n<p>在工程的根目录执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure>\n\n<p>根据element-plus官方文档：<a href=\"https://element-plus.gitee.io/zh-CN/component/icon.html#%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87\">https://element-plus.gitee.io/zh-CN/component/icon.html#%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87</a></p>\n<p>在main.ts中添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果您正在使用CDN引入，请删除下面一行。</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> ElementPlusIconsVue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, component] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(ElementPlusIconsVue)) &#123;</span><br><span class=\"line\">  app.component(key, component)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新启动工程，大功告成！</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f12c6fcb21374dccaf585f55584737c1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a4fd8949a2e4e66a1f71e7dce2c8d5a~tplv-k3u1fbpfcp-watermark.image","popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"0-1搭建Vue3+Vite3模板工程（4）-左侧菜单导航","path":"posts/4133/","eyeCatchImage":"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a4fd8949a2e4e66a1f71e7dce2c8d5a~tplv-k3u1fbpfcp-watermark.image","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-16T09:04:37.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-16T09:04:37.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":7604},{"title":"JS实现call/apply/bind方法","copyright":true,"comments":1,"abbrlink":42397,"date":"2022-04-07T07:24:53.000Z","_content":"\n### call\n实现步骤：\n1. 判断调用对象是否为函数，不是函数需要抛出异常；\n2. 判断是否传入改变this指向的第一个参数，如果没传则this默认指向window；\n3. 将this赋值给传入的第一个参数（this要指向的对象）一个属性；\n4. 将剩余参数传入这个新属性中执行；\n5. 删除新属性；\n6. 返回结果；\n\n```javascript\nFunction.prototype.mycall = function(ctx, ...args) {\n  // this此时是调用mycall的实例对象\n  if (typeof this !=== 'funciton') {\n    throw new Error('type error')\n  }\n  ctx = ctx || window\n  // this这个实例对象赋值给fn属性\n  // 优化：放置fn属性会覆盖该实例本身的fn属性\n  let fn = Symbol(1)\n  ctx[fn] = this\n  // 以属性方式执行\n  const res = ctx[fn](...args)\n  // 执行完删除该属性\n  delete ctx[fn]\n  return res\n}\n```\n\n### apply\napply实现与call类似，只是传参方式不同。\n\n```javascript\n\nFunction.prototype.myapply = function(ctx, arg = []) {\n  // this此时是调用mycall的实例对象\n  if (typeof this !=== 'funciton') {\n    throw new Error('type error')\n  }\n  ctx = ctx || window\n  // this这个实例对象赋值给fn属性\n  // 优化：放置fn属性会覆盖该实例本身的fn属性\n  let fn = Symbol(1)\n  ctx[fn] = this\n  // 以属性方式执行\n  const res = ctx[fn](arg)\n  // 执行完删除该属性\n  delete ctx[fn]\n  return res\n}\n```\n\n### bind\n因为bind不是立即执行的，需要手动执行，所以可以返回一个函数实现。也可以借助call或apply实现。\n\n```javascript\n\nFunction.prototype.mybind = function(ctx, ...args1) {\n  return (...args2) => {\n    // 箭头函数this指向父级，父级的this是调用该方法的实例\n    let fn = Symbol(1)\n    ctx[fn] = this\n    const res = ctx[fn](...args1.concat(args2))  // 参数拼接\n    delete ctx[fn] \n    return res\n  }\n}\n// apply实现\nFunction.prototype.mybind = function(ctx, ...args1) {\n  return (...args2) => {\n    // 箭头函数this指向父级，父级的this是调用该方法的实例\n    return this.apply(ctx, args1.concat(args2))\n  }\n} \n\n```\n\n\n\n\n\n\n","source":"_posts/JS-实现call-apply-bind方法.md","raw":"---\ntitle: JS实现call/apply/bind方法\ntags: JavaScript\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 42397\ndate: 2022-04-07 15:24:53\n---\n\n### call\n实现步骤：\n1. 判断调用对象是否为函数，不是函数需要抛出异常；\n2. 判断是否传入改变this指向的第一个参数，如果没传则this默认指向window；\n3. 将this赋值给传入的第一个参数（this要指向的对象）一个属性；\n4. 将剩余参数传入这个新属性中执行；\n5. 删除新属性；\n6. 返回结果；\n\n```javascript\nFunction.prototype.mycall = function(ctx, ...args) {\n  // this此时是调用mycall的实例对象\n  if (typeof this !=== 'funciton') {\n    throw new Error('type error')\n  }\n  ctx = ctx || window\n  // this这个实例对象赋值给fn属性\n  // 优化：放置fn属性会覆盖该实例本身的fn属性\n  let fn = Symbol(1)\n  ctx[fn] = this\n  // 以属性方式执行\n  const res = ctx[fn](...args)\n  // 执行完删除该属性\n  delete ctx[fn]\n  return res\n}\n```\n\n### apply\napply实现与call类似，只是传参方式不同。\n\n```javascript\n\nFunction.prototype.myapply = function(ctx, arg = []) {\n  // this此时是调用mycall的实例对象\n  if (typeof this !=== 'funciton') {\n    throw new Error('type error')\n  }\n  ctx = ctx || window\n  // this这个实例对象赋值给fn属性\n  // 优化：放置fn属性会覆盖该实例本身的fn属性\n  let fn = Symbol(1)\n  ctx[fn] = this\n  // 以属性方式执行\n  const res = ctx[fn](arg)\n  // 执行完删除该属性\n  delete ctx[fn]\n  return res\n}\n```\n\n### bind\n因为bind不是立即执行的，需要手动执行，所以可以返回一个函数实现。也可以借助call或apply实现。\n\n```javascript\n\nFunction.prototype.mybind = function(ctx, ...args1) {\n  return (...args2) => {\n    // 箭头函数this指向父级，父级的this是调用该方法的实例\n    let fn = Symbol(1)\n    ctx[fn] = this\n    const res = ctx[fn](...args1.concat(args2))  // 参数拼接\n    delete ctx[fn] \n    return res\n  }\n}\n// apply实现\nFunction.prototype.mybind = function(ctx, ...args1) {\n  return (...args2) => {\n    // 箭头函数this指向父级，父级的this是调用该方法的实例\n    return this.apply(ctx, args1.concat(args2))\n  }\n} \n\n```\n\n\n\n\n\n\n","slug":"JS-实现call-apply-bind方法","published":1,"updated":"2022-07-13T01:47:21.842Z","layout":"post","photos":[],"link":"","_id":"clqdf8hsx000944t19tin3i4c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><p>实现步骤：</p>\n<ol>\n<li>判断调用对象是否为函数，不是函数需要抛出异常；</li>\n<li>判断是否传入改变this指向的第一个参数，如果没传则this默认指向window；</li>\n<li>将this赋值给传入的第一个参数（this要指向的对象）一个属性；</li>\n<li>将剩余参数传入这个新属性中执行；</li>\n<li>删除新属性；</li>\n<li>返回结果；</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mycall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this此时是调用mycall的实例对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !=== <span class=\"string\">&#x27;funciton&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;type error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ctx = ctx || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// this这个实例对象赋值给fn属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 优化：放置fn属性会覆盖该实例本身的fn属性</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"built_in\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  ctx[fn] = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"comment\">// 以属性方式执行</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = ctx[fn](...args)</span><br><span class=\"line\">  <span class=\"comment\">// 执行完删除该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> ctx[fn]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><p>apply实现与call类似，只是传参方式不同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myapply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, arg = []</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this此时是调用mycall的实例对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !=== <span class=\"string\">&#x27;funciton&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;type error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ctx = ctx || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// this这个实例对象赋值给fn属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 优化：放置fn属性会覆盖该实例本身的fn属性</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"built_in\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  ctx[fn] = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"comment\">// 以属性方式执行</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = ctx[fn](arg)</span><br><span class=\"line\">  <span class=\"comment\">// 执行完删除该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> ctx[fn]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p>因为bind不是立即执行的，需要手动执行，所以可以返回一个函数实现。也可以借助call或apply实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, ...args1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数this指向父级，父级的this是调用该方法的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = <span class=\"built_in\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    ctx[fn] = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = ctx[fn](...args1.concat(args2))  <span class=\"comment\">// 参数拼接</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ctx[fn] </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// apply实现</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, ...args1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数this指向父级，父级的this是调用该方法的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.apply(ctx, args1.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><p>实现步骤：</p>\n<ol>\n<li>判断调用对象是否为函数，不是函数需要抛出异常；</li>\n<li>判断是否传入改变this指向的第一个参数，如果没传则this默认指向window；</li>\n<li>将this赋值给传入的第一个参数（this要指向的对象）一个属性；</li>\n<li>将剩余参数传入这个新属性中执行；</li>\n<li>删除新属性；</li>\n<li>返回结果；</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mycall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this此时是调用mycall的实例对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !=== <span class=\"string\">&#x27;funciton&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;type error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ctx = ctx || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// this这个实例对象赋值给fn属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 优化：放置fn属性会覆盖该实例本身的fn属性</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"built_in\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  ctx[fn] = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"comment\">// 以属性方式执行</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = ctx[fn](...args)</span><br><span class=\"line\">  <span class=\"comment\">// 执行完删除该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> ctx[fn]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><p>apply实现与call类似，只是传参方式不同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myapply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, arg = []</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this此时是调用mycall的实例对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> !=== <span class=\"string\">&#x27;funciton&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;type error&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ctx = ctx || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// this这个实例对象赋值给fn属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 优化：放置fn属性会覆盖该实例本身的fn属性</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"built_in\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  ctx[fn] = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"comment\">// 以属性方式执行</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = ctx[fn](arg)</span><br><span class=\"line\">  <span class=\"comment\">// 执行完删除该属性</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> ctx[fn]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p>因为bind不是立即执行的，需要手动执行，所以可以返回一个函数实现。也可以借助call或apply实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, ...args1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数this指向父级，父级的this是调用该方法的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = <span class=\"built_in\">Symbol</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    ctx[fn] = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = ctx[fn](...args1.concat(args2))  <span class=\"comment\">// 参数拼接</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> ctx[fn] </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// apply实现</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, ...args1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数this指向父级，父级的this是调用该方法的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.apply(ctx, args1.concat(args2))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"JS实现call/apply/bind方法","path":"posts/42397/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-04-07T07:24:53.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-04-07T07:24:53.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JavaScript"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1320},{"title":"JS基础(一)","copyright":true,"comments":1,"abbrlink":17039,"date":"2021-10-21T14:58:10.000Z","_content":"### 数据类型\n\n基本类型:\n1. Boolean;\n2. Null;\n3. Undefined;\n4. Number;\n5. String;\n\n引用类型 :\n6. Objects: Array, function, Date\n\n新增：\n7. BigInt: 谷歌67版本出现的数据类型, 是指安全存储、操作大整数，（但是很多人不把这个做为一个类型）;\n8. Symbol：ES6新增, 这种类型的对象永不相等，即始创建的时候传入相同的值，可以解决属性名冲突的问题，做为标记;\n\n### 类型判断\n- typeof\n- instanceof\n- Object.prototype.toString\n- isXXX，比如 isArray\n\ntypeof:返回一个字符串\n<div align=center>\n<img src=\"1.jpg\" width = 65%>\n</div>\n\n因为Object 下有很多细分的类型，如 Array、Function、Date、RegExp、Error 等，typeof无法一一区分，因此可以用Object.prototype.toString来进一步区分：\n>When the toString method is called, the following steps are taken:\n>1. If the this value is undefined, return \"[object Undefined]\".\n>2. If the this value is null, return \"[object Null]\".\n>3. Let *O* be the result of calling ToObject passing the this value as the argument.\n>4. Let class be the value of the [[Class]] internal property of O.\n>5. Return the String value that is the result of concatenating the three Strings \"[object \", class, and \"]\".\n\n\n```javascript\n// 以下是11种：\nvar number = 1;          // [object Number]\nvar string = '123';      // [object String]\nvar boolean = true;      // [object Boolean]\nvar und = undefined;     // [object Undefined]\nvar nul = null;          // [object Null]\nvar obj = {a: 1}         // [object Object]\nvar array = [1, 2, 3];   // [object Array]\nvar date = new Date();   // [object Date]\nvar error = new Error(); // [object Error]\nvar reg = /a/g;          // [object RegExp]\nvar func = function a(){}; // [object Function]\n\nfunction checkType() {\n    for (var i = 0; i < arguments.length; i++) {\n        console.log(Object.prototype.toString.call(arguments[i]))\n    }\n}\n\ncheckType(number, string, boolean, und, nul, obj, array, date, error, reg, func)\n\n// 此外还有\nconsole.log(Object.prototype.toString.call(Math)); // [object Math]\nconsole.log(Object.prototype.toString.call(JSON)); // [object JSON]\n\nfunction a() {\n    console.log(Object.prototype.toString.call(arguments)); // [object Arguments]\n}\na();\n\n```\n\ninstanceof： 用于判断一个变量是否属于某个对象的实例。也可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链上。\n```javascript\nfunction test(){};var a=new test();alert(a instanceof test) // true\nvar a=new Array();if (a instanceof Object) alert('Y');else alert('N'); // Y\nif (window instanceof Object) alert('Y');else alert('N'); // N\n// 所以，这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。\nalert(typeof(window)) // 会得到object\n```\n\n参考：\n[1]:https://www.php.cn/js-tutorial-411579.html\n[2]:https://github.com/mqyqingfeng/Blog/issues/28\n\n\n\n\n\n\n\n","source":"_posts/JS基础(一).md","raw":"---\ntitle: JS基础(一)\ntags: JavaScript\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 17039\ndate: 2021-10-21 22:58:10\n---\n### 数据类型\n\n基本类型:\n1. Boolean;\n2. Null;\n3. Undefined;\n4. Number;\n5. String;\n\n引用类型 :\n6. Objects: Array, function, Date\n\n新增：\n7. BigInt: 谷歌67版本出现的数据类型, 是指安全存储、操作大整数，（但是很多人不把这个做为一个类型）;\n8. Symbol：ES6新增, 这种类型的对象永不相等，即始创建的时候传入相同的值，可以解决属性名冲突的问题，做为标记;\n\n### 类型判断\n- typeof\n- instanceof\n- Object.prototype.toString\n- isXXX，比如 isArray\n\ntypeof:返回一个字符串\n<div align=center>\n<img src=\"1.jpg\" width = 65%>\n</div>\n\n因为Object 下有很多细分的类型，如 Array、Function、Date、RegExp、Error 等，typeof无法一一区分，因此可以用Object.prototype.toString来进一步区分：\n>When the toString method is called, the following steps are taken:\n>1. If the this value is undefined, return \"[object Undefined]\".\n>2. If the this value is null, return \"[object Null]\".\n>3. Let *O* be the result of calling ToObject passing the this value as the argument.\n>4. Let class be the value of the [[Class]] internal property of O.\n>5. Return the String value that is the result of concatenating the three Strings \"[object \", class, and \"]\".\n\n\n```javascript\n// 以下是11种：\nvar number = 1;          // [object Number]\nvar string = '123';      // [object String]\nvar boolean = true;      // [object Boolean]\nvar und = undefined;     // [object Undefined]\nvar nul = null;          // [object Null]\nvar obj = {a: 1}         // [object Object]\nvar array = [1, 2, 3];   // [object Array]\nvar date = new Date();   // [object Date]\nvar error = new Error(); // [object Error]\nvar reg = /a/g;          // [object RegExp]\nvar func = function a(){}; // [object Function]\n\nfunction checkType() {\n    for (var i = 0; i < arguments.length; i++) {\n        console.log(Object.prototype.toString.call(arguments[i]))\n    }\n}\n\ncheckType(number, string, boolean, und, nul, obj, array, date, error, reg, func)\n\n// 此外还有\nconsole.log(Object.prototype.toString.call(Math)); // [object Math]\nconsole.log(Object.prototype.toString.call(JSON)); // [object JSON]\n\nfunction a() {\n    console.log(Object.prototype.toString.call(arguments)); // [object Arguments]\n}\na();\n\n```\n\ninstanceof： 用于判断一个变量是否属于某个对象的实例。也可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链上。\n```javascript\nfunction test(){};var a=new test();alert(a instanceof test) // true\nvar a=new Array();if (a instanceof Object) alert('Y');else alert('N'); // Y\nif (window instanceof Object) alert('Y');else alert('N'); // N\n// 所以，这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。\nalert(typeof(window)) // 会得到object\n```\n\n参考：\n[1]:https://www.php.cn/js-tutorial-411579.html\n[2]:https://github.com/mqyqingfeng/Blog/issues/28\n\n\n\n\n\n\n\n","slug":"JS基础(一)","published":1,"updated":"2022-07-13T01:47:21.844Z","layout":"post","photos":[],"link":"","_id":"clqdf8ht2000d44t1c6zybigm","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>基本类型:</p>\n<ol>\n<li>Boolean;</li>\n<li>Null;</li>\n<li>Undefined;</li>\n<li>Number;</li>\n<li>String;</li>\n</ol>\n<p>引用类型 :<br>6. Objects: Array, function, Date</p>\n<p>新增：<br>7. BigInt: 谷歌67版本出现的数据类型, 是指安全存储、操作大整数，（但是很多人不把这个做为一个类型）;<br>8. Symbol：ES6新增, 这种类型的对象永不相等，即始创建的时候传入相同的值，可以解决属性名冲突的问题，做为标记;</p>\n<h3 id=\"类型判断\"><a href=\"#类型判断\" class=\"headerlink\" title=\"类型判断\"></a>类型判断</h3><ul>\n<li>typeof</li>\n<li>instanceof</li>\n<li>Object.prototype.toString</li>\n<li>isXXX，比如 isArray</li>\n</ul>\n<p>typeof:返回一个字符串</p>\n<div align=\"center\">\n<img data-src=\"/posts/17039/1.jpg\" width=\"65%\">\n</div>\n\n<p>因为Object 下有很多细分的类型，如 Array、Function、Date、RegExp、Error 等，typeof无法一一区分，因此可以用Object.prototype.toString来进一步区分：</p>\n<blockquote>\n<p>When the toString method is called, the following steps are taken:</p>\n<ol>\n<li>If the this value is undefined, return “[object Undefined]”.</li>\n<li>If the this value is null, return “[object Null]”.</li>\n<li>Let <em>O</em> be the result of calling ToObject passing the this value as the argument.</li>\n<li>Let class be the value of the [[Class]] internal property of O.</li>\n<li>Return the String value that is the result of concatenating the three Strings “[object “, class, and “]”.</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下是11种：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>;          <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;123&#x27;</span>;      <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boolean = <span class=\"literal\">true</span>;      <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> und = <span class=\"literal\">undefined</span>;     <span class=\"comment\">// [object Undefined]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nul = <span class=\"literal\">null</span>;          <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;         <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];   <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();   <span class=\"comment\">// [object Date]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(); <span class=\"comment\">// [object Error]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a/g</span>;          <span class=\"comment\">// [object RegExp]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">arguments</span>[i]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(number, string, boolean, und, nul, obj, array, date, error, reg, func)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此外还有</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">Math</span>)); <span class=\"comment\">// [object Math]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">JSON</span>)); <span class=\"comment\">// [object JSON]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">arguments</span>)); <span class=\"comment\">// [object Arguments]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>instanceof： 用于判断一个变量是否属于某个对象的实例。也可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;&#125;;<span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> test();alert(a <span class=\"keyword\">instanceof</span> test) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();<span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) alert(<span class=\"string\">&#x27;Y&#x27;</span>);<span class=\"keyword\">else</span> alert(<span class=\"string\">&#x27;N&#x27;</span>); <span class=\"comment\">// Y</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) alert(<span class=\"string\">&#x27;Y&#x27;</span>);<span class=\"keyword\">else</span> alert(<span class=\"string\">&#x27;N&#x27;</span>); <span class=\"comment\">// N</span></span><br><span class=\"line\"><span class=\"comment\">// 所以，这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。</span></span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span>(<span class=\"built_in\">window</span>)) <span class=\"comment\">// 会得到object</span></span><br></pre></td></tr></table></figure>\n\n<p>参考：<br>[1]:<a href=\"https://www.php.cn/js-tutorial-411579.html\">https://www.php.cn/js-tutorial-411579.html</a><br>[2]:<a href=\"https://github.com/mqyqingfeng/Blog/issues/28\">https://github.com/mqyqingfeng/Blog/issues/28</a></p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>基本类型:</p>\n<ol>\n<li>Boolean;</li>\n<li>Null;</li>\n<li>Undefined;</li>\n<li>Number;</li>\n<li>String;</li>\n</ol>\n<p>引用类型 :<br>6. Objects: Array, function, Date</p>\n<p>新增：<br>7. BigInt: 谷歌67版本出现的数据类型, 是指安全存储、操作大整数，（但是很多人不把这个做为一个类型）;<br>8. Symbol：ES6新增, 这种类型的对象永不相等，即始创建的时候传入相同的值，可以解决属性名冲突的问题，做为标记;</p>\n<h3 id=\"类型判断\"><a href=\"#类型判断\" class=\"headerlink\" title=\"类型判断\"></a>类型判断</h3><ul>\n<li>typeof</li>\n<li>instanceof</li>\n<li>Object.prototype.toString</li>\n<li>isXXX，比如 isArray</li>\n</ul>\n<p>typeof:返回一个字符串</p>\n<div align=\"center\">\n<img src=\"/posts/17039/1.jpg\" width=\"65%\">\n</div>\n\n<p>因为Object 下有很多细分的类型，如 Array、Function、Date、RegExp、Error 等，typeof无法一一区分，因此可以用Object.prototype.toString来进一步区分：</p>\n<blockquote>\n<p>When the toString method is called, the following steps are taken:</p>\n<ol>\n<li>If the this value is undefined, return “[object Undefined]”.</li>\n<li>If the this value is null, return “[object Null]”.</li>\n<li>Let <em>O</em> be the result of calling ToObject passing the this value as the argument.</li>\n<li>Let class be the value of the [[Class]] internal property of O.</li>\n<li>Return the String value that is the result of concatenating the three Strings “[object “, class, and “]”.</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下是11种：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>;          <span class=\"comment\">// [object Number]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;123&#x27;</span>;      <span class=\"comment\">// [object String]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boolean = <span class=\"literal\">true</span>;      <span class=\"comment\">// [object Boolean]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> und = <span class=\"literal\">undefined</span>;     <span class=\"comment\">// [object Undefined]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nul = <span class=\"literal\">null</span>;          <span class=\"comment\">// [object Null]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;         <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];   <span class=\"comment\">// [object Array]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();   <span class=\"comment\">// [object Date]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(); <span class=\"comment\">// [object Error]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a/g</span>;          <span class=\"comment\">// [object RegExp]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// [object Function]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">arguments</span>[i]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(number, string, boolean, und, nul, obj, array, date, error, reg, func)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此外还有</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">Math</span>)); <span class=\"comment\">// [object Math]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">JSON</span>)); <span class=\"comment\">// [object JSON]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"built_in\">arguments</span>)); <span class=\"comment\">// [object Arguments]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>instanceof： 用于判断一个变量是否属于某个对象的实例。也可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;&#125;;<span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> test();alert(a <span class=\"keyword\">instanceof</span> test) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();<span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) alert(<span class=\"string\">&#x27;Y&#x27;</span>);<span class=\"keyword\">else</span> alert(<span class=\"string\">&#x27;N&#x27;</span>); <span class=\"comment\">// Y</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) alert(<span class=\"string\">&#x27;Y&#x27;</span>);<span class=\"keyword\">else</span> alert(<span class=\"string\">&#x27;N&#x27;</span>); <span class=\"comment\">// N</span></span><br><span class=\"line\"><span class=\"comment\">// 所以，这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。</span></span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span>(<span class=\"built_in\">window</span>)) <span class=\"comment\">// 会得到object</span></span><br></pre></td></tr></table></figure>\n\n<p>参考：<br>[1]:<a href=\"https://www.php.cn/js-tutorial-411579.html\">https://www.php.cn/js-tutorial-411579.html</a><br>[2]:<a href=\"https://github.com/mqyqingfeng/Blog/issues/28\">https://github.com/mqyqingfeng/Blog/issues/28</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/posts/17039/1.jpg","popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"JS基础(一)","path":"posts/17039/","eyeCatchImage":"/posts/17039/1.jpg","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-10-21T14:58:10.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-10-21T14:58:10.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JavaScript"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2104},{"title":"Promise(二)——并行请求","copyright":true,"comments":1,"abbrlink":60422,"date":"2021-02-23T06:58:30.000Z","_content":"\n<!-- <img src=\"https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg\" width=\"100%\" height=\"480px;\"/> -->\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n\n### Promise并行请求\n\n- getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误\n- 每一个promise都必须返回resolve结果才正确\n- 每一个promise都不处理错误\n- 参考：https://www.jianshu.com/p/dbda3053da20\n  \n\n```javascript\n/**\n * 每一个promise都必须返回resolve结果才正确\n * 每一个promise都不处理错误\n */\n\nconst getA = new Promise((resolve, reject) => {\n   //模拟异步任务\n   setTimeout(function(){\n     resolve(2);\n   }, 1000) \n})\n.then(result => result)\n\n\nconst getB = new Promise((resolve, reject) => {\n   setTimeout(function(){\n     // resolve(3);\n     reject('Error in getB');\n   }, 1000) \n})\n.then(result => result)\n\n\nPromise.all([getA, getB]).then(data=>{\n    console.log(data)\n})\n.catch(e => console.log(e));\n```\n\n- getA和getB并行执行，然后输出结果。总是返回resolve结果\n- 每一个promise自己处理错误\n\n```javascript\n/**\n * 每一个promise自己处理错误\n */\n\nconst getA = new Promise((resolve, reject) => {\n   //模拟异步任务\n   setTimeout(function(){\n     resolve(2);\n   }, 1000) \n})\n.then(result => result)\n.catch(e=>{\n\n})\n\n\nconst getB = new Promise((resolve, reject) => {\n   setTimeout(function(){\n     // resolve(3);\n     reject('Error in getB');\n   }, 1000) \n})\n.then(result => result)\n.catch(e=>e)\n\n\nPromise.all([getA, getB]).then(data=>{\n    console.log(data)\n})\n.catch(e => console.log(e));\n```\n\n- Promise.all传入同一个方法不同参数的封装\n- 应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧\n- 参考：https://blog.csdn.net/qq_25842063/article/details/84284911\n\n```javascript\nlet tasks = [];\nfor (let i = 1; i <= 5; i++) {\n    tasks.push(i);\n};\n/*\n* @params : func:你封装的方法 params: 参数的数组\n*/\nlet getDataBind = (func, params) => {\n        return params.map( item => {\n            return func.call(null, item) //传参\n        })\n    }\n /*\n @params : page_no 页码  \n getDate 可以换成你自己需要重复操作的方法,同理\n */\nlet getData = (page_no) => {\n        let saveListData = JSON.parse(localStorage.getItem(this.props.saveListData));\n        let params = {\n            page_no:page_no,\n            ...saveListData.loadParams\n        }\n        return new Promise(resolve => {\n            get(this.props.sortUrl, params, this, false).then(function (data) {\n                resolve(data.result;);\n            });\n        })\n    }  \n Promise.all(this.getDataBind(this.getData, arrPage))\n\t.then( resultArr  => {\n\t\t    resultArr = resultArr.flat();//拉平数组\n\t\t    console.log(resultArr)    //这里就获取到所有页的数据了\n\t});\n//\n\n```\n","source":"_posts/Promise2.md","raw":"---\ntitle: Promise(二)——并行请求\ntags: Promise\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 60422\ndate: 2021-02-23 14:58:30\n---\n\n<!-- <img src=\"https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg\" width=\"100%\" height=\"480px;\"/> -->\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n\n### Promise并行请求\n\n- getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误\n- 每一个promise都必须返回resolve结果才正确\n- 每一个promise都不处理错误\n- 参考：https://www.jianshu.com/p/dbda3053da20\n  \n\n```javascript\n/**\n * 每一个promise都必须返回resolve结果才正确\n * 每一个promise都不处理错误\n */\n\nconst getA = new Promise((resolve, reject) => {\n   //模拟异步任务\n   setTimeout(function(){\n     resolve(2);\n   }, 1000) \n})\n.then(result => result)\n\n\nconst getB = new Promise((resolve, reject) => {\n   setTimeout(function(){\n     // resolve(3);\n     reject('Error in getB');\n   }, 1000) \n})\n.then(result => result)\n\n\nPromise.all([getA, getB]).then(data=>{\n    console.log(data)\n})\n.catch(e => console.log(e));\n```\n\n- getA和getB并行执行，然后输出结果。总是返回resolve结果\n- 每一个promise自己处理错误\n\n```javascript\n/**\n * 每一个promise自己处理错误\n */\n\nconst getA = new Promise((resolve, reject) => {\n   //模拟异步任务\n   setTimeout(function(){\n     resolve(2);\n   }, 1000) \n})\n.then(result => result)\n.catch(e=>{\n\n})\n\n\nconst getB = new Promise((resolve, reject) => {\n   setTimeout(function(){\n     // resolve(3);\n     reject('Error in getB');\n   }, 1000) \n})\n.then(result => result)\n.catch(e=>e)\n\n\nPromise.all([getA, getB]).then(data=>{\n    console.log(data)\n})\n.catch(e => console.log(e));\n```\n\n- Promise.all传入同一个方法不同参数的封装\n- 应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧\n- 参考：https://blog.csdn.net/qq_25842063/article/details/84284911\n\n```javascript\nlet tasks = [];\nfor (let i = 1; i <= 5; i++) {\n    tasks.push(i);\n};\n/*\n* @params : func:你封装的方法 params: 参数的数组\n*/\nlet getDataBind = (func, params) => {\n        return params.map( item => {\n            return func.call(null, item) //传参\n        })\n    }\n /*\n @params : page_no 页码  \n getDate 可以换成你自己需要重复操作的方法,同理\n */\nlet getData = (page_no) => {\n        let saveListData = JSON.parse(localStorage.getItem(this.props.saveListData));\n        let params = {\n            page_no:page_no,\n            ...saveListData.loadParams\n        }\n        return new Promise(resolve => {\n            get(this.props.sortUrl, params, this, false).then(function (data) {\n                resolve(data.result;);\n            });\n        })\n    }  \n Promise.all(this.getDataBind(this.getData, arrPage))\n\t.then( resultArr  => {\n\t\t    resultArr = resultArr.flat();//拉平数组\n\t\t    console.log(resultArr)    //这里就获取到所有页的数据了\n\t});\n//\n\n```\n","slug":"Promise2","published":1,"updated":"2022-07-13T01:47:21.867Z","layout":"post","photos":[],"link":"","_id":"clqdf8ht4000f44t1f50x91db","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><!-- <img data-src=\"https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg\" width=\"100%\" height=\"480px;\"/> -->\n\n<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise并行请求\"><a href=\"#Promise并行请求\" class=\"headerlink\" title=\"Promise并行请求\"></a>Promise并行请求</h3><ul>\n<li>getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误</li>\n<li>每一个promise都必须返回resolve结果才正确</li>\n<li>每一个promise都不处理错误</li>\n<li>参考：<a href=\"https://www.jianshu.com/p/dbda3053da20\">https://www.jianshu.com/p/dbda3053da20</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise都必须返回resolve结果才正确</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise都不处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//模拟异步任务</span></span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// resolve(3);</span></span><br><span class=\"line\">     reject(<span class=\"string\">&#x27;Error in getB&#x27;</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getA, getB]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getA和getB并行执行，然后输出结果。总是返回resolve结果</li>\n<li>每一个promise自己处理错误</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise自己处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//模拟异步任务</span></span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// resolve(3);</span></span><br><span class=\"line\">     reject(<span class=\"string\">&#x27;Error in getB&#x27;</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getA, getB]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Promise.all传入同一个方法不同参数的封装</li>\n<li>应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧</li>\n<li>参考：<a href=\"https://blog.csdn.net/qq_25842063/article/details/84284911\">https://blog.csdn.net/qq_25842063/article/details/84284911</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tasks = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    tasks.push(i);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params : func:你封装的方法 params: 参数的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getDataBind = <span class=\"function\">(<span class=\"params\">func, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> params.map( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(<span class=\"literal\">null</span>, item) <span class=\"comment\">//传参</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> @params : page_no 页码  </span></span><br><span class=\"line\"><span class=\"comment\"> getDate 可以换成你自己需要重复操作的方法,同理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getData = <span class=\"function\">(<span class=\"params\">page_no</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> saveListData = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"built_in\">this</span>.props.saveListData));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">            page_no:page_no,</span><br><span class=\"line\">            ...saveListData.loadParams</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            get(<span class=\"built_in\">this</span>.props.sortUrl, params, <span class=\"built_in\">this</span>, <span class=\"literal\">false</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                resolve(data.result;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> <span class=\"built_in\">Promise</span>.all(<span class=\"built_in\">this</span>.getDataBind(<span class=\"built_in\">this</span>.getData, arrPage))</span><br><span class=\"line\">\t.then( <span class=\"function\"><span class=\"params\">resultArr</span>  =&gt;</span> &#123;</span><br><span class=\"line\">\t\t    resultArr = resultArr.flat();<span class=\"comment\">//拉平数组</span></span><br><span class=\"line\">\t\t    <span class=\"built_in\">console</span>.log(resultArr)    <span class=\"comment\">//这里就获取到所有页的数据了</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<!-- <img src=\"https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg\" width=\"100%\" height=\"480px;\"/> -->\n\n<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise并行请求\"><a href=\"#Promise并行请求\" class=\"headerlink\" title=\"Promise并行请求\"></a>Promise并行请求</h3><ul>\n<li>getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误</li>\n<li>每一个promise都必须返回resolve结果才正确</li>\n<li>每一个promise都不处理错误</li>\n<li>参考：<a href=\"https://www.jianshu.com/p/dbda3053da20\">https://www.jianshu.com/p/dbda3053da20</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise都必须返回resolve结果才正确</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise都不处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//模拟异步任务</span></span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// resolve(3);</span></span><br><span class=\"line\">     reject(<span class=\"string\">&#x27;Error in getB&#x27;</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getA, getB]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getA和getB并行执行，然后输出结果。总是返回resolve结果</li>\n<li>每一个promise自己处理错误</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise自己处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//模拟异步任务</span></span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// resolve(3);</span></span><br><span class=\"line\">     reject(<span class=\"string\">&#x27;Error in getB&#x27;</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getA, getB]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Promise.all传入同一个方法不同参数的封装</li>\n<li>应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧</li>\n<li>参考：<a href=\"https://blog.csdn.net/qq_25842063/article/details/84284911\">https://blog.csdn.net/qq_25842063/article/details/84284911</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tasks = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    tasks.push(i);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params : func:你封装的方法 params: 参数的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getDataBind = <span class=\"function\">(<span class=\"params\">func, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> params.map( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(<span class=\"literal\">null</span>, item) <span class=\"comment\">//传参</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> @params : page_no 页码  </span></span><br><span class=\"line\"><span class=\"comment\"> getDate 可以换成你自己需要重复操作的方法,同理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getData = <span class=\"function\">(<span class=\"params\">page_no</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> saveListData = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"built_in\">this</span>.props.saveListData));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">            page_no:page_no,</span><br><span class=\"line\">            ...saveListData.loadParams</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            get(<span class=\"built_in\">this</span>.props.sortUrl, params, <span class=\"built_in\">this</span>, <span class=\"literal\">false</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                resolve(data.result;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> <span class=\"built_in\">Promise</span>.all(<span class=\"built_in\">this</span>.getDataBind(<span class=\"built_in\">this</span>.getData, arrPage))</span><br><span class=\"line\">\t.then( <span class=\"function\"><span class=\"params\">resultArr</span>  =&gt;</span> &#123;</span><br><span class=\"line\">\t\t    resultArr = resultArr.flat();<span class=\"comment\">//拉平数组</span></span><br><span class=\"line\">\t\t    <span class=\"built_in\">console</span>.log(resultArr)    <span class=\"comment\">//这里就获取到所有页的数据了</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"Promise(二)——并行请求","path":"posts/60422/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-02-23T06:58:30.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-23T06:58:30.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["Promise"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2160},{"title":"JS基础（二）","copyright":true,"comments":1,"abbrlink":22254,"date":"2021-10-21T15:04:23.000Z","_content":"\n## 一、类型转换\n### （1）原始值 -> 对象\n#### 1 原始值转字符串\nString()\n#### 2 原始值转数字\n方法一：\nNumber()\n方法二：\n算数函数或表达式：\n\n\n| 值      | 变成…… |\n| -------------------- | ----------- |\n| undefined\t| NaN |\n| null\t| 0\n| true和false | \t1 和 0\n| string | \t去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。|\n\n注意：\n如果通过 Number 转换函数传入一个字符串，它会试图将其转换成一个整数或浮点数，而且会忽略所有前导的 0，如果有一个字符不是数字，结果都会返回 NaN，鉴于这种严格的判断，我们一般还会使用更加灵活的 parseInt 和 parseFloat 进行转换。\n\nparseInt 只解析整数，parseFloat 则可以解析整数和浮点数，如果字符串前缀是 \"0x\" 或者\"0X\"，parseInt 将其解释为十六进制数，parseInt 和 parseFloat 都会跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略后面的内容。如果第一个非空格字符是非法的数字直接量，将最终返回 NaN：\n```javascript\nconsole.log(parseInt(\"3 abc\")) // 3\nconsole.log(parseFloat(\"3.14 abc\")) // 3.14\nconsole.log(parseInt(\"-12.34\")) // -12\nconsole.log(parseInt(\"0xFF\")) // 255\nconsole.log(parseFloat(\".1\")) // 0.1\nconsole.log(parseInt(\"0.1\")) // 0\n```\n\n#### 3 原始值转布尔类型\n转换规则如下：\n\n| 值 | 变成…… |\n| ------------------- | -------------|\n| +0, -0, null, undefined, NaN, \"\", false | false |\n| 其他值 | true |\n\n>请注意:\n>- 当 Boolean 函数不传任何参数时，会返回 false;\n>- 包含 0 的字符串 \"0\" 是 true一些编程语言（比如 PHP）视 \"0\" 为 false。但在 JavaScript中，非空的字符串总是 true;\n```javascript\nalert( Boolean(\"0\") ); // true\nalert( Boolean(\" \") ); // 空白，也是 true（任何非空字符串都是 true）\n```\n#### 4 原始值转对象\n原始值到对象的转换非常简单，原始值通过调用 String()、Number() 或者 Boolean() 构造函数，转换为它们各自的包装对象。\n\nnull 和 undefined 属于例外，当将它们用在期望是一个对象的地方都会造成一个类型错误 (TypeError) 异常，而不会执行正常的转换。\n\n```javascript\nvar a = 1;\nconsole.log(typeof a); // number\nvar b = new Number(a);\nconsole.log(typeof b); // object\n```\n\n### （2）对象 -> 原始值\n#### 1 对象转布尔值\n所有对象（包括函数和数组）的布尔值都是true.\n\n#### 2 对象转字符串和数字\n对象到字符串和对象到数字的转换都是通过调用待转换对象的一个方法来完成的。而 JavaScript 对象有两个不同的方法来执行转换，一个是 toString，一个是 valueOf,这两个方法是真实暴露出来的方法。\n\n所有的对象除了 null 和 undefined 之外的任何值都具有 toString 方法。\n\n1. 数组的 toString 方法将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并成结果字符串。\n2. 函数的 toString 方法返回源代码字符串。\n3. 日期的 toString 方法返回一个可读的日期和时间字符串。\n4. RegExp 的 toString 方法返回一个表示正则表达式直接量的字符串。\n\n而另一个转换对象的函数是 valueOf，表示对象的原始值。**默认的 valueOf 方法返回这个对象本身，数组、函数、正则简单的继承了这个默认方法，也会返回对象本身**。日期是一个例外，它会返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。\n```javascript\nvar date = new Date(2017, 4, 21);\nconsole.log(date.valueOf()) // 1495296000000\n```\n\n更复杂的情况见参考文献[2],写的很详细，很简单易懂。\n\n## 二、操作符强制类型转换\n\n### 1 一元操作符 +\n\n```javascript\nconsole.log(+[]); // 0\nconsole.log(+['1']); // 1\nconsole.log(+['1', '2', '3']); // NaN\nconsole.log(+{}); // NaN\n```\n执行的步骤是：\n\n1. 如果 obj 为基本类型，直接返回\n2. 否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。\n3. 否则，调用 toString 方法，如果返回一个原始值，则JavaScript 将其返回。\n4. 否则，JavaScript 抛出一个类型错误异常。\n\n注意：前面讲过：默认的 valueOf 方法返回这个对象本身\n\n### 2 二元操作符 +\n\n当计算 value1 + value2时：\n\n1. lprim = ToPrimitive(value1)\n2. rprim = ToPrimitive(value2)\n3. 如果 lprim 是字符串或者 rprim 是字符串，那么返回 ToString(lprim) 和 ToString(rprim)的拼接结果\n4. 返回 ToNumber(lprim) 和 ToNumber(rprim)的运算结果\n\n```javascript\nconsole.log(1 + '1'); // 11（字符串）\nconsole.log(null + 1); // 1（数字）\nconsole.log([] + []); // ''(空字符串)\nconsole.log([] + {}); // [object Object]\nconsole.log(1 + true); // 2\nconsole.log({} + {}); // \"[object Object][object Object]\"\nconsole.log(new Date(2017, 04, 21) + 1) // \"Sun May 21 2017 00:00:00 GMT+0800 (CST)1\"\n```\n\n### 3 ==相等\n操作规则如下图：\n\n<div align=center>\n<img src=\"1.jpg\" width = 65%>\n</div>\n\n\n\n\n\n\n参考：\n[1].[类型转换](https://zh.javascript.info/type-conversions)\n[2].[JavaScript 深入之头疼的类型转换(上)](https://github.com/mqyqingfeng/Blog/issues/159)  写的很细👍\n[3].[JavaScript 深入之头疼的类型转换(下)](https://github.com/mqyqingfeng/Blog/issues/164)\n\n\n","source":"_posts/JS基础二.md","raw":"---\ntitle: JS基础（二）\ntags: JavaScript\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 22254\ndate: 2021-10-21 23:04:23\n---\n\n## 一、类型转换\n### （1）原始值 -> 对象\n#### 1 原始值转字符串\nString()\n#### 2 原始值转数字\n方法一：\nNumber()\n方法二：\n算数函数或表达式：\n\n\n| 值      | 变成…… |\n| -------------------- | ----------- |\n| undefined\t| NaN |\n| null\t| 0\n| true和false | \t1 和 0\n| string | \t去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。|\n\n注意：\n如果通过 Number 转换函数传入一个字符串，它会试图将其转换成一个整数或浮点数，而且会忽略所有前导的 0，如果有一个字符不是数字，结果都会返回 NaN，鉴于这种严格的判断，我们一般还会使用更加灵活的 parseInt 和 parseFloat 进行转换。\n\nparseInt 只解析整数，parseFloat 则可以解析整数和浮点数，如果字符串前缀是 \"0x\" 或者\"0X\"，parseInt 将其解释为十六进制数，parseInt 和 parseFloat 都会跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略后面的内容。如果第一个非空格字符是非法的数字直接量，将最终返回 NaN：\n```javascript\nconsole.log(parseInt(\"3 abc\")) // 3\nconsole.log(parseFloat(\"3.14 abc\")) // 3.14\nconsole.log(parseInt(\"-12.34\")) // -12\nconsole.log(parseInt(\"0xFF\")) // 255\nconsole.log(parseFloat(\".1\")) // 0.1\nconsole.log(parseInt(\"0.1\")) // 0\n```\n\n#### 3 原始值转布尔类型\n转换规则如下：\n\n| 值 | 变成…… |\n| ------------------- | -------------|\n| +0, -0, null, undefined, NaN, \"\", false | false |\n| 其他值 | true |\n\n>请注意:\n>- 当 Boolean 函数不传任何参数时，会返回 false;\n>- 包含 0 的字符串 \"0\" 是 true一些编程语言（比如 PHP）视 \"0\" 为 false。但在 JavaScript中，非空的字符串总是 true;\n```javascript\nalert( Boolean(\"0\") ); // true\nalert( Boolean(\" \") ); // 空白，也是 true（任何非空字符串都是 true）\n```\n#### 4 原始值转对象\n原始值到对象的转换非常简单，原始值通过调用 String()、Number() 或者 Boolean() 构造函数，转换为它们各自的包装对象。\n\nnull 和 undefined 属于例外，当将它们用在期望是一个对象的地方都会造成一个类型错误 (TypeError) 异常，而不会执行正常的转换。\n\n```javascript\nvar a = 1;\nconsole.log(typeof a); // number\nvar b = new Number(a);\nconsole.log(typeof b); // object\n```\n\n### （2）对象 -> 原始值\n#### 1 对象转布尔值\n所有对象（包括函数和数组）的布尔值都是true.\n\n#### 2 对象转字符串和数字\n对象到字符串和对象到数字的转换都是通过调用待转换对象的一个方法来完成的。而 JavaScript 对象有两个不同的方法来执行转换，一个是 toString，一个是 valueOf,这两个方法是真实暴露出来的方法。\n\n所有的对象除了 null 和 undefined 之外的任何值都具有 toString 方法。\n\n1. 数组的 toString 方法将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并成结果字符串。\n2. 函数的 toString 方法返回源代码字符串。\n3. 日期的 toString 方法返回一个可读的日期和时间字符串。\n4. RegExp 的 toString 方法返回一个表示正则表达式直接量的字符串。\n\n而另一个转换对象的函数是 valueOf，表示对象的原始值。**默认的 valueOf 方法返回这个对象本身，数组、函数、正则简单的继承了这个默认方法，也会返回对象本身**。日期是一个例外，它会返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。\n```javascript\nvar date = new Date(2017, 4, 21);\nconsole.log(date.valueOf()) // 1495296000000\n```\n\n更复杂的情况见参考文献[2],写的很详细，很简单易懂。\n\n## 二、操作符强制类型转换\n\n### 1 一元操作符 +\n\n```javascript\nconsole.log(+[]); // 0\nconsole.log(+['1']); // 1\nconsole.log(+['1', '2', '3']); // NaN\nconsole.log(+{}); // NaN\n```\n执行的步骤是：\n\n1. 如果 obj 为基本类型，直接返回\n2. 否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。\n3. 否则，调用 toString 方法，如果返回一个原始值，则JavaScript 将其返回。\n4. 否则，JavaScript 抛出一个类型错误异常。\n\n注意：前面讲过：默认的 valueOf 方法返回这个对象本身\n\n### 2 二元操作符 +\n\n当计算 value1 + value2时：\n\n1. lprim = ToPrimitive(value1)\n2. rprim = ToPrimitive(value2)\n3. 如果 lprim 是字符串或者 rprim 是字符串，那么返回 ToString(lprim) 和 ToString(rprim)的拼接结果\n4. 返回 ToNumber(lprim) 和 ToNumber(rprim)的运算结果\n\n```javascript\nconsole.log(1 + '1'); // 11（字符串）\nconsole.log(null + 1); // 1（数字）\nconsole.log([] + []); // ''(空字符串)\nconsole.log([] + {}); // [object Object]\nconsole.log(1 + true); // 2\nconsole.log({} + {}); // \"[object Object][object Object]\"\nconsole.log(new Date(2017, 04, 21) + 1) // \"Sun May 21 2017 00:00:00 GMT+0800 (CST)1\"\n```\n\n### 3 ==相等\n操作规则如下图：\n\n<div align=center>\n<img src=\"1.jpg\" width = 65%>\n</div>\n\n\n\n\n\n\n参考：\n[1].[类型转换](https://zh.javascript.info/type-conversions)\n[2].[JavaScript 深入之头疼的类型转换(上)](https://github.com/mqyqingfeng/Blog/issues/159)  写的很细👍\n[3].[JavaScript 深入之头疼的类型转换(下)](https://github.com/mqyqingfeng/Blog/issues/164)\n\n\n","slug":"JS基础二","published":1,"updated":"2022-07-13T01:47:21.852Z","layout":"post","photos":[],"link":"","_id":"clqdf8ht6000k44t16erk1ozx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"一、类型转换\"><a href=\"#一、类型转换\" class=\"headerlink\" title=\"一、类型转换\"></a>一、类型转换</h2><h3 id=\"（1）原始值-gt-对象\"><a href=\"#（1）原始值-gt-对象\" class=\"headerlink\" title=\"（1）原始值 -&gt; 对象\"></a>（1）原始值 -&gt; 对象</h3><h4 id=\"1-原始值转字符串\"><a href=\"#1-原始值转字符串\" class=\"headerlink\" title=\"1 原始值转字符串\"></a>1 原始值转字符串</h4><p>String()</p>\n<h4 id=\"2-原始值转数字\"><a href=\"#2-原始值转数字\" class=\"headerlink\" title=\"2 原始值转数字\"></a>2 原始值转数字</h4><p>方法一：<br>Number()<br>方法二：<br>算数函数或表达式：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>变成……</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>undefined</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>null</td>\n<td>0</td>\n</tr>\n<tr>\n<td>true和false</td>\n<td>1 和 0</td>\n</tr>\n<tr>\n<td>string</td>\n<td>去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。</td>\n</tr>\n</tbody></table>\n<p>注意：<br>如果通过 Number 转换函数传入一个字符串，它会试图将其转换成一个整数或浮点数，而且会忽略所有前导的 0，如果有一个字符不是数字，结果都会返回 NaN，鉴于这种严格的判断，我们一般还会使用更加灵活的 parseInt 和 parseFloat 进行转换。</p>\n<p>parseInt 只解析整数，parseFloat 则可以解析整数和浮点数，如果字符串前缀是 “0x” 或者”0X”，parseInt 将其解释为十六进制数，parseInt 和 parseFloat 都会跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略后面的内容。如果第一个非空格字符是非法的数字直接量，将最终返回 NaN：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;3 abc&quot;</span>)) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;3.14 abc&quot;</span>)) <span class=\"comment\">// 3.14</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;-12.34&quot;</span>)) <span class=\"comment\">// -12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;0xFF&quot;</span>)) <span class=\"comment\">// 255</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;.1&quot;</span>)) <span class=\"comment\">// 0.1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;0.1&quot;</span>)) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-原始值转布尔类型\"><a href=\"#3-原始值转布尔类型\" class=\"headerlink\" title=\"3 原始值转布尔类型\"></a>3 原始值转布尔类型</h4><p>转换规则如下：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>变成……</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+0, -0, null, undefined, NaN, “”, false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>其他值</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>请注意:</p>\n<ul>\n<li>当 Boolean 函数不传任何参数时，会返回 false;</li>\n<li>包含 0 的字符串 “0” 是 true一些编程语言（比如 PHP）视 “0” 为 false。但在 JavaScript中，非空的字符串总是 true;</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert( <span class=\"built_in\">Boolean</span>(<span class=\"string\">&quot;0&quot;</span>) ); <span class=\"comment\">// true</span></span><br><span class=\"line\">alert( <span class=\"built_in\">Boolean</span>(<span class=\"string\">&quot; &quot;</span>) ); <span class=\"comment\">// 空白，也是 true（任何非空字符串都是 true）</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-原始值转对象\"><a href=\"#4-原始值转对象\" class=\"headerlink\" title=\"4 原始值转对象\"></a>4 原始值转对象</h4><p>原始值到对象的转换非常简单，原始值通过调用 String()、Number() 或者 Boolean() 构造函数，转换为它们各自的包装对象。</p>\n<p>null 和 undefined 属于例外，当将它们用在期望是一个对象的地方都会造成一个类型错误 (TypeError) 异常，而不会执行正常的转换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> b); <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）对象-gt-原始值\"><a href=\"#（2）对象-gt-原始值\" class=\"headerlink\" title=\"（2）对象 -&gt; 原始值\"></a>（2）对象 -&gt; 原始值</h3><h4 id=\"1-对象转布尔值\"><a href=\"#1-对象转布尔值\" class=\"headerlink\" title=\"1 对象转布尔值\"></a>1 对象转布尔值</h4><p>所有对象（包括函数和数组）的布尔值都是true.</p>\n<h4 id=\"2-对象转字符串和数字\"><a href=\"#2-对象转字符串和数字\" class=\"headerlink\" title=\"2 对象转字符串和数字\"></a>2 对象转字符串和数字</h4><p>对象到字符串和对象到数字的转换都是通过调用待转换对象的一个方法来完成的。而 JavaScript 对象有两个不同的方法来执行转换，一个是 toString，一个是 valueOf,这两个方法是真实暴露出来的方法。</p>\n<p>所有的对象除了 null 和 undefined 之外的任何值都具有 toString 方法。</p>\n<ol>\n<li>数组的 toString 方法将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并成结果字符串。</li>\n<li>函数的 toString 方法返回源代码字符串。</li>\n<li>日期的 toString 方法返回一个可读的日期和时间字符串。</li>\n<li>RegExp 的 toString 方法返回一个表示正则表达式直接量的字符串。</li>\n</ol>\n<p>而另一个转换对象的函数是 valueOf，表示对象的原始值。<strong>默认的 valueOf 方法返回这个对象本身，数组、函数、正则简单的继承了这个默认方法，也会返回对象本身</strong>。日期是一个例外，它会返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.valueOf()) <span class=\"comment\">// 1495296000000</span></span><br></pre></td></tr></table></figure>\n\n<p>更复杂的情况见参考文献[2],写的很详细，很简单易懂。</p>\n<h2 id=\"二、操作符强制类型转换\"><a href=\"#二、操作符强制类型转换\" class=\"headerlink\" title=\"二、操作符强制类型转换\"></a>二、操作符强制类型转换</h2><h3 id=\"1-一元操作符\"><a href=\"#1-一元操作符\" class=\"headerlink\" title=\"1 一元操作符 +\"></a>1 一元操作符 +</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(+[]); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+[<span class=\"string\">&#x27;1&#x27;</span>]); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+[<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+&#123;&#125;); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>执行的步骤是：</p>\n<ol>\n<li>如果 obj 为基本类型，直接返回</li>\n<li>否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</li>\n<li>否则，调用 toString 方法，如果返回一个原始值，则JavaScript 将其返回。</li>\n<li>否则，JavaScript 抛出一个类型错误异常。</li>\n</ol>\n<p>注意：前面讲过：默认的 valueOf 方法返回这个对象本身</p>\n<h3 id=\"2-二元操作符\"><a href=\"#2-二元操作符\" class=\"headerlink\" title=\"2 二元操作符 +\"></a>2 二元操作符 +</h3><p>当计算 value1 + value2时：</p>\n<ol>\n<li>lprim = ToPrimitive(value1)</li>\n<li>rprim = ToPrimitive(value2)</li>\n<li>如果 lprim 是字符串或者 rprim 是字符串，那么返回 ToString(lprim) 和 ToString(rprim)的拼接结果</li>\n<li>返回 ToNumber(lprim) 和 ToNumber(rprim)的运算结果</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"string\">&#x27;1&#x27;</span>); <span class=\"comment\">// 11（字符串）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> + <span class=\"number\">1</span>); <span class=\"comment\">// 1（数字）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] + []); <span class=\"comment\">// &#x27;&#x27;(空字符串)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] + &#123;&#125;); <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"literal\">true</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + &#123;&#125;); <span class=\"comment\">// &quot;[object Object][object Object]&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2017</span>, <span class=\"number\">04</span>, <span class=\"number\">21</span>) + <span class=\"number\">1</span>) <span class=\"comment\">// &quot;Sun May 21 2017 00:00:00 GMT+0800 (CST)1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-相等\"><a href=\"#3-相等\" class=\"headerlink\" title=\"3 ==相等\"></a>3 ==相等</h3><p>操作规则如下图：</p>\n<div align=\"center\">\n<img data-src=\"/posts/22254/1.jpg\" width=\"65%\">\n</div>\n\n\n\n\n\n\n<p>参考：<br>[1].<a href=\"https://zh.javascript.info/type-conversions\">类型转换</a><br>[2].<a href=\"https://github.com/mqyqingfeng/Blog/issues/159\">JavaScript 深入之头疼的类型转换(上)</a>  写的很细👍<br>[3].<a href=\"https://github.com/mqyqingfeng/Blog/issues/164\">JavaScript 深入之头疼的类型转换(下)</a></p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h2 id=\"一、类型转换\"><a href=\"#一、类型转换\" class=\"headerlink\" title=\"一、类型转换\"></a>一、类型转换</h2><h3 id=\"（1）原始值-gt-对象\"><a href=\"#（1）原始值-gt-对象\" class=\"headerlink\" title=\"（1）原始值 -&gt; 对象\"></a>（1）原始值 -&gt; 对象</h3><h4 id=\"1-原始值转字符串\"><a href=\"#1-原始值转字符串\" class=\"headerlink\" title=\"1 原始值转字符串\"></a>1 原始值转字符串</h4><p>String()</p>\n<h4 id=\"2-原始值转数字\"><a href=\"#2-原始值转数字\" class=\"headerlink\" title=\"2 原始值转数字\"></a>2 原始值转数字</h4><p>方法一：<br>Number()<br>方法二：<br>算数函数或表达式：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>变成……</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>undefined</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>null</td>\n<td>0</td>\n</tr>\n<tr>\n<td>true和false</td>\n<td>1 和 0</td>\n</tr>\n<tr>\n<td>string</td>\n<td>去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。</td>\n</tr>\n</tbody></table>\n<p>注意：<br>如果通过 Number 转换函数传入一个字符串，它会试图将其转换成一个整数或浮点数，而且会忽略所有前导的 0，如果有一个字符不是数字，结果都会返回 NaN，鉴于这种严格的判断，我们一般还会使用更加灵活的 parseInt 和 parseFloat 进行转换。</p>\n<p>parseInt 只解析整数，parseFloat 则可以解析整数和浮点数，如果字符串前缀是 “0x” 或者”0X”，parseInt 将其解释为十六进制数，parseInt 和 parseFloat 都会跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略后面的内容。如果第一个非空格字符是非法的数字直接量，将最终返回 NaN：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;3 abc&quot;</span>)) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;3.14 abc&quot;</span>)) <span class=\"comment\">// 3.14</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;-12.34&quot;</span>)) <span class=\"comment\">// -12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;0xFF&quot;</span>)) <span class=\"comment\">// 255</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseFloat</span>(<span class=\"string\">&quot;.1&quot;</span>)) <span class=\"comment\">// 0.1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;0.1&quot;</span>)) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-原始值转布尔类型\"><a href=\"#3-原始值转布尔类型\" class=\"headerlink\" title=\"3 原始值转布尔类型\"></a>3 原始值转布尔类型</h4><p>转换规则如下：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>变成……</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+0, -0, null, undefined, NaN, “”, false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>其他值</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>请注意:</p>\n<ul>\n<li>当 Boolean 函数不传任何参数时，会返回 false;</li>\n<li>包含 0 的字符串 “0” 是 true一些编程语言（比如 PHP）视 “0” 为 false。但在 JavaScript中，非空的字符串总是 true;</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert( <span class=\"built_in\">Boolean</span>(<span class=\"string\">&quot;0&quot;</span>) ); <span class=\"comment\">// true</span></span><br><span class=\"line\">alert( <span class=\"built_in\">Boolean</span>(<span class=\"string\">&quot; &quot;</span>) ); <span class=\"comment\">// 空白，也是 true（任何非空字符串都是 true）</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-原始值转对象\"><a href=\"#4-原始值转对象\" class=\"headerlink\" title=\"4 原始值转对象\"></a>4 原始值转对象</h4><p>原始值到对象的转换非常简单，原始值通过调用 String()、Number() 或者 Boolean() 构造函数，转换为它们各自的包装对象。</p>\n<p>null 和 undefined 属于例外，当将它们用在期望是一个对象的地方都会造成一个类型错误 (TypeError) 异常，而不会执行正常的转换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> b); <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"（2）对象-gt-原始值\"><a href=\"#（2）对象-gt-原始值\" class=\"headerlink\" title=\"（2）对象 -&gt; 原始值\"></a>（2）对象 -&gt; 原始值</h3><h4 id=\"1-对象转布尔值\"><a href=\"#1-对象转布尔值\" class=\"headerlink\" title=\"1 对象转布尔值\"></a>1 对象转布尔值</h4><p>所有对象（包括函数和数组）的布尔值都是true.</p>\n<h4 id=\"2-对象转字符串和数字\"><a href=\"#2-对象转字符串和数字\" class=\"headerlink\" title=\"2 对象转字符串和数字\"></a>2 对象转字符串和数字</h4><p>对象到字符串和对象到数字的转换都是通过调用待转换对象的一个方法来完成的。而 JavaScript 对象有两个不同的方法来执行转换，一个是 toString，一个是 valueOf,这两个方法是真实暴露出来的方法。</p>\n<p>所有的对象除了 null 和 undefined 之外的任何值都具有 toString 方法。</p>\n<ol>\n<li>数组的 toString 方法将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并成结果字符串。</li>\n<li>函数的 toString 方法返回源代码字符串。</li>\n<li>日期的 toString 方法返回一个可读的日期和时间字符串。</li>\n<li>RegExp 的 toString 方法返回一个表示正则表达式直接量的字符串。</li>\n</ol>\n<p>而另一个转换对象的函数是 valueOf，表示对象的原始值。<strong>默认的 valueOf 方法返回这个对象本身，数组、函数、正则简单的继承了这个默认方法，也会返回对象本身</strong>。日期是一个例外，它会返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.valueOf()) <span class=\"comment\">// 1495296000000</span></span><br></pre></td></tr></table></figure>\n\n<p>更复杂的情况见参考文献[2],写的很详细，很简单易懂。</p>\n<h2 id=\"二、操作符强制类型转换\"><a href=\"#二、操作符强制类型转换\" class=\"headerlink\" title=\"二、操作符强制类型转换\"></a>二、操作符强制类型转换</h2><h3 id=\"1-一元操作符\"><a href=\"#1-一元操作符\" class=\"headerlink\" title=\"1 一元操作符 +\"></a>1 一元操作符 +</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(+[]); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+[<span class=\"string\">&#x27;1&#x27;</span>]); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+[<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>]); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+&#123;&#125;); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>执行的步骤是：</p>\n<ol>\n<li>如果 obj 为基本类型，直接返回</li>\n<li>否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</li>\n<li>否则，调用 toString 方法，如果返回一个原始值，则JavaScript 将其返回。</li>\n<li>否则，JavaScript 抛出一个类型错误异常。</li>\n</ol>\n<p>注意：前面讲过：默认的 valueOf 方法返回这个对象本身</p>\n<h3 id=\"2-二元操作符\"><a href=\"#2-二元操作符\" class=\"headerlink\" title=\"2 二元操作符 +\"></a>2 二元操作符 +</h3><p>当计算 value1 + value2时：</p>\n<ol>\n<li>lprim = ToPrimitive(value1)</li>\n<li>rprim = ToPrimitive(value2)</li>\n<li>如果 lprim 是字符串或者 rprim 是字符串，那么返回 ToString(lprim) 和 ToString(rprim)的拼接结果</li>\n<li>返回 ToNumber(lprim) 和 ToNumber(rprim)的运算结果</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"string\">&#x27;1&#x27;</span>); <span class=\"comment\">// 11（字符串）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> + <span class=\"number\">1</span>); <span class=\"comment\">// 1（数字）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] + []); <span class=\"comment\">// &#x27;&#x27;(空字符串)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log([] + &#123;&#125;); <span class=\"comment\">// [object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"literal\">true</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(&#123;&#125; + &#123;&#125;); <span class=\"comment\">// &quot;[object Object][object Object]&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2017</span>, <span class=\"number\">04</span>, <span class=\"number\">21</span>) + <span class=\"number\">1</span>) <span class=\"comment\">// &quot;Sun May 21 2017 00:00:00 GMT+0800 (CST)1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-相等\"><a href=\"#3-相等\" class=\"headerlink\" title=\"3 ==相等\"></a>3 ==相等</h3><p>操作规则如下图：</p>\n<div align=\"center\">\n<img src=\"/posts/22254/1.jpg\" width=\"65%\">\n</div>\n\n\n\n\n\n\n<p>参考：<br>[1].<a href=\"https://zh.javascript.info/type-conversions\">类型转换</a><br>[2].<a href=\"https://github.com/mqyqingfeng/Blog/issues/159\">JavaScript 深入之头疼的类型转换(上)</a>  写的很细👍<br>[3].<a href=\"https://github.com/mqyqingfeng/Blog/issues/164\">JavaScript 深入之头疼的类型转换(下)</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/posts/22254/1.jpg","popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"JS基础（二）","path":"posts/22254/","eyeCatchImage":"/posts/22254/1.jpg","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-10-21T15:04:23.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-10-21T15:04:23.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JavaScript"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2703},{"title":"Promise(一)—顺序请求","copyright":true,"comments":1,"abbrlink":49376,"date":"2021-02-23T06:58:30.000Z","_content":"\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n### Promise顺序请求\n\n方法1——连续使用then链式调用\n方法2——使用promise构建队列\n方法3——使用async、await实现类似同步编程，async函数内部实现同步\n参考：https://www.jianshu.com/p/dbda3053da20\n\n#### 方法1：链式调用\n\n```javascript\nfunction getA(){\n    return  new Promise(function(resolve, reject){ \n    setTimeout(function(){     \n          resolve(2);\n      }, 1000);\n  });\n}\n \nfunction getB(){\n    return  new Promise(function(resolve, reject){       \n        setTimeout(function(){\n            resolve(3);\n        }, 1000);\n    });\n}\n \nfunction addAB(a,b){\n    return a+b\n}\n\nfunction getResult(){\n    var  obj={};\n    Promise.resolve().then(function(){\n        return  getA() \n    })\n    .then(function(a){\n         obj.a=a;\n    })\n    .then(function(){\n        return getB() \n    })\n    .then(function(b){\n         obj.b=b;\n         return obj;\n    })\n    .then(function(obj){\n       return  addAB(obj['a'],obj['b'])\n    })\n    .then(data=>{\n        console.log(data)\n    })\n    .catch(e => console.log(e));\n}\ngetResult();\n```\n#### 方法2：（TODO）\n#### 方法3：（TODO）\n\n\n","source":"_posts/Promise1.md","raw":"---\ntitle: Promise(一)—顺序请求\ntags: Promise\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 49376\ndate: 2021-02-23 14:58:30\n---\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n### Promise顺序请求\n\n方法1——连续使用then链式调用\n方法2——使用promise构建队列\n方法3——使用async、await实现类似同步编程，async函数内部实现同步\n参考：https://www.jianshu.com/p/dbda3053da20\n\n#### 方法1：链式调用\n\n```javascript\nfunction getA(){\n    return  new Promise(function(resolve, reject){ \n    setTimeout(function(){     \n          resolve(2);\n      }, 1000);\n  });\n}\n \nfunction getB(){\n    return  new Promise(function(resolve, reject){       \n        setTimeout(function(){\n            resolve(3);\n        }, 1000);\n    });\n}\n \nfunction addAB(a,b){\n    return a+b\n}\n\nfunction getResult(){\n    var  obj={};\n    Promise.resolve().then(function(){\n        return  getA() \n    })\n    .then(function(a){\n         obj.a=a;\n    })\n    .then(function(){\n        return getB() \n    })\n    .then(function(b){\n         obj.b=b;\n         return obj;\n    })\n    .then(function(obj){\n       return  addAB(obj['a'],obj['b'])\n    })\n    .then(data=>{\n        console.log(data)\n    })\n    .catch(e => console.log(e));\n}\ngetResult();\n```\n#### 方法2：（TODO）\n#### 方法3：（TODO）\n\n\n","slug":"Promise1","published":1,"updated":"2022-07-13T01:47:21.864Z","layout":"post","photos":[],"link":"","_id":"clqdf8ht8000m44t19n03gevd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise顺序请求\"><a href=\"#Promise顺序请求\" class=\"headerlink\" title=\"Promise顺序请求\"></a>Promise顺序请求</h3><p>方法1——连续使用then链式调用<br>方法2——使用promise构建队列<br>方法3——使用async、await实现类似同步编程，async函数内部实现同步<br>参考：<a href=\"https://www.jianshu.com/p/dbda3053da20\">https://www.jianshu.com/p/dbda3053da20</a></p>\n<h4 id=\"方法1：链式调用\"><a href=\"#方法1：链式调用\" class=\"headerlink\" title=\"方法1：链式调用\"></a>方法1：链式调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </span><br><span class=\"line\">          resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;       </span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAB</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span>  obj=&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  getA() </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">         obj.a=a;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getB() </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">         obj.b=b;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>  addAB(obj[<span class=\"string\">&#x27;a&#x27;</span>],obj[<span class=\"string\">&#x27;b&#x27;</span>])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getResult();</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2：（TODO）\"><a href=\"#方法2：（TODO）\" class=\"headerlink\" title=\"方法2：（TODO）\"></a>方法2：（TODO）</h4><h4 id=\"方法3：（TODO）\"><a href=\"#方法3：（TODO）\" class=\"headerlink\" title=\"方法3：（TODO）\"></a>方法3：（TODO）</h4>","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise顺序请求\"><a href=\"#Promise顺序请求\" class=\"headerlink\" title=\"Promise顺序请求\"></a>Promise顺序请求</h3><p>方法1——连续使用then链式调用<br>方法2——使用promise构建队列<br>方法3——使用async、await实现类似同步编程，async函数内部实现同步<br>参考：<a href=\"https://www.jianshu.com/p/dbda3053da20\">https://www.jianshu.com/p/dbda3053da20</a></p>\n<h4 id=\"方法1：链式调用\"><a href=\"#方法1：链式调用\" class=\"headerlink\" title=\"方法1：链式调用\"></a>方法1：链式调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </span><br><span class=\"line\">          resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;       </span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAB</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span>  obj=&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  getA() </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">         obj.a=a;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getB() </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">         obj.b=b;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>  addAB(obj[<span class=\"string\">&#x27;a&#x27;</span>],obj[<span class=\"string\">&#x27;b&#x27;</span>])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getResult();</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2：（TODO）\"><a href=\"#方法2：（TODO）\" class=\"headerlink\" title=\"方法2：（TODO）\"></a>方法2：（TODO）</h4><h4 id=\"方法3：（TODO）\"><a href=\"#方法3：（TODO）\" class=\"headerlink\" title=\"方法3：（TODO）\"></a>方法3：（TODO）</h4>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"Promise(一)—顺序请求","path":"posts/49376/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-02-23T06:58:30.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-23T06:58:30.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["Promise"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":985},{"title":"Vue2-模板编译","copyright":true,"comments":1,"abbrlink":38405,"date":"2022-03-29T02:08:35.000Z","_content":"\n### 是什么？\n把用户在模板中写的类似于原生html的内容进行编译。把原生html和非原生html找出，经过一系列处理成render函数的过程称为模板编译过程。\n\n最终目的就是：把用户所写的模板转化成供Vue实例在挂载时可调用的render函数。或者你可以这样简单的理解为：模板编译就是一台机器，给它输入模板字符串，它就输出对应的render函数。\n\n其中有三个阶段：\n1.代码解析阶段：将一堆模板字符串用正则的方式解析成抽象语法树（AST）；\n2.代码优化阶段：遍历AST进行静态节点的标记；\n3.代码生成阶段：将AST转换成render函数；\n\n<div align=center>\n<img src=\"2.png\" width = 60%>\n</div>\n\n### 1.代码解析阶段\nHTML解析器是主线，先用HTML解析器进行解析整个模板，在解析过程中如果碰到文本内容，那就调用文本解析器来解析文本，如果碰到文本中包含过滤器那就调用过滤器解析器来解析。\n\n<div align=center>\n<img src=\"1.png\" width = 60%>\n</div>\n\nHTML解析器：一边解析不同的内容一边调用对应的钩子函数生成对应的AST节点，最终完成将整个模板字符串转化成AST；\n文本解析器：作用就是将HTML解析器解析得到的文本内容进行二次解析，解析文本内容中是否包含变量，如果包含变量，则将变量提取出来进行加工，为后续生产render函数做准备；\n\n在解析过程中会给标签标记上type类型，便于后面的优化阶段；\ntype=1: 元素节点\ntype=2: 包含变量的节点\ntype=3: 纯文本节点\n\n\n### 2.代码优化阶段\n打静态标记的目的是为后面虚拟dom做diff算法也就是patch时，跳过静态节点，提高性能；\n\n优化阶段干了两件事：\n1.在AST中找出所有静态节点并打上标记；\n2.在AST中找出所有静态根节点并打上标记；\n\n打标记会根据type类型进行处理；若type=3, 一定是静态节点；若type=2,一定是非静态；若type=3，再继续深层遍历；\n\n### 3.代码生成阶段\n所谓代码生成其实就是根据模板对应的抽象语法树AST生成一个函数，通过调用这个函数就可以得到模板对应的虚拟DOM。\n\n\n\n见本人CSDN：[【vue源码】模板编译](https://blog.csdn.net/liuhp123/article/details/117534737?spm=1001.2014.3001.5501)\n\n","source":"_posts/Vue2-模板编译.md","raw":"---\ntitle: Vue2-模板编译\ntags: Vue\ncategories: Vue\ncopyright: true\ncomments: true\nabbrlink: 38405\ndate: 2022-03-29 10:08:35\n---\n\n### 是什么？\n把用户在模板中写的类似于原生html的内容进行编译。把原生html和非原生html找出，经过一系列处理成render函数的过程称为模板编译过程。\n\n最终目的就是：把用户所写的模板转化成供Vue实例在挂载时可调用的render函数。或者你可以这样简单的理解为：模板编译就是一台机器，给它输入模板字符串，它就输出对应的render函数。\n\n其中有三个阶段：\n1.代码解析阶段：将一堆模板字符串用正则的方式解析成抽象语法树（AST）；\n2.代码优化阶段：遍历AST进行静态节点的标记；\n3.代码生成阶段：将AST转换成render函数；\n\n<div align=center>\n<img src=\"2.png\" width = 60%>\n</div>\n\n### 1.代码解析阶段\nHTML解析器是主线，先用HTML解析器进行解析整个模板，在解析过程中如果碰到文本内容，那就调用文本解析器来解析文本，如果碰到文本中包含过滤器那就调用过滤器解析器来解析。\n\n<div align=center>\n<img src=\"1.png\" width = 60%>\n</div>\n\nHTML解析器：一边解析不同的内容一边调用对应的钩子函数生成对应的AST节点，最终完成将整个模板字符串转化成AST；\n文本解析器：作用就是将HTML解析器解析得到的文本内容进行二次解析，解析文本内容中是否包含变量，如果包含变量，则将变量提取出来进行加工，为后续生产render函数做准备；\n\n在解析过程中会给标签标记上type类型，便于后面的优化阶段；\ntype=1: 元素节点\ntype=2: 包含变量的节点\ntype=3: 纯文本节点\n\n\n### 2.代码优化阶段\n打静态标记的目的是为后面虚拟dom做diff算法也就是patch时，跳过静态节点，提高性能；\n\n优化阶段干了两件事：\n1.在AST中找出所有静态节点并打上标记；\n2.在AST中找出所有静态根节点并打上标记；\n\n打标记会根据type类型进行处理；若type=3, 一定是静态节点；若type=2,一定是非静态；若type=3，再继续深层遍历；\n\n### 3.代码生成阶段\n所谓代码生成其实就是根据模板对应的抽象语法树AST生成一个函数，通过调用这个函数就可以得到模板对应的虚拟DOM。\n\n\n\n见本人CSDN：[【vue源码】模板编译](https://blog.csdn.net/liuhp123/article/details/117534737?spm=1001.2014.3001.5501)\n\n","slug":"Vue2-模板编译","published":1,"updated":"2022-07-13T01:47:21.876Z","layout":"post","photos":[],"link":"","_id":"clqdf8ht9000r44t17cptfsz8","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h3><p>把用户在模板中写的类似于原生html的内容进行编译。把原生html和非原生html找出，经过一系列处理成render函数的过程称为模板编译过程。</p>\n<p>最终目的就是：把用户所写的模板转化成供Vue实例在挂载时可调用的render函数。或者你可以这样简单的理解为：模板编译就是一台机器，给它输入模板字符串，它就输出对应的render函数。</p>\n<p>其中有三个阶段：<br>1.代码解析阶段：将一堆模板字符串用正则的方式解析成抽象语法树（AST）；<br>2.代码优化阶段：遍历AST进行静态节点的标记；<br>3.代码生成阶段：将AST转换成render函数；</p>\n<div align=\"center\">\n<img data-src=\"/posts/38405/2.png\" width=\"60%\">\n</div>\n\n<h3 id=\"1-代码解析阶段\"><a href=\"#1-代码解析阶段\" class=\"headerlink\" title=\"1.代码解析阶段\"></a>1.代码解析阶段</h3><p>HTML解析器是主线，先用HTML解析器进行解析整个模板，在解析过程中如果碰到文本内容，那就调用文本解析器来解析文本，如果碰到文本中包含过滤器那就调用过滤器解析器来解析。</p>\n<div align=\"center\">\n<img data-src=\"/posts/38405/1.png\" width=\"60%\">\n</div>\n\n<p>HTML解析器：一边解析不同的内容一边调用对应的钩子函数生成对应的AST节点，最终完成将整个模板字符串转化成AST；<br>文本解析器：作用就是将HTML解析器解析得到的文本内容进行二次解析，解析文本内容中是否包含变量，如果包含变量，则将变量提取出来进行加工，为后续生产render函数做准备；</p>\n<p>在解析过程中会给标签标记上type类型，便于后面的优化阶段；<br>type=1: 元素节点<br>type=2: 包含变量的节点<br>type=3: 纯文本节点</p>\n<h3 id=\"2-代码优化阶段\"><a href=\"#2-代码优化阶段\" class=\"headerlink\" title=\"2.代码优化阶段\"></a>2.代码优化阶段</h3><p>打静态标记的目的是为后面虚拟dom做diff算法也就是patch时，跳过静态节点，提高性能；</p>\n<p>优化阶段干了两件事：<br>1.在AST中找出所有静态节点并打上标记；<br>2.在AST中找出所有静态根节点并打上标记；</p>\n<p>打标记会根据type类型进行处理；若type=3, 一定是静态节点；若type=2,一定是非静态；若type=3，再继续深层遍历；</p>\n<h3 id=\"3-代码生成阶段\"><a href=\"#3-代码生成阶段\" class=\"headerlink\" title=\"3.代码生成阶段\"></a>3.代码生成阶段</h3><p>所谓代码生成其实就是根据模板对应的抽象语法树AST生成一个函数，通过调用这个函数就可以得到模板对应的虚拟DOM。</p>\n<p>见本人CSDN：<a href=\"https://blog.csdn.net/liuhp123/article/details/117534737?spm=1001.2014.3001.5501\">【vue源码】模板编译</a></p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h3><p>把用户在模板中写的类似于原生html的内容进行编译。把原生html和非原生html找出，经过一系列处理成render函数的过程称为模板编译过程。</p>\n<p>最终目的就是：把用户所写的模板转化成供Vue实例在挂载时可调用的render函数。或者你可以这样简单的理解为：模板编译就是一台机器，给它输入模板字符串，它就输出对应的render函数。</p>\n<p>其中有三个阶段：<br>1.代码解析阶段：将一堆模板字符串用正则的方式解析成抽象语法树（AST）；<br>2.代码优化阶段：遍历AST进行静态节点的标记；<br>3.代码生成阶段：将AST转换成render函数；</p>\n<div align=\"center\">\n<img src=\"/posts/38405/2.png\" width=\"60%\">\n</div>\n\n<h3 id=\"1-代码解析阶段\"><a href=\"#1-代码解析阶段\" class=\"headerlink\" title=\"1.代码解析阶段\"></a>1.代码解析阶段</h3><p>HTML解析器是主线，先用HTML解析器进行解析整个模板，在解析过程中如果碰到文本内容，那就调用文本解析器来解析文本，如果碰到文本中包含过滤器那就调用过滤器解析器来解析。</p>\n<div align=\"center\">\n<img src=\"/posts/38405/1.png\" width=\"60%\">\n</div>\n\n<p>HTML解析器：一边解析不同的内容一边调用对应的钩子函数生成对应的AST节点，最终完成将整个模板字符串转化成AST；<br>文本解析器：作用就是将HTML解析器解析得到的文本内容进行二次解析，解析文本内容中是否包含变量，如果包含变量，则将变量提取出来进行加工，为后续生产render函数做准备；</p>\n<p>在解析过程中会给标签标记上type类型，便于后面的优化阶段；<br>type=1: 元素节点<br>type=2: 包含变量的节点<br>type=3: 纯文本节点</p>\n<h3 id=\"2-代码优化阶段\"><a href=\"#2-代码优化阶段\" class=\"headerlink\" title=\"2.代码优化阶段\"></a>2.代码优化阶段</h3><p>打静态标记的目的是为后面虚拟dom做diff算法也就是patch时，跳过静态节点，提高性能；</p>\n<p>优化阶段干了两件事：<br>1.在AST中找出所有静态节点并打上标记；<br>2.在AST中找出所有静态根节点并打上标记；</p>\n<p>打标记会根据type类型进行处理；若type=3, 一定是静态节点；若type=2,一定是非静态；若type=3，再继续深层遍历；</p>\n<h3 id=\"3-代码生成阶段\"><a href=\"#3-代码生成阶段\" class=\"headerlink\" title=\"3.代码生成阶段\"></a>3.代码生成阶段</h3><p>所谓代码生成其实就是根据模板对应的抽象语法树AST生成一个函数，通过调用这个函数就可以得到模板对应的虚拟DOM。</p>\n<p>见本人CSDN：<a href=\"https://blog.csdn.net/liuhp123/article/details/117534737?spm=1001.2014.3001.5501\">【vue源码】模板编译</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/posts/38405/2.png","popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"Vue2-模板编译","path":"posts/38405/","eyeCatchImage":"/posts/38405/2.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-03-29T02:08:35.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-03-29T02:08:35.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue","tags":["Vue"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":819},{"title":"Promise(三)-核心源码","copyright":true,"comments":1,"abbrlink":31155,"date":"2021-02-23T06:58:30.000Z","_content":"<!-- <img src=\"https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg\" width=\"100%\" height=\"480px\"> -->\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n\n### 源码讲解\n\n类写法：\n#### step1 - 同步非链式调用\n```javascript\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\n\nClass MyPromise {\n  constructor(handle) {\n    // 定义变量\n    this.status = 'PENDING' // 状态\n    this.value = undefined  // 成功状态的变量\n    this.reason = undefined  // 失败状态的失败原因\n    \n    // 成功时改变状态，并赋值value\n    let resolve = (val) => {\n      if (this.status === PENDING) {\n        this.status = FULFILLED\n        this.value = val\n      }\n    }\n    // 失败时改变状态，并赋值reason\n    let reject = (reason) => {\n      if (this.status === PENDING) {\n        this.status = REJECTED\n        this.reason = reason\n      }\n    }\n    // catch住当前同步代码的错误\n    try {\n      handle(resolve, reject)\n    }catch (err) {\n      reject(err)\n    }\n  }\n\n  // then时根据状态执行回调\n  then(onFulfilled, onRejected) {\n    if (this.status = FULFILLED) {\n      onFulfilled(this.value)\n    }\n    if (this.status = REJECTED) {\n      onRejected(this.reason)\n    }\n  }\n}\n// 此时还不能链式调用\n```\n使用示例：\n```javascript\nfunction test() {\n  return new MyPromise((resolve, reject) => {\n    resolve(100)\n  })\n}\nconst p1 = test()\np1.then((res) => {\n  console.log(res)\n})\n```\n\n构造函数写法：\n```javascript\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\n\nfunction MyPromise() {\n  // 定义变量\n  this.status = 'PENDING' // 状态\n  this.value = undefined  // 成功状态的变量\n  this.reason = undefined  // 失败状态的失败原因\n  \n  // 成功时改变状态，并赋值value\n  let resolve = (val) => {\n    if (this.status === PENDING) {\n      this.status = FULFILLED\n      this.value = val\n    }\n  }\n  // 失败时改变状态，并赋值reason\n  let reject = (reason) => {\n    if (this.status === PENDING) {\n      this.status = REJECTED\n      this.reason = reason\n    }\n  }\n  \n  // catch住当前同步代码的错误\n  try {\n    handle(resolve, reject)\n  }catch (err) {\n    reject(err)\n  }\n}\n// TODO  then方法\n```\n\n#### step2 - 加入异步\n\n```javascript\n// 示例\nfunction test() {\n  return new MyPromise((resolve, reject) => {\n    // 异步调用，该如何处理then方法？\n    setTimeout(() => {\n      resolve(100)\n    }, 1000)\n  })\n}\nconst p1 = test()\np1.then((res) => {\n  console.log(res)\n})\n``` \n\n```javascript\n//源码\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\n\nClass MyPromise {\n  constructor(handle) {\n    // 定义变量\n    this.status = 'PENDING' // 状态\n    this.value = undefined  // 成功状态的变量\n    this.reason = undefined  // 失败状态的失败原因\n    // changed-begin\n    this.resolveCbs = [] // 存放成功回调\n    this.rejectCbs = [] // 存放失败回调\n    // changed-end\n    \n    // 成功时改变状态，并赋值value\n    let resolve = (val) => {\n      if (this.status === PENDING) {\n        this.status = FULFILLED\n        this.value = val\n        // changed -->\n         this.resolveCbs.forEach((fn) => fn())\n      }\n    }\n    // 失败时改变状态，并赋值reason\n    let reject = (reason) => {\n      if (this.status === PENDING) {\n        this.status = REJECTED\n        this.reason = reason\n        // changed -->\n        this.rejectCbs.forEach((fn) => fn())\n      }\n    }\n    // catch住当前同步代码的错误\n    try {\n      handle(resolve, reject)\n    }catch (err) {\n      reject(err)\n    }\n  }\n\n  // then时根据状态执行回调\n  then(onFulfilled, onRejected) {\n    if (this.status = FULFILLED) {\n      onFulfilled(this.value)\n    }\n    if (this.status = REJECTED) {\n      onRejected(this.reason)\n    }\n    // 异步调用，该如何处理then方法？异步时，此时状态为pending, 需要将回调函数存起来，等待时机到了再拿出来执行\n    // changed-begin -->\n    if (this.status = PENDING) {\n      this.resolveCbs.push(() => {\n        onFulfilled(this.value)\n      })\n      this.rejectCbs.push(() => {\n        onRejected(this.reason)\n      })\n    }\n    // changed-end -->\n  }\n}\n```\n\n#### step3 - 加入链式调用\n\n```javascript\n// 示例\nfunction test() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(100);\n    }, 1000);\n  });\n}\n\nvar p1 = test();\n// p1 => resolve(100) =>  p1.then(res)  res => 100;\n// p2  => resolve(res)  =>  p2.then(res) => res ??\n\nvar p2 = p1.then(\n  res => {\n    // return {\n    //   then(resolve, reject) {\n    //     reject(100000);\n    //   }\n    // };\n    return new MyPromise((resolve, reject) => {\n      resolve(\n        new MyPromise((resolve, reject) => {\n          resolve(\n            new MyPromise((resolve, reject) => {\n              resolve(100000000000);\n            })\n          );\n        })\n      );\n    });\n  },\n  err => console.log(err)\n);\n\np2.then(\n  res => {\n    console.log(res);\n  },\n  err => {\n    console.log(err);\n  }\n);\n```\n```javascript\n//源码\nconst PENDING = \"pending\",\n  FULFILLED = \"fulfilled\",\n  REJECTED = \"rejected\";\n\nclass MyPromise {\n  constructor(executor) {\n    this.state = PENDING;\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n\n    let resolve = value => {\n      if (this.state === PENDING) {\n        this.state = FULFILLED;\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn => fn());\n      }\n    };\n\n    let reject = reason => {\n      if (this.state === PENDING) {\n        this.state = REJECTED;\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn => fn());\n      }\n    };\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n\n  then(onFulFilled, onRejected) {\n    let p2 = new MyPromise((resolve, reject) => {\n      let x;\n      if (this.state === FULFILLED) {\n        setTimeout(() => {\n          x = onFulFilled(this.value);\n          //resolve(x);\n\n          resolvePromise(p2, x, resolve, reject);\n\n          // x 决定 了 p2 的状态, resolve(x)或者 reject(x)；\n        }, 0);\n      }\n\n      if (this.state === REJECTED) {\n        x = onRejected(this.reason);\n        resolvePromise(p2, x, resolve, reject);\n      }\n\n      if (this.state === PENDING) {\n        this.onResolvedCallbacks.push(() => {\n          x = onFulFilled(this.value);\n          resolvePromise(p2, x, resolve, reject);\n        });\n        this.onRejectedCallbacks.push(() => {\n          x = onRejected(this.reason);\n          resolvePromise(p2, x, resolve, reject);\n        });\n      }\n    });\n\n    return p2;\n  }\n}\n\nfunction resolvePromise(p2, x, resolve, reject) {\n  if (p2 === x) {\n    return new Error(\"引用错误\");\n  }\n  // thenable 对象;  blueBird q;\n  if ((typeof x === \"object\" && x !== null) || typeof x === \"function\") {\n    try {\n      let then = x.then;\n      if (typeof then === \"function\") {\n        then.call(\n          x,\n          y => {\n            resolvePromise(p2, y, resolve, reject);\n          },\n          err => {\n            reject(err);\n          }\n        );\n      }\n    } catch (err) {\n      reject(err);\n    }\n  } else {\n    resolve(x);\n  }\n}\n```\n### Promise 完整核心源码\n\n参考：https://www.jianshu.com/p/43de678e918a\n\n```javascript\n  // 判断变量否为function\n  const isFunction = variable => typeof variable === 'function'\n  // 定义Promise的三种状态常量\n  const PENDING = 'PENDING'\n  const FULFILLED = 'FULFILLED'\n  const REJECTED = 'REJECTED'\n\n  class MyPromise {\n    constructor (handle) {\n      if (!isFunction(handle)) {\n        throw new Error('MyPromise must accept a function as a parameter')\n      }\n      // 添加状态\n      this._status = PENDING\n      // 添加状态\n      this._value = undefined\n      // 添加成功回调函数队列\n      this._fulfilledQueues = []\n      // 添加失败回调函数队列\n      this._rejectedQueues = []\n      // 执行handle\n      try {\n        handle(this._resolve.bind(this), this._reject.bind(this)) \n      } catch (err) {\n        this._reject(err)\n      }\n    }\n    // 添加resovle时执行的函数\n    _resolve (val) {\n      const run = () => {\n        if (this._status !== PENDING) return\n        this._status = FULFILLED\n        // 依次执行成功队列中的函数，并清空队列\n        const runFulfilled = (value) => {\n          let cb;\n          while (cb = this._fulfilledQueues.shift()) {\n            cb(value)\n          }\n        }\n        // 依次执行失败队列中的函数，并清空队列\n        const runRejected = (error) => {\n          let cb;\n          while (cb = this._rejectedQueues.shift()) {\n            cb(error)\n          }\n        }\n        /* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n          当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态\n        */\n        if (val instanceof MyPromise) {\n          val.then(value => {\n            this._value = value\n            runFulfilled(value)\n          }, err => {\n            this._value = err\n            runRejected(err)\n          })\n        } else {\n          this._value = val\n          runFulfilled(val)\n        }\n      }\n      // 为了支持同步的Promise，这里采用异步调用\n      setTimeout(run, 0)\n    }\n    // 添加reject时执行的函数\n    _reject (err) { \n      if (this._status !== PENDING) return\n      // 依次执行失败队列中的函数，并清空队列\n      const run = () => {\n        this._status = REJECTED\n        this._value = err\n        let cb;\n        while (cb = this._rejectedQueues.shift()) {\n          cb(err)\n        }\n      }\n      // 为了支持同步的Promise，这里采用异步调用\n      setTimeout(run, 0)\n    }\n    // 添加then方法\n    then (onFulfilled, onRejected) {\n      const { _value, _status } = this\n      // 返回一个新的Promise对象\n      return new MyPromise((onFulfilledNext, onRejectedNext) => {\n        // 封装一个成功时执行的函数\n        let fulfilled = value => {\n          try {\n            if (!isFunction(onFulfilled)) {\n              onFulfilledNext(value)\n            } else {\n              let res =  onFulfilled(value);\n              if (res instanceof MyPromise) {\n                // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                res.then(onFulfilledNext, onRejectedNext)\n              } else {\n                //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                onFulfilledNext(res)\n              }\n            }\n          } catch (err) {\n            // 如果函数执行出错，新的Promise对象的状态为失败\n            onRejectedNext(err)\n          }\n        }\n        // 封装一个失败时执行的函数\n        let rejected = error => {\n          try {\n            if (!isFunction(onRejected)) {\n              onRejectedNext(error)\n            } else {\n                let res = onRejected(error);\n                if (res instanceof MyPromise) {\n                  // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                  res.then(onFulfilledNext, onRejectedNext)\n                } else {\n                  //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                  onFulfilledNext(res)\n                }\n            }\n          } catch (err) {\n            // 如果函数执行出错，新的Promise对象的状态为失败\n            onRejectedNext(err)\n          }\n        }\n        switch (_status) {\n          // 当状态为pending时，将then方法回调函数加入执行队列等待执行\n          case PENDING:\n            this._fulfilledQueues.push(fulfilled)\n            this._rejectedQueues.push(rejected)\n            break\n          // 当状态已经改变时，立即执行对应的回调函数\n          case FULFILLED:\n            fulfilled(_value)\n            break\n          case REJECTED:\n            rejected(_value)\n            break\n        }\n      })\n    }\n    // 添加catch方法\n    catch (onRejected) {\n      return this.then(undefined, onRejected)\n    }\n    // 添加静态resolve方法\n    static resolve (value) {\n      // 如果参数是MyPromise实例，直接返回这个实例\n      if (value instanceof MyPromise) return value\n      return new MyPromise(resolve => resolve(value))\n    }\n    // 添加静态reject方法\n    static reject (value) {\n      return new MyPromise((resolve ,reject) => reject(value))\n    }\n    // 添加静态all方法\n    static all (list) {\n      return new MyPromise((resolve, reject) => {\n        /**\n         * 返回值的集合\n         */\n        let values = []\n        let count = 0\n        for (let [i, p] of list.entries()) {\n          // 数组参数如果不是MyPromise实例，先调用MyPromise.resolve\n          this.resolve(p).then(res => {\n            values[i] = res\n            count++\n            // 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled\n            if (count === list.length) resolve(values)\n          }, err => {\n            // 有一个被rejected时返回的MyPromise状态就变成rejected\n            reject(err)\n          })\n        }\n      })\n    }\n    // 添加静态race方法\n    static race (list) {\n      return new MyPromise((resolve, reject) => {\n        for (let p of list) {\n          // 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变\n          this.resolve(p).then(res => {\n            resolve(res)\n          }, err => {\n            reject(err)\n          })\n        }\n      })\n    }\n    finally (cb) {\n      return this.then(\n        value  => MyPromise.resolve(cb()).then(() => value),\n        reason => MyPromise.resolve(cb()).then(() => { throw reason })\n      );\n    }\n  }\n```\n\n","source":"_posts/Promise3.md","raw":"---\ntitle: Promise(三)-核心源码\ntags: Promise\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 31155\ndate: 2021-02-23 14:58:30\n---\n<!-- <img src=\"https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg\" width=\"100%\" height=\"480px\"> -->\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n\n### 源码讲解\n\n类写法：\n#### step1 - 同步非链式调用\n```javascript\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\n\nClass MyPromise {\n  constructor(handle) {\n    // 定义变量\n    this.status = 'PENDING' // 状态\n    this.value = undefined  // 成功状态的变量\n    this.reason = undefined  // 失败状态的失败原因\n    \n    // 成功时改变状态，并赋值value\n    let resolve = (val) => {\n      if (this.status === PENDING) {\n        this.status = FULFILLED\n        this.value = val\n      }\n    }\n    // 失败时改变状态，并赋值reason\n    let reject = (reason) => {\n      if (this.status === PENDING) {\n        this.status = REJECTED\n        this.reason = reason\n      }\n    }\n    // catch住当前同步代码的错误\n    try {\n      handle(resolve, reject)\n    }catch (err) {\n      reject(err)\n    }\n  }\n\n  // then时根据状态执行回调\n  then(onFulfilled, onRejected) {\n    if (this.status = FULFILLED) {\n      onFulfilled(this.value)\n    }\n    if (this.status = REJECTED) {\n      onRejected(this.reason)\n    }\n  }\n}\n// 此时还不能链式调用\n```\n使用示例：\n```javascript\nfunction test() {\n  return new MyPromise((resolve, reject) => {\n    resolve(100)\n  })\n}\nconst p1 = test()\np1.then((res) => {\n  console.log(res)\n})\n```\n\n构造函数写法：\n```javascript\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\n\nfunction MyPromise() {\n  // 定义变量\n  this.status = 'PENDING' // 状态\n  this.value = undefined  // 成功状态的变量\n  this.reason = undefined  // 失败状态的失败原因\n  \n  // 成功时改变状态，并赋值value\n  let resolve = (val) => {\n    if (this.status === PENDING) {\n      this.status = FULFILLED\n      this.value = val\n    }\n  }\n  // 失败时改变状态，并赋值reason\n  let reject = (reason) => {\n    if (this.status === PENDING) {\n      this.status = REJECTED\n      this.reason = reason\n    }\n  }\n  \n  // catch住当前同步代码的错误\n  try {\n    handle(resolve, reject)\n  }catch (err) {\n    reject(err)\n  }\n}\n// TODO  then方法\n```\n\n#### step2 - 加入异步\n\n```javascript\n// 示例\nfunction test() {\n  return new MyPromise((resolve, reject) => {\n    // 异步调用，该如何处理then方法？\n    setTimeout(() => {\n      resolve(100)\n    }, 1000)\n  })\n}\nconst p1 = test()\np1.then((res) => {\n  console.log(res)\n})\n``` \n\n```javascript\n//源码\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\n\nClass MyPromise {\n  constructor(handle) {\n    // 定义变量\n    this.status = 'PENDING' // 状态\n    this.value = undefined  // 成功状态的变量\n    this.reason = undefined  // 失败状态的失败原因\n    // changed-begin\n    this.resolveCbs = [] // 存放成功回调\n    this.rejectCbs = [] // 存放失败回调\n    // changed-end\n    \n    // 成功时改变状态，并赋值value\n    let resolve = (val) => {\n      if (this.status === PENDING) {\n        this.status = FULFILLED\n        this.value = val\n        // changed -->\n         this.resolveCbs.forEach((fn) => fn())\n      }\n    }\n    // 失败时改变状态，并赋值reason\n    let reject = (reason) => {\n      if (this.status === PENDING) {\n        this.status = REJECTED\n        this.reason = reason\n        // changed -->\n        this.rejectCbs.forEach((fn) => fn())\n      }\n    }\n    // catch住当前同步代码的错误\n    try {\n      handle(resolve, reject)\n    }catch (err) {\n      reject(err)\n    }\n  }\n\n  // then时根据状态执行回调\n  then(onFulfilled, onRejected) {\n    if (this.status = FULFILLED) {\n      onFulfilled(this.value)\n    }\n    if (this.status = REJECTED) {\n      onRejected(this.reason)\n    }\n    // 异步调用，该如何处理then方法？异步时，此时状态为pending, 需要将回调函数存起来，等待时机到了再拿出来执行\n    // changed-begin -->\n    if (this.status = PENDING) {\n      this.resolveCbs.push(() => {\n        onFulfilled(this.value)\n      })\n      this.rejectCbs.push(() => {\n        onRejected(this.reason)\n      })\n    }\n    // changed-end -->\n  }\n}\n```\n\n#### step3 - 加入链式调用\n\n```javascript\n// 示例\nfunction test() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(100);\n    }, 1000);\n  });\n}\n\nvar p1 = test();\n// p1 => resolve(100) =>  p1.then(res)  res => 100;\n// p2  => resolve(res)  =>  p2.then(res) => res ??\n\nvar p2 = p1.then(\n  res => {\n    // return {\n    //   then(resolve, reject) {\n    //     reject(100000);\n    //   }\n    // };\n    return new MyPromise((resolve, reject) => {\n      resolve(\n        new MyPromise((resolve, reject) => {\n          resolve(\n            new MyPromise((resolve, reject) => {\n              resolve(100000000000);\n            })\n          );\n        })\n      );\n    });\n  },\n  err => console.log(err)\n);\n\np2.then(\n  res => {\n    console.log(res);\n  },\n  err => {\n    console.log(err);\n  }\n);\n```\n```javascript\n//源码\nconst PENDING = \"pending\",\n  FULFILLED = \"fulfilled\",\n  REJECTED = \"rejected\";\n\nclass MyPromise {\n  constructor(executor) {\n    this.state = PENDING;\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n\n    let resolve = value => {\n      if (this.state === PENDING) {\n        this.state = FULFILLED;\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn => fn());\n      }\n    };\n\n    let reject = reason => {\n      if (this.state === PENDING) {\n        this.state = REJECTED;\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn => fn());\n      }\n    };\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n\n  then(onFulFilled, onRejected) {\n    let p2 = new MyPromise((resolve, reject) => {\n      let x;\n      if (this.state === FULFILLED) {\n        setTimeout(() => {\n          x = onFulFilled(this.value);\n          //resolve(x);\n\n          resolvePromise(p2, x, resolve, reject);\n\n          // x 决定 了 p2 的状态, resolve(x)或者 reject(x)；\n        }, 0);\n      }\n\n      if (this.state === REJECTED) {\n        x = onRejected(this.reason);\n        resolvePromise(p2, x, resolve, reject);\n      }\n\n      if (this.state === PENDING) {\n        this.onResolvedCallbacks.push(() => {\n          x = onFulFilled(this.value);\n          resolvePromise(p2, x, resolve, reject);\n        });\n        this.onRejectedCallbacks.push(() => {\n          x = onRejected(this.reason);\n          resolvePromise(p2, x, resolve, reject);\n        });\n      }\n    });\n\n    return p2;\n  }\n}\n\nfunction resolvePromise(p2, x, resolve, reject) {\n  if (p2 === x) {\n    return new Error(\"引用错误\");\n  }\n  // thenable 对象;  blueBird q;\n  if ((typeof x === \"object\" && x !== null) || typeof x === \"function\") {\n    try {\n      let then = x.then;\n      if (typeof then === \"function\") {\n        then.call(\n          x,\n          y => {\n            resolvePromise(p2, y, resolve, reject);\n          },\n          err => {\n            reject(err);\n          }\n        );\n      }\n    } catch (err) {\n      reject(err);\n    }\n  } else {\n    resolve(x);\n  }\n}\n```\n### Promise 完整核心源码\n\n参考：https://www.jianshu.com/p/43de678e918a\n\n```javascript\n  // 判断变量否为function\n  const isFunction = variable => typeof variable === 'function'\n  // 定义Promise的三种状态常量\n  const PENDING = 'PENDING'\n  const FULFILLED = 'FULFILLED'\n  const REJECTED = 'REJECTED'\n\n  class MyPromise {\n    constructor (handle) {\n      if (!isFunction(handle)) {\n        throw new Error('MyPromise must accept a function as a parameter')\n      }\n      // 添加状态\n      this._status = PENDING\n      // 添加状态\n      this._value = undefined\n      // 添加成功回调函数队列\n      this._fulfilledQueues = []\n      // 添加失败回调函数队列\n      this._rejectedQueues = []\n      // 执行handle\n      try {\n        handle(this._resolve.bind(this), this._reject.bind(this)) \n      } catch (err) {\n        this._reject(err)\n      }\n    }\n    // 添加resovle时执行的函数\n    _resolve (val) {\n      const run = () => {\n        if (this._status !== PENDING) return\n        this._status = FULFILLED\n        // 依次执行成功队列中的函数，并清空队列\n        const runFulfilled = (value) => {\n          let cb;\n          while (cb = this._fulfilledQueues.shift()) {\n            cb(value)\n          }\n        }\n        // 依次执行失败队列中的函数，并清空队列\n        const runRejected = (error) => {\n          let cb;\n          while (cb = this._rejectedQueues.shift()) {\n            cb(error)\n          }\n        }\n        /* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n          当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态\n        */\n        if (val instanceof MyPromise) {\n          val.then(value => {\n            this._value = value\n            runFulfilled(value)\n          }, err => {\n            this._value = err\n            runRejected(err)\n          })\n        } else {\n          this._value = val\n          runFulfilled(val)\n        }\n      }\n      // 为了支持同步的Promise，这里采用异步调用\n      setTimeout(run, 0)\n    }\n    // 添加reject时执行的函数\n    _reject (err) { \n      if (this._status !== PENDING) return\n      // 依次执行失败队列中的函数，并清空队列\n      const run = () => {\n        this._status = REJECTED\n        this._value = err\n        let cb;\n        while (cb = this._rejectedQueues.shift()) {\n          cb(err)\n        }\n      }\n      // 为了支持同步的Promise，这里采用异步调用\n      setTimeout(run, 0)\n    }\n    // 添加then方法\n    then (onFulfilled, onRejected) {\n      const { _value, _status } = this\n      // 返回一个新的Promise对象\n      return new MyPromise((onFulfilledNext, onRejectedNext) => {\n        // 封装一个成功时执行的函数\n        let fulfilled = value => {\n          try {\n            if (!isFunction(onFulfilled)) {\n              onFulfilledNext(value)\n            } else {\n              let res =  onFulfilled(value);\n              if (res instanceof MyPromise) {\n                // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                res.then(onFulfilledNext, onRejectedNext)\n              } else {\n                //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                onFulfilledNext(res)\n              }\n            }\n          } catch (err) {\n            // 如果函数执行出错，新的Promise对象的状态为失败\n            onRejectedNext(err)\n          }\n        }\n        // 封装一个失败时执行的函数\n        let rejected = error => {\n          try {\n            if (!isFunction(onRejected)) {\n              onRejectedNext(error)\n            } else {\n                let res = onRejected(error);\n                if (res instanceof MyPromise) {\n                  // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                  res.then(onFulfilledNext, onRejectedNext)\n                } else {\n                  //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                  onFulfilledNext(res)\n                }\n            }\n          } catch (err) {\n            // 如果函数执行出错，新的Promise对象的状态为失败\n            onRejectedNext(err)\n          }\n        }\n        switch (_status) {\n          // 当状态为pending时，将then方法回调函数加入执行队列等待执行\n          case PENDING:\n            this._fulfilledQueues.push(fulfilled)\n            this._rejectedQueues.push(rejected)\n            break\n          // 当状态已经改变时，立即执行对应的回调函数\n          case FULFILLED:\n            fulfilled(_value)\n            break\n          case REJECTED:\n            rejected(_value)\n            break\n        }\n      })\n    }\n    // 添加catch方法\n    catch (onRejected) {\n      return this.then(undefined, onRejected)\n    }\n    // 添加静态resolve方法\n    static resolve (value) {\n      // 如果参数是MyPromise实例，直接返回这个实例\n      if (value instanceof MyPromise) return value\n      return new MyPromise(resolve => resolve(value))\n    }\n    // 添加静态reject方法\n    static reject (value) {\n      return new MyPromise((resolve ,reject) => reject(value))\n    }\n    // 添加静态all方法\n    static all (list) {\n      return new MyPromise((resolve, reject) => {\n        /**\n         * 返回值的集合\n         */\n        let values = []\n        let count = 0\n        for (let [i, p] of list.entries()) {\n          // 数组参数如果不是MyPromise实例，先调用MyPromise.resolve\n          this.resolve(p).then(res => {\n            values[i] = res\n            count++\n            // 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled\n            if (count === list.length) resolve(values)\n          }, err => {\n            // 有一个被rejected时返回的MyPromise状态就变成rejected\n            reject(err)\n          })\n        }\n      })\n    }\n    // 添加静态race方法\n    static race (list) {\n      return new MyPromise((resolve, reject) => {\n        for (let p of list) {\n          // 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变\n          this.resolve(p).then(res => {\n            resolve(res)\n          }, err => {\n            reject(err)\n          })\n        }\n      })\n    }\n    finally (cb) {\n      return this.then(\n        value  => MyPromise.resolve(cb()).then(() => value),\n        reason => MyPromise.resolve(cb()).then(() => { throw reason })\n      );\n    }\n  }\n```\n\n","slug":"Promise3","published":1,"updated":"2022-07-13T01:47:21.871Z","layout":"post","photos":[],"link":"","_id":"clqdf8hta000s44t1b4x0cry0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><!-- <img data-src=\"https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg\" width=\"100%\" height=\"480px\"> -->\n\n<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"源码讲解\"><a href=\"#源码讲解\" class=\"headerlink\" title=\"源码讲解\"></a>源码讲解</h3><p>类写法：</p>\n<h4 id=\"step1-同步非链式调用\"><a href=\"#step1-同步非链式调用\" class=\"headerlink\" title=\"step1 - 同步非链式调用\"></a>step1 - 同步非链式调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Class MyPromise &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">handle</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.status = <span class=\"string\">&#x27;PENDING&#x27;</span> <span class=\"comment\">// 状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 成功状态的变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 失败状态的失败原因</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 成功时改变状态，并赋值value</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = val</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 失败时改变状态，并赋值reason</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// catch住当前同步代码的错误</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      handle(resolve, reject)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// then时根据状态执行回调</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = FULFILLED) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = REJECTED) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 此时还不能链式调用</span></span><br></pre></td></tr></table></figure>\n<p>使用示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">100</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = test()</span><br><span class=\"line\">p1.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>构造函数写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyPromise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义变量</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.status = <span class=\"string\">&#x27;PENDING&#x27;</span> <span class=\"comment\">// 状态</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 成功状态的变量</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 失败状态的失败原因</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 成功时改变状态，并赋值value</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resolve = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.value = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 失败时改变状态，并赋值reason</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// catch住当前同步代码的错误</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    handle(resolve, reject)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    reject(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// TODO  then方法</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"step2-加入异步\"><a href=\"#step2-加入异步\" class=\"headerlink\" title=\"step2 - 加入异步\"></a>step2 - 加入异步</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步调用，该如何处理then方法？</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = test()</span><br><span class=\"line\">p1.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//源码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Class MyPromise &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">handle</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.status = <span class=\"string\">&#x27;PENDING&#x27;</span> <span class=\"comment\">// 状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 成功状态的变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 失败状态的失败原因</span></span><br><span class=\"line\">    <span class=\"comment\">// changed-begin</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.resolveCbs = [] <span class=\"comment\">// 存放成功回调</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.rejectCbs = [] <span class=\"comment\">// 存放失败回调</span></span><br><span class=\"line\">    <span class=\"comment\">// changed-end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 成功时改变状态，并赋值value</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = val</span><br><span class=\"line\">        <span class=\"comment\">// changed --&gt;</span></span><br><span class=\"line\">         <span class=\"built_in\">this</span>.resolveCbs.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 失败时改变状态，并赋值reason</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">        <span class=\"comment\">// changed --&gt;</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rejectCbs.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// catch住当前同步代码的错误</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      handle(resolve, reject)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// then时根据状态执行回调</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = FULFILLED) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = REJECTED) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 异步调用，该如何处理then方法？异步时，此时状态为pending, 需要将回调函数存起来，等待时机到了再拿出来执行</span></span><br><span class=\"line\">    <span class=\"comment\">// changed-begin --&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = PENDING) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.resolveCbs.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        onFulfilled(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.rejectCbs.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        onRejected(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// changed-end --&gt;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"step3-加入链式调用\"><a href=\"#step3-加入链式调用\" class=\"headerlink\" title=\"step3 - 加入链式调用\"></a>step3 - 加入链式调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = test();</span><br><span class=\"line\"><span class=\"comment\">// p1 =&gt; resolve(100) =&gt;  p1.then(res)  res =&gt; 100;</span></span><br><span class=\"line\"><span class=\"comment\">// p2  =&gt; resolve(res)  =&gt;  p2.then(res) =&gt; res ??</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = p1.then(</span><br><span class=\"line\">  res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   then(resolve, reject) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     reject(100000);</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              resolve(<span class=\"number\">100000000000</span>);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">p2.then(</span><br><span class=\"line\">  res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//源码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&quot;pending&quot;</span>,</span><br><span class=\"line\">  FULFILLED = <span class=\"string\">&quot;fulfilled&quot;</span>,</span><br><span class=\"line\">  REJECTED = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = PENDING;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = FULFILLED;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = REJECTED;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulFilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === FULFILLED) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = onFulFilled(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">          <span class=\"comment\">//resolve(x);</span></span><br><span class=\"line\"></span><br><span class=\"line\">          resolvePromise(p2, x, resolve, reject);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// x 决定 了 p2 的状态, resolve(x)或者 reject(x)；</span></span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === REJECTED) &#123;</span><br><span class=\"line\">        x = onRejected(<span class=\"built_in\">this</span>.reason);</span><br><span class=\"line\">        resolvePromise(p2, x, resolve, reject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.onResolvedCallbacks.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = onFulFilled(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">          resolvePromise(p2, x, resolve, reject);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.onRejectedCallbacks.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = onRejected(<span class=\"built_in\">this</span>.reason);</span><br><span class=\"line\">          resolvePromise(p2, x, resolve, reject);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">p2, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p2 === x) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;引用错误&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// thenable 对象;  blueBird q;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; x !== <span class=\"literal\">null</span>) || <span class=\"keyword\">typeof</span> x === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        then.call(</span><br><span class=\"line\">          x,</span><br><span class=\"line\">          y =&gt; &#123;</span><br><span class=\"line\">            resolvePromise(p2, y, resolve, reject);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          err =&gt; &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-完整核心源码\"><a href=\"#Promise-完整核心源码\" class=\"headerlink\" title=\"Promise 完整核心源码\"></a>Promise 完整核心源码</h3><p>参考：<a href=\"https://www.jianshu.com/p/43de678e918a\">https://www.jianshu.com/p/43de678e918a</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断变量否为function</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunction = <span class=\"function\"><span class=\"params\">variable</span> =&gt;</span> <span class=\"keyword\">typeof</span> variable === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 定义Promise的三种状态常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;PENDING&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;FULFILLED&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;REJECTED&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">handle</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFunction(handle)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;MyPromise must accept a function as a parameter&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 添加状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 添加状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 添加成功回调函数队列</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._fulfilledQueues = []</span><br><span class=\"line\">    <span class=\"comment\">// 添加失败回调函数队列</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._rejectedQueues = []</span><br><span class=\"line\">    <span class=\"comment\">// 执行handle</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      handle(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>)) </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加resovle时执行的函数</span></span><br><span class=\"line\">  _resolve (val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>._status = FULFILLED</span><br><span class=\"line\">      <span class=\"comment\">// 依次执行成功队列中的函数，并清空队列</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> runFulfilled = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._fulfilledQueues.shift()) &#123;</span><br><span class=\"line\">          cb(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> runRejected = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._rejectedQueues.shift()) &#123;</span><br><span class=\"line\">          cb(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,</span></span><br><span class=\"line\"><span class=\"comment\">        当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">        val.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._value = value</span><br><span class=\"line\">          runFulfilled(value)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._value = err</span><br><span class=\"line\">          runRejected(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._value = val</span><br><span class=\"line\">        runFulfilled(val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(run, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加reject时执行的函数</span></span><br><span class=\"line\">  _reject (err) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._status = REJECTED</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._value = err</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._rejectedQueues.shift()) &#123;</span><br><span class=\"line\">        cb(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(run, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加then方法</span></span><br><span class=\"line\">  then (onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; _value, _status &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个新的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">onFulfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 封装一个成功时执行的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> fulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isFunction(onFulfilled)) &#123;</span><br><span class=\"line\">            onFulfilledNext(value)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res =  onFulfilled(value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class=\"line\">              res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class=\"line\">              onFulfilledNext(res)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class=\"line\">          onRejectedNext(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 封装一个失败时执行的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> rejected = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isFunction(onRejected)) &#123;</span><br><span class=\"line\">            onRejectedNext(error)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> res = onRejected(error);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class=\"line\">                res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class=\"line\">                onFulfilledNext(res)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class=\"line\">          onRejectedNext(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (_status) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._fulfilledQueues.push(fulfilled)</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._rejectedQueues.push(rejected)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\">// 当状态已经改变时，立即执行对应的回调函数</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">          fulfilled(_value)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">          rejected(_value)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加catch方法</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">undefined</span>, onRejected)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态resolve方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> resolve (value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果参数是MyPromise实例，直接返回这个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> MyPromise) <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态reject方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> reject (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve ,reject</span>) =&gt;</span> reject(value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态all方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> all (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 返回值的集合</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> values = []</span><br><span class=\"line\">      <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [i, p] <span class=\"keyword\">of</span> list.entries()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resolve(p).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          values[i] = res</span><br><span class=\"line\">          count++</span><br><span class=\"line\">          <span class=\"comment\">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count === list.length) resolve(values)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 有一个被rejected时返回的MyPromise状态就变成rejected</span></span><br><span class=\"line\">          reject(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态race方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> race (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resolve(p).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(res)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          reject(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> (cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(</span><br><span class=\"line\">      value  =&gt; MyPromise.resolve(cb()).then(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">      reason =&gt; MyPromise.resolve(cb()).then(<span class=\"function\">() =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<!-- <img src=\"https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg\" width=\"100%\" height=\"480px\"> -->\n\n<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"源码讲解\"><a href=\"#源码讲解\" class=\"headerlink\" title=\"源码讲解\"></a>源码讲解</h3><p>类写法：</p>\n<h4 id=\"step1-同步非链式调用\"><a href=\"#step1-同步非链式调用\" class=\"headerlink\" title=\"step1 - 同步非链式调用\"></a>step1 - 同步非链式调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Class MyPromise &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">handle</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.status = <span class=\"string\">&#x27;PENDING&#x27;</span> <span class=\"comment\">// 状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 成功状态的变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 失败状态的失败原因</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 成功时改变状态，并赋值value</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = val</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 失败时改变状态，并赋值reason</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// catch住当前同步代码的错误</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      handle(resolve, reject)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// then时根据状态执行回调</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = FULFILLED) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = REJECTED) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 此时还不能链式调用</span></span><br></pre></td></tr></table></figure>\n<p>使用示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">100</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = test()</span><br><span class=\"line\">p1.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>构造函数写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyPromise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义变量</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.status = <span class=\"string\">&#x27;PENDING&#x27;</span> <span class=\"comment\">// 状态</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 成功状态的变量</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 失败状态的失败原因</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 成功时改变状态，并赋值value</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resolve = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.value = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 失败时改变状态，并赋值reason</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// catch住当前同步代码的错误</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    handle(resolve, reject)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    reject(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// TODO  then方法</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"step2-加入异步\"><a href=\"#step2-加入异步\" class=\"headerlink\" title=\"step2 - 加入异步\"></a>step2 - 加入异步</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异步调用，该如何处理then方法？</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = test()</span><br><span class=\"line\">p1.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//源码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;fulfilled&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Class MyPromise &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">handle</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.status = <span class=\"string\">&#x27;PENDING&#x27;</span> <span class=\"comment\">// 状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 成功状态的变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>  <span class=\"comment\">// 失败状态的失败原因</span></span><br><span class=\"line\">    <span class=\"comment\">// changed-begin</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.resolveCbs = [] <span class=\"comment\">// 存放成功回调</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.rejectCbs = [] <span class=\"comment\">// 存放失败回调</span></span><br><span class=\"line\">    <span class=\"comment\">// changed-end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 成功时改变状态，并赋值value</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = FULFILLED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = val</span><br><span class=\"line\">        <span class=\"comment\">// changed --&gt;</span></span><br><span class=\"line\">         <span class=\"built_in\">this</span>.resolveCbs.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 失败时改变状态，并赋值reason</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = REJECTED</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason</span><br><span class=\"line\">        <span class=\"comment\">// changed --&gt;</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rejectCbs.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// catch住当前同步代码的错误</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      handle(resolve, reject)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// then时根据状态执行回调</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = FULFILLED) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = REJECTED) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 异步调用，该如何处理then方法？异步时，此时状态为pending, 需要将回调函数存起来，等待时机到了再拿出来执行</span></span><br><span class=\"line\">    <span class=\"comment\">// changed-begin --&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.status = PENDING) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.resolveCbs.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        onFulfilled(<span class=\"built_in\">this</span>.value)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.rejectCbs.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        onRejected(<span class=\"built_in\">this</span>.reason)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// changed-end --&gt;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"step3-加入链式调用\"><a href=\"#step3-加入链式调用\" class=\"headerlink\" title=\"step3 - 加入链式调用\"></a>step3 - 加入链式调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = test();</span><br><span class=\"line\"><span class=\"comment\">// p1 =&gt; resolve(100) =&gt;  p1.then(res)  res =&gt; 100;</span></span><br><span class=\"line\"><span class=\"comment\">// p2  =&gt; resolve(res)  =&gt;  p2.then(res) =&gt; res ??</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = p1.then(</span><br><span class=\"line\">  res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   then(resolve, reject) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     reject(100000);</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              resolve(<span class=\"number\">100000000000</span>);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">p2.then(</span><br><span class=\"line\">  res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//源码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&quot;pending&quot;</span>,</span><br><span class=\"line\">  FULFILLED = <span class=\"string\">&quot;fulfilled&quot;</span>,</span><br><span class=\"line\">  REJECTED = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">executor</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = PENDING;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = FULFILLED;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = REJECTED;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">onFulFilled, onRejected</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> x;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === FULFILLED) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = onFulFilled(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">          <span class=\"comment\">//resolve(x);</span></span><br><span class=\"line\"></span><br><span class=\"line\">          resolvePromise(p2, x, resolve, reject);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// x 决定 了 p2 的状态, resolve(x)或者 reject(x)；</span></span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === REJECTED) &#123;</span><br><span class=\"line\">        x = onRejected(<span class=\"built_in\">this</span>.reason);</span><br><span class=\"line\">        resolvePromise(p2, x, resolve, reject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.onResolvedCallbacks.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = onFulFilled(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">          resolvePromise(p2, x, resolve, reject);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.onRejectedCallbacks.push(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          x = onRejected(<span class=\"built_in\">this</span>.reason);</span><br><span class=\"line\">          resolvePromise(p2, x, resolve, reject);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">p2, x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p2 === x) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;引用错误&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// thenable 对象;  blueBird q;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; x !== <span class=\"literal\">null</span>) || <span class=\"keyword\">typeof</span> x === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        then.call(</span><br><span class=\"line\">          x,</span><br><span class=\"line\">          y =&gt; &#123;</span><br><span class=\"line\">            resolvePromise(p2, y, resolve, reject);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          err =&gt; &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise-完整核心源码\"><a href=\"#Promise-完整核心源码\" class=\"headerlink\" title=\"Promise 完整核心源码\"></a>Promise 完整核心源码</h3><p>参考：<a href=\"https://www.jianshu.com/p/43de678e918a\">https://www.jianshu.com/p/43de678e918a</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断变量否为function</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunction = <span class=\"function\"><span class=\"params\">variable</span> =&gt;</span> <span class=\"keyword\">typeof</span> variable === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 定义Promise的三种状态常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;PENDING&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;FULFILLED&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;REJECTED&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">handle</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFunction(handle)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;MyPromise must accept a function as a parameter&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 添加状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 添加状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 添加成功回调函数队列</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._fulfilledQueues = []</span><br><span class=\"line\">    <span class=\"comment\">// 添加失败回调函数队列</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._rejectedQueues = []</span><br><span class=\"line\">    <span class=\"comment\">// 执行handle</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      handle(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>)) </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加resovle时执行的函数</span></span><br><span class=\"line\">  _resolve (val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>._status = FULFILLED</span><br><span class=\"line\">      <span class=\"comment\">// 依次执行成功队列中的函数，并清空队列</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> runFulfilled = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._fulfilledQueues.shift()) &#123;</span><br><span class=\"line\">          cb(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> runRejected = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._rejectedQueues.shift()) &#123;</span><br><span class=\"line\">          cb(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,</span></span><br><span class=\"line\"><span class=\"comment\">        当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">        val.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._value = value</span><br><span class=\"line\">          runFulfilled(value)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._value = err</span><br><span class=\"line\">          runRejected(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._value = val</span><br><span class=\"line\">        runFulfilled(val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(run, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加reject时执行的函数</span></span><br><span class=\"line\">  _reject (err) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._status = REJECTED</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._value = err</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._rejectedQueues.shift()) &#123;</span><br><span class=\"line\">        cb(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(run, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加then方法</span></span><br><span class=\"line\">  then (onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; _value, _status &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个新的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">onFulfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 封装一个成功时执行的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> fulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isFunction(onFulfilled)) &#123;</span><br><span class=\"line\">            onFulfilledNext(value)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res =  onFulfilled(value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class=\"line\">              res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class=\"line\">              onFulfilledNext(res)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class=\"line\">          onRejectedNext(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 封装一个失败时执行的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> rejected = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isFunction(onRejected)) &#123;</span><br><span class=\"line\">            onRejectedNext(error)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> res = onRejected(error);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class=\"line\">                res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class=\"line\">                onFulfilledNext(res)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class=\"line\">          onRejectedNext(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (_status) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._fulfilledQueues.push(fulfilled)</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._rejectedQueues.push(rejected)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\">// 当状态已经改变时，立即执行对应的回调函数</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">          fulfilled(_value)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">          rejected(_value)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加catch方法</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">undefined</span>, onRejected)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态resolve方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> resolve (value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果参数是MyPromise实例，直接返回这个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> MyPromise) <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态reject方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> reject (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve ,reject</span>) =&gt;</span> reject(value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态all方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> all (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 返回值的集合</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> values = []</span><br><span class=\"line\">      <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [i, p] <span class=\"keyword\">of</span> list.entries()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resolve(p).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          values[i] = res</span><br><span class=\"line\">          count++</span><br><span class=\"line\">          <span class=\"comment\">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count === list.length) resolve(values)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 有一个被rejected时返回的MyPromise状态就变成rejected</span></span><br><span class=\"line\">          reject(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态race方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> race (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resolve(p).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(res)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          reject(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> (cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(</span><br><span class=\"line\">      value  =&gt; MyPromise.resolve(cb()).then(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">      reason =&gt; MyPromise.resolve(cb()).then(<span class=\"function\">() =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"Promise(三)-核心源码","path":"posts/31155/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-02-23T06:58:30.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-23T06:58:30.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["Promise"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":10607},{"title":"Vue3+TS项目中遇到的eslint问题","copyright":true,"comments":1,"abbrlink":59852,"date":"2022-08-25T08:15:41.000Z","_content":"1. Component name \"Tabs\" should always be multi-word  vue/multi-word-component-names\n\n配置.eslintrc.json中的rules:\n\n```\n \"vue/multi-word-component-names\": [\"off\"]\n```\n\n2. error  '.native' modifier on 'v-on' directive is deprecated  vue/no-deprecated-v-on-native-modifier\n\n'.[native](https://so.csdn.net/so/search?q=native&spm=1001.2101.3001.7020)'修饰符在vue3中被弃用了，所以在代码中去掉```.native```就可以了。\n\n3. error  Custom elements in iteration require 'v-bind:key' directives  vue/valid-v-for\n\n原因是代码模板中使用了v-for, 但是没有绑定key值，解决办法建议给v-for绑定key值。\n\n4. Unexpected mutation of \"isShowDialog\" prop  vue/no-mutating-props\n\n父组件传递过来的变量绑定弹窗会报错，原因是单向数据流，子组件不能该变父组件变量。\n\n改成如下写法：\n```js\n//父组件\n<biz-detail\n    v-model:isShowDialog=\"state.isShowDialog\"\n    ...\n></biz-detail>\n//子组件\n...\n<el-dialog\n    v-model=\"dialogVisible\"\n    ...\n>...</dialog>\n\nconst emits = defineEmits(['update:isShowDialog'])\nconst dialogVisible = computed({\n  get: () => props.isShowDialog,\n  set: (val: boolean) => {\n    emits('update:isShowDialog', val)\n  }\n})\n```\n\n","source":"_posts/Vue3+TS项目中遇到的eslint问题.md","raw":"---\ntitle: Vue3+TS项目中遇到的eslint问题\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 59852\ndate: 2022-08-25 16:15:41\n---\n1. Component name \"Tabs\" should always be multi-word  vue/multi-word-component-names\n\n配置.eslintrc.json中的rules:\n\n```\n \"vue/multi-word-component-names\": [\"off\"]\n```\n\n2. error  '.native' modifier on 'v-on' directive is deprecated  vue/no-deprecated-v-on-native-modifier\n\n'.[native](https://so.csdn.net/so/search?q=native&spm=1001.2101.3001.7020)'修饰符在vue3中被弃用了，所以在代码中去掉```.native```就可以了。\n\n3. error  Custom elements in iteration require 'v-bind:key' directives  vue/valid-v-for\n\n原因是代码模板中使用了v-for, 但是没有绑定key值，解决办法建议给v-for绑定key值。\n\n4. Unexpected mutation of \"isShowDialog\" prop  vue/no-mutating-props\n\n父组件传递过来的变量绑定弹窗会报错，原因是单向数据流，子组件不能该变父组件变量。\n\n改成如下写法：\n```js\n//父组件\n<biz-detail\n    v-model:isShowDialog=\"state.isShowDialog\"\n    ...\n></biz-detail>\n//子组件\n...\n<el-dialog\n    v-model=\"dialogVisible\"\n    ...\n>...</dialog>\n\nconst emits = defineEmits(['update:isShowDialog'])\nconst dialogVisible = computed({\n  get: () => props.isShowDialog,\n  set: (val: boolean) => {\n    emits('update:isShowDialog', val)\n  }\n})\n```\n\n","slug":"Vue3+TS项目中遇到的eslint问题","published":1,"updated":"2023-12-20T06:57:18.946Z","_id":"clqdf8htb000w44t179kqadvn","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><ol>\n<li>Component name “Tabs” should always be multi-word  vue/multi-word-component-names</li>\n</ol>\n<p>配置.eslintrc.json中的rules:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;vue/multi-word-component-names&quot;</span>: [<span class=\"string\">&quot;off&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>error  ‘.native’ modifier on ‘v-on’ directive is deprecated  vue/no-deprecated-v-on-native-modifier</li>\n</ol>\n<p>‘.<a href=\"https://so.csdn.net/so/search?q=native&spm=1001.2101.3001.7020\">native</a>‘修饰符在vue3中被弃用了，所以在代码中去掉<code>.native</code>就可以了。</p>\n<ol start=\"3\">\n<li>error  Custom elements in iteration require ‘v-bind:key’ directives  vue/valid-v-for</li>\n</ol>\n<p>原因是代码模板中使用了v-for, 但是没有绑定key值，解决办法建议给v-for绑定key值。</p>\n<ol start=\"4\">\n<li>Unexpected mutation of “isShowDialog” prop  vue/no-mutating-props</li>\n</ol>\n<p>父组件传递过来的变量绑定弹窗会报错，原因是单向数据流，子组件不能该变父组件变量。</p>\n<p>改成如下写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;biz-detail</span><br><span class=\"line\">    v-model:isShowDialog=<span class=\"string\">&quot;state.isShowDialog&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&gt;&lt;/biz-detail&gt;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;el-dialog</span><br><span class=\"line\">    v-model=<span class=\"string\">&quot;dialogVisible&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&gt;...&lt;/dialog&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> emits = defineEmits([<span class=\"string\">&#x27;update:isShowDialog&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> dialogVisible = computed(&#123;</span><br><span class=\"line\">  get: <span class=\"function\">() =&gt;</span> props.isShowDialog,</span><br><span class=\"line\">  set: <span class=\"function\">(<span class=\"params\">val: boolean</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    emits(<span class=\"string\">&#x27;update:isShowDialog&#x27;</span>, val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<ol>\n<li>Component name “Tabs” should always be multi-word  vue/multi-word-component-names</li>\n</ol>\n<p>配置.eslintrc.json中的rules:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;vue/multi-word-component-names&quot;</span>: [<span class=\"string\">&quot;off&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>error  ‘.native’ modifier on ‘v-on’ directive is deprecated  vue/no-deprecated-v-on-native-modifier</li>\n</ol>\n<p>‘.<a href=\"https://so.csdn.net/so/search?q=native&spm=1001.2101.3001.7020\">native</a>‘修饰符在vue3中被弃用了，所以在代码中去掉<code>.native</code>就可以了。</p>\n<ol start=\"3\">\n<li>error  Custom elements in iteration require ‘v-bind:key’ directives  vue/valid-v-for</li>\n</ol>\n<p>原因是代码模板中使用了v-for, 但是没有绑定key值，解决办法建议给v-for绑定key值。</p>\n<ol start=\"4\">\n<li>Unexpected mutation of “isShowDialog” prop  vue/no-mutating-props</li>\n</ol>\n<p>父组件传递过来的变量绑定弹窗会报错，原因是单向数据流，子组件不能该变父组件变量。</p>\n<p>改成如下写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件</span></span><br><span class=\"line\">&lt;biz-detail</span><br><span class=\"line\">    v-model:isShowDialog=<span class=\"string\">&quot;state.isShowDialog&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&gt;&lt;/biz-detail&gt;</span><br><span class=\"line\"><span class=\"comment\">//子组件</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;el-dialog</span><br><span class=\"line\">    v-model=<span class=\"string\">&quot;dialogVisible&quot;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&gt;...&lt;/dialog&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> emits = defineEmits([<span class=\"string\">&#x27;update:isShowDialog&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> dialogVisible = computed(&#123;</span><br><span class=\"line\">  get: <span class=\"function\">() =&gt;</span> props.isShowDialog,</span><br><span class=\"line\">  set: <span class=\"function\">(<span class=\"params\">val: boolean</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    emits(<span class=\"string\">&#x27;update:isShowDialog&#x27;</span>, val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"Vue3+TS项目中遇到的eslint问题","path":"posts/59852/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-25T08:15:41.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-25T08:15:41.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":925},{"title":"人工智能贷款平台-Upstart","copyright":true,"comments":1,"abbrlink":27694,"date":"2021-10-11T06:44:18.000Z","_content":"\n### Upstart是什么？\n\nUpstart是领先的人工智能（AI）贷款平台，旨在改善人们负担得起的信贷的使用率，同时降低银行合作伙伴的贷款风险和成本。 通过利用Upstart的AI平台，支持Upstart的银行可以提供更高的批准率，并降低损失率（不良貸款率），同时提供客户所需的卓越的数字优先贷款体验。\n\n\n### 运作模式\n\nUpstart与银行间的服务模式是由Upstart负责带入客户，以AI审核贷款跟决定利率，实际由银行合作伙伴完成实际贷款的流程，而Upstart负责抽成[1]。它的一些产品包括**个人贷款、婚礼贷款、信用卡合併和汽车贷款**。Upstart贷款年利率在 8.27% 到 35.99% 之间，具体取决于产品。合作银行通过这样的促销方式将可带来更多的用户流量与稳定使用率，在未来也能够针用户们提供贷款以外的产品与客制化服务，提升客户的黏度[2]。\n\n### 模型\n\n美國傳統的信貸模型是利用FICO[3]來計算信用分數，但此方法量化風險的能力有限，目前，该公司的人工智能模型包含了1000多个变量来提供决策。公司的人工智能平台已经通过1050万多个还款事件进行自我学习，实时自我优化模型。Upstart 的演算法能够根据非传统指标评估借款人。**如除了他们的工作经历之外，它还考虑了借款人的教育和他们上学的地方，而不仅是收入和资产。**公司声称其决策过程可以将违约率降低 75%。事实上，在相同的整体贷款损失率下，Upstart批出的贷款数目比美国大型银行多173% 。\n\n\n### 展望\n另一方面，Upstart 当前的商业模式以及产品也都还未发展完善 ，以用户面来看，目前散户投资人还无法利用 Upstart 平台进行投资；以产品面来看，Upstart 目前的贷款方案种类相较其他成熟的 P2P 借贷市场来的少；以商业范畴面（scope）来看，Upstart 目前仍仅提供贷款相关的产品及服务，其他如理财投资等商业模式亦尚未被开发 。\n因此我们认为，若是 Upstart 能够在精准判断申贷人的信用风险并比其他业者有更低的违约率、外加产品的广度也能够持续发展，公司未来前景是值得期待[2]。\n\n \n参考：\n[1].美國AI貸款平台UPSTART介紹:https://www.find.org.tw/index/wind/browse/39a09ecd2ac75c0b646cb60e74fcb49b/\n[2].https://dreamloan.com.tw/articles/13-Upstart-%E4%BF%A1%E7%94%A8%E8%A9%95%E5%88%86-%E5%AD%B8%E7%94%9F%E8%B2%B8%E6%AC%BE-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7\n[3].FICO模型： https://usdailyrewards.com/fico-score/\n\n\n\n","source":"_posts/Upstart.md","raw":"---\ntitle: 人工智能贷款平台-Upstart\ntags: 杂文\ncategories: 杂文\ncopyright: true\ncomments: true\nabbrlink: 27694\ndate: 2021-10-11 14:44:18\n---\n\n### Upstart是什么？\n\nUpstart是领先的人工智能（AI）贷款平台，旨在改善人们负担得起的信贷的使用率，同时降低银行合作伙伴的贷款风险和成本。 通过利用Upstart的AI平台，支持Upstart的银行可以提供更高的批准率，并降低损失率（不良貸款率），同时提供客户所需的卓越的数字优先贷款体验。\n\n\n### 运作模式\n\nUpstart与银行间的服务模式是由Upstart负责带入客户，以AI审核贷款跟决定利率，实际由银行合作伙伴完成实际贷款的流程，而Upstart负责抽成[1]。它的一些产品包括**个人贷款、婚礼贷款、信用卡合併和汽车贷款**。Upstart贷款年利率在 8.27% 到 35.99% 之间，具体取决于产品。合作银行通过这样的促销方式将可带来更多的用户流量与稳定使用率，在未来也能够针用户们提供贷款以外的产品与客制化服务，提升客户的黏度[2]。\n\n### 模型\n\n美國傳統的信貸模型是利用FICO[3]來計算信用分數，但此方法量化風險的能力有限，目前，该公司的人工智能模型包含了1000多个变量来提供决策。公司的人工智能平台已经通过1050万多个还款事件进行自我学习，实时自我优化模型。Upstart 的演算法能够根据非传统指标评估借款人。**如除了他们的工作经历之外，它还考虑了借款人的教育和他们上学的地方，而不仅是收入和资产。**公司声称其决策过程可以将违约率降低 75%。事实上，在相同的整体贷款损失率下，Upstart批出的贷款数目比美国大型银行多173% 。\n\n\n### 展望\n另一方面，Upstart 当前的商业模式以及产品也都还未发展完善 ，以用户面来看，目前散户投资人还无法利用 Upstart 平台进行投资；以产品面来看，Upstart 目前的贷款方案种类相较其他成熟的 P2P 借贷市场来的少；以商业范畴面（scope）来看，Upstart 目前仍仅提供贷款相关的产品及服务，其他如理财投资等商业模式亦尚未被开发 。\n因此我们认为，若是 Upstart 能够在精准判断申贷人的信用风险并比其他业者有更低的违约率、外加产品的广度也能够持续发展，公司未来前景是值得期待[2]。\n\n \n参考：\n[1].美國AI貸款平台UPSTART介紹:https://www.find.org.tw/index/wind/browse/39a09ecd2ac75c0b646cb60e74fcb49b/\n[2].https://dreamloan.com.tw/articles/13-Upstart-%E4%BF%A1%E7%94%A8%E8%A9%95%E5%88%86-%E5%AD%B8%E7%94%9F%E8%B2%B8%E6%AC%BE-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7\n[3].FICO模型： https://usdailyrewards.com/fico-score/\n\n\n\n","slug":"Upstart","published":1,"updated":"2022-07-13T01:47:21.874Z","layout":"post","photos":[],"link":"","_id":"clqdf8htb000y44t1d2776gnw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"Upstart是什么？\"><a href=\"#Upstart是什么？\" class=\"headerlink\" title=\"Upstart是什么？\"></a>Upstart是什么？</h3><p>Upstart是领先的人工智能（AI）贷款平台，旨在改善人们负担得起的信贷的使用率，同时降低银行合作伙伴的贷款风险和成本。 通过利用Upstart的AI平台，支持Upstart的银行可以提供更高的批准率，并降低损失率（不良貸款率），同时提供客户所需的卓越的数字优先贷款体验。</p>\n<h3 id=\"运作模式\"><a href=\"#运作模式\" class=\"headerlink\" title=\"运作模式\"></a>运作模式</h3><p>Upstart与银行间的服务模式是由Upstart负责带入客户，以AI审核贷款跟决定利率，实际由银行合作伙伴完成实际贷款的流程，而Upstart负责抽成[1]。它的一些产品包括<strong>个人贷款、婚礼贷款、信用卡合併和汽车贷款</strong>。Upstart贷款年利率在 8.27% 到 35.99% 之间，具体取决于产品。合作银行通过这样的促销方式将可带来更多的用户流量与稳定使用率，在未来也能够针用户们提供贷款以外的产品与客制化服务，提升客户的黏度[2]。</p>\n<h3 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h3><p>美國傳統的信貸模型是利用FICO[3]來計算信用分數，但此方法量化風險的能力有限，目前，该公司的人工智能模型包含了1000多个变量来提供决策。公司的人工智能平台已经通过1050万多个还款事件进行自我学习，实时自我优化模型。Upstart 的演算法能够根据非传统指标评估借款人。<strong>如除了他们的工作经历之外，它还考虑了借款人的教育和他们上学的地方，而不仅是收入和资产。</strong>公司声称其决策过程可以将违约率降低 75%。事实上，在相同的整体贷款损失率下，Upstart批出的贷款数目比美国大型银行多173% 。</p>\n<h3 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h3><p>另一方面，Upstart 当前的商业模式以及产品也都还未发展完善 ，以用户面来看，目前散户投资人还无法利用 Upstart 平台进行投资；以产品面来看，Upstart 目前的贷款方案种类相较其他成熟的 P2P 借贷市场来的少；以商业范畴面（scope）来看，Upstart 目前仍仅提供贷款相关的产品及服务，其他如理财投资等商业模式亦尚未被开发 。<br>因此我们认为，若是 Upstart 能够在精准判断申贷人的信用风险并比其他业者有更低的违约率、外加产品的广度也能够持续发展，公司未来前景是值得期待[2]。</p>\n<p>参考：<br>[1].美國AI貸款平台UPSTART介紹:<a href=\"https://www.find.org.tw/index/wind/browse/39a09ecd2ac75c0b646cb60e74fcb49b/\">https://www.find.org.tw/index/wind/browse/39a09ecd2ac75c0b646cb60e74fcb49b/</a><br>[2].<a href=\"https://dreamloan.com.tw/articles/13-Upstart-%E4%BF%A1%E7%94%A8%E8%A9%95%E5%88%86-%E5%AD%B8%E7%94%9F%E8%B2%B8%E6%AC%BE-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7\">https://dreamloan.com.tw/articles/13-Upstart-%E4%BF%A1%E7%94%A8%E8%A9%95%E5%88%86-%E5%AD%B8%E7%94%9F%E8%B2%B8%E6%AC%BE-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7</a><br>[3].FICO模型： <a href=\"https://usdailyrewards.com/fico-score/\">https://usdailyrewards.com/fico-score/</a></p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"Upstart是什么？\"><a href=\"#Upstart是什么？\" class=\"headerlink\" title=\"Upstart是什么？\"></a>Upstart是什么？</h3><p>Upstart是领先的人工智能（AI）贷款平台，旨在改善人们负担得起的信贷的使用率，同时降低银行合作伙伴的贷款风险和成本。 通过利用Upstart的AI平台，支持Upstart的银行可以提供更高的批准率，并降低损失率（不良貸款率），同时提供客户所需的卓越的数字优先贷款体验。</p>\n<h3 id=\"运作模式\"><a href=\"#运作模式\" class=\"headerlink\" title=\"运作模式\"></a>运作模式</h3><p>Upstart与银行间的服务模式是由Upstart负责带入客户，以AI审核贷款跟决定利率，实际由银行合作伙伴完成实际贷款的流程，而Upstart负责抽成[1]。它的一些产品包括<strong>个人贷款、婚礼贷款、信用卡合併和汽车贷款</strong>。Upstart贷款年利率在 8.27% 到 35.99% 之间，具体取决于产品。合作银行通过这样的促销方式将可带来更多的用户流量与稳定使用率，在未来也能够针用户们提供贷款以外的产品与客制化服务，提升客户的黏度[2]。</p>\n<h3 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h3><p>美國傳統的信貸模型是利用FICO[3]來計算信用分數，但此方法量化風險的能力有限，目前，该公司的人工智能模型包含了1000多个变量来提供决策。公司的人工智能平台已经通过1050万多个还款事件进行自我学习，实时自我优化模型。Upstart 的演算法能够根据非传统指标评估借款人。<strong>如除了他们的工作经历之外，它还考虑了借款人的教育和他们上学的地方，而不仅是收入和资产。</strong>公司声称其决策过程可以将违约率降低 75%。事实上，在相同的整体贷款损失率下，Upstart批出的贷款数目比美国大型银行多173% 。</p>\n<h3 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h3><p>另一方面，Upstart 当前的商业模式以及产品也都还未发展完善 ，以用户面来看，目前散户投资人还无法利用 Upstart 平台进行投资；以产品面来看，Upstart 目前的贷款方案种类相较其他成熟的 P2P 借贷市场来的少；以商业范畴面（scope）来看，Upstart 目前仍仅提供贷款相关的产品及服务，其他如理财投资等商业模式亦尚未被开发 。<br>因此我们认为，若是 Upstart 能够在精准判断申贷人的信用风险并比其他业者有更低的违约率、外加产品的广度也能够持续发展，公司未来前景是值得期待[2]。</p>\n<p>参考：<br>[1].美國AI貸款平台UPSTART介紹:<a href=\"https://www.find.org.tw/index/wind/browse/39a09ecd2ac75c0b646cb60e74fcb49b/\">https://www.find.org.tw/index/wind/browse/39a09ecd2ac75c0b646cb60e74fcb49b/</a><br>[2].<a href=\"https://dreamloan.com.tw/articles/13-Upstart-%E4%BF%A1%E7%94%A8%E8%A9%95%E5%88%86-%E5%AD%B8%E7%94%9F%E8%B2%B8%E6%AC%BE-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7\">https://dreamloan.com.tw/articles/13-Upstart-%E4%BF%A1%E7%94%A8%E8%A9%95%E5%88%86-%E5%AD%B8%E7%94%9F%E8%B2%B8%E6%AC%BE-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7</a><br>[3].FICO模型： <a href=\"https://usdailyrewards.com/fico-score/\">https://usdailyrewards.com/fico-score/</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"人工智能贷款平台-Upstart","path":"posts/27694/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-10-11T06:44:18.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-10-11T06:44:18.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"杂文","tags":["杂文"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1161},{"title":"Vue3+Typescript项目配置eslint和commitlint","copyright":true,"comments":1,"abbrlink":16572,"date":"2022-08-24T03:26:53.000Z","_content":"\n\n在多人合作的项目中，如果没有规范约束，可能每个人提上来的代码都要被格式化一遍，不便于查看该功能具体修改了哪些代码，并且commit信息写的五花八门，有时也不利于理解，所以规范是一个非常nice的东西，有了它，在多人合作的项目中，避免了很多不必要的麻烦，也会节省很多时间。\n\n本人将如何一步一步添加规范的过程记录下来，方便和我一样有同样需求的小伙伴学习。\n\n### 配置eslint\n1. 安装eslint依赖并初始化\n\n```js\nnpm i eslint -D\n// 安装好后，进行初始化\nnpx eslint --init\n```\n\n初始化的步骤如下：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1949611d7e76456b99d33ff403edc9de~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca97821402b243cab0cdcf7c5eea1479~tplv-k3u1fbpfcp-watermark.image?)\n\n这一步需要根据你项目的框架选择，vue.js:\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f327df04bb544a0ba9f847a6b3acbd4f~tplv-k3u1fbpfcp-watermark.image?)\nVue3使用了TypeScript所以需要选“Yes”:\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/126e84330df14658b15ebff793d73aaa~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c5dc24999ae4865baf713c5e6ab6a8f~tplv-k3u1fbpfcp-watermark.image?)\n这个选什么就会生成一个什么文件进行配置eslint规则，根据自己的需要选择，我这里选择的是JSON（我选JavaScript，生成的.eslintrc.js会报错），然后继续，一路到底就初始化好了。\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b95c049351f84145a5eb76d8e31eeecd~tplv-k3u1fbpfcp-watermark.image?)\n\n2. 配置eslint规则\n\n然后根据自己的需要在.eslintrc.json配置eslint规则，可以参考[eslint规则中文版](https://eslint.bootcss.com/docs/rules/)。\n\n3. 安装eslint插件\n\n\n配置完成后，若vscode没有安装eslint插件，需要安装eslint插件。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18ff6f1c906f4afc94e60f81d4b4a9c2~tplv-k3u1fbpfcp-watermark.image?)\n\n安装完后，需要给vscode设置一下：\n```\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n}\n```\n\n### 配置prettier\n\n1. 安装依赖\n\n```\nnpm i prettier eslint-config-prettier eslint-plugin-prettier -D\n```\n2. 配置文件：\n\n在项目根目录下新建.prettierrc文件，然后写入：\n\n```js\n{\n  \"semi\": false,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"none\",\n  \"singleQuote\": true,\n  \"arrowParens\": \"avoid\"\n}\n```\n根据需要配置自己的prettier规则：可参考[prettier规则](https://prettier.io/docs/en/options.html)\n\n3. vscode安装prettier插件：\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6e6d317e69149f48ca138ebce710ac5~tplv-k3u1fbpfcp-watermark.image?)\n\n然后在vscode设置中，把这个勾上，保存时就能自动修复：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c1ea4ae9f6242b4be65a48ccb635eb4~tplv-k3u1fbpfcp-watermark.image?)\n\n并在vscode设置中添加：\n```\n\"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n}\n```\n4. 然后在.eslintrc.json文件中extends中添加：\n\n```js\n\"extends\": [\n    \"eslint:recommended\",\n    \"plugin:vue/vue3-essential\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"prettier\"\n],\n```\n\n### 配置代码提交规范husky\n\n安装依赖\n\n```\nnpm install -D husky\n```\n初始化\n```\nnpx husky install .husky\n```\n添加commit-msg\n```\nnpx husky add .husky/commit-msg \"node scripts/verifyCommit.js\"\n```\n在根目录下创建scripts文件夹，然后在该文件夹下创建verifyCommit.js文件：\n然后写入下面代码，在提交时就会执行检验commit的信息。\n```js\n// eslint-disable-next-line no-undef, @typescript-eslint/no-var-requires\nconst msg = require('fs')\n  .readFileSync('.git/COMMIT_EDITMSG', 'utf-8')\n  .trim()\n  \nconst commitRE = /^(revert: )?(feat|fix|docs|dx|style|refactor|perf|test|workflow|build|ci|chore|types|wip|release)((.+))?: .{1,50}/\nconst mergeRe = /^(Merge pull request|Merge branch)/\nif (!commitRE.test(msg)) {\n  if(!mergeRe.test(msg)){\n    console.log('git commit信息校验不通过')\n\n    console.error(`git commit的信息格式不对, 需要使用 title(scope): desc的格式\n      比如 fix: xxbug\n      feat(test): add new \n      具体校验逻辑看 scripts/verifyCommit.js\n    `)\n    process.exit(1)\n  }\n\n}else{\n  console.log('git commit信息校验通过')\n}\n```\n在检验commit提交信息前需要先检验eslint规则，有个钩子pre-commit，在commit之前会执行。在工程终端中执行：\n\n```\nnpx husky add .husky/pre-commit \"npm run lint\"\n```\n然后在package.json的scripts中，加入下面的语句：\n```\n\"lint\": \"eslint --fix --ext .js,vue src/\"\n```\n\n然后可以提交一下代码检测一下是否加上了eslint和commitlint.\n可能会遇到一些问题，慢慢一个一个解决后就可以提交了。\n\n","source":"_posts/Vue3-Typescript项目配置eslint和commitlint.md","raw":"---\ntitle: Vue3+Typescript项目配置eslint和commitlint\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 16572\ndate: 2022-08-24 11:26:53\n---\n\n\n在多人合作的项目中，如果没有规范约束，可能每个人提上来的代码都要被格式化一遍，不便于查看该功能具体修改了哪些代码，并且commit信息写的五花八门，有时也不利于理解，所以规范是一个非常nice的东西，有了它，在多人合作的项目中，避免了很多不必要的麻烦，也会节省很多时间。\n\n本人将如何一步一步添加规范的过程记录下来，方便和我一样有同样需求的小伙伴学习。\n\n### 配置eslint\n1. 安装eslint依赖并初始化\n\n```js\nnpm i eslint -D\n// 安装好后，进行初始化\nnpx eslint --init\n```\n\n初始化的步骤如下：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1949611d7e76456b99d33ff403edc9de~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca97821402b243cab0cdcf7c5eea1479~tplv-k3u1fbpfcp-watermark.image?)\n\n这一步需要根据你项目的框架选择，vue.js:\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f327df04bb544a0ba9f847a6b3acbd4f~tplv-k3u1fbpfcp-watermark.image?)\nVue3使用了TypeScript所以需要选“Yes”:\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/126e84330df14658b15ebff793d73aaa~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c5dc24999ae4865baf713c5e6ab6a8f~tplv-k3u1fbpfcp-watermark.image?)\n这个选什么就会生成一个什么文件进行配置eslint规则，根据自己的需要选择，我这里选择的是JSON（我选JavaScript，生成的.eslintrc.js会报错），然后继续，一路到底就初始化好了。\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b95c049351f84145a5eb76d8e31eeecd~tplv-k3u1fbpfcp-watermark.image?)\n\n2. 配置eslint规则\n\n然后根据自己的需要在.eslintrc.json配置eslint规则，可以参考[eslint规则中文版](https://eslint.bootcss.com/docs/rules/)。\n\n3. 安装eslint插件\n\n\n配置完成后，若vscode没有安装eslint插件，需要安装eslint插件。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18ff6f1c906f4afc94e60f81d4b4a9c2~tplv-k3u1fbpfcp-watermark.image?)\n\n安装完后，需要给vscode设置一下：\n```\n\"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n}\n```\n\n### 配置prettier\n\n1. 安装依赖\n\n```\nnpm i prettier eslint-config-prettier eslint-plugin-prettier -D\n```\n2. 配置文件：\n\n在项目根目录下新建.prettierrc文件，然后写入：\n\n```js\n{\n  \"semi\": false,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"none\",\n  \"singleQuote\": true,\n  \"arrowParens\": \"avoid\"\n}\n```\n根据需要配置自己的prettier规则：可参考[prettier规则](https://prettier.io/docs/en/options.html)\n\n3. vscode安装prettier插件：\n\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6e6d317e69149f48ca138ebce710ac5~tplv-k3u1fbpfcp-watermark.image?)\n\n然后在vscode设置中，把这个勾上，保存时就能自动修复：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c1ea4ae9f6242b4be65a48ccb635eb4~tplv-k3u1fbpfcp-watermark.image?)\n\n并在vscode设置中添加：\n```\n\"[javascript]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n}\n```\n4. 然后在.eslintrc.json文件中extends中添加：\n\n```js\n\"extends\": [\n    \"eslint:recommended\",\n    \"plugin:vue/vue3-essential\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"prettier\"\n],\n```\n\n### 配置代码提交规范husky\n\n安装依赖\n\n```\nnpm install -D husky\n```\n初始化\n```\nnpx husky install .husky\n```\n添加commit-msg\n```\nnpx husky add .husky/commit-msg \"node scripts/verifyCommit.js\"\n```\n在根目录下创建scripts文件夹，然后在该文件夹下创建verifyCommit.js文件：\n然后写入下面代码，在提交时就会执行检验commit的信息。\n```js\n// eslint-disable-next-line no-undef, @typescript-eslint/no-var-requires\nconst msg = require('fs')\n  .readFileSync('.git/COMMIT_EDITMSG', 'utf-8')\n  .trim()\n  \nconst commitRE = /^(revert: )?(feat|fix|docs|dx|style|refactor|perf|test|workflow|build|ci|chore|types|wip|release)((.+))?: .{1,50}/\nconst mergeRe = /^(Merge pull request|Merge branch)/\nif (!commitRE.test(msg)) {\n  if(!mergeRe.test(msg)){\n    console.log('git commit信息校验不通过')\n\n    console.error(`git commit的信息格式不对, 需要使用 title(scope): desc的格式\n      比如 fix: xxbug\n      feat(test): add new \n      具体校验逻辑看 scripts/verifyCommit.js\n    `)\n    process.exit(1)\n  }\n\n}else{\n  console.log('git commit信息校验通过')\n}\n```\n在检验commit提交信息前需要先检验eslint规则，有个钩子pre-commit，在commit之前会执行。在工程终端中执行：\n\n```\nnpx husky add .husky/pre-commit \"npm run lint\"\n```\n然后在package.json的scripts中，加入下面的语句：\n```\n\"lint\": \"eslint --fix --ext .js,vue src/\"\n```\n\n然后可以提交一下代码检测一下是否加上了eslint和commitlint.\n可能会遇到一些问题，慢慢一个一个解决后就可以提交了。\n\n","slug":"Vue3-Typescript项目配置eslint和commitlint","published":1,"updated":"2023-12-20T06:57:18.954Z","_id":"clqdf8htc001344t102xq7lr1","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>在多人合作的项目中，如果没有规范约束，可能每个人提上来的代码都要被格式化一遍，不便于查看该功能具体修改了哪些代码，并且commit信息写的五花八门，有时也不利于理解，所以规范是一个非常nice的东西，有了它，在多人合作的项目中，避免了很多不必要的麻烦，也会节省很多时间。</p>\n<p>本人将如何一步一步添加规范的过程记录下来，方便和我一样有同样需求的小伙伴学习。</p>\n<h3 id=\"配置eslint\"><a href=\"#配置eslint\" class=\"headerlink\" title=\"配置eslint\"></a>配置eslint</h3><ol>\n<li>安装eslint依赖并初始化</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint -D</span><br><span class=\"line\"><span class=\"comment\">// 安装好后，进行初始化</span></span><br><span class=\"line\">npx eslint --init</span><br></pre></td></tr></table></figure>\n\n<p>初始化的步骤如下：</p>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1949611d7e76456b99d33ff403edc9de~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca97821402b243cab0cdcf7c5eea1479~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这一步需要根据你项目的框架选择，vue.js:<br><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f327df04bb544a0ba9f847a6b3acbd4f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>Vue3使用了TypeScript所以需要选“Yes”:</p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/126e84330df14658b15ebff793d73aaa~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c5dc24999ae4865baf713c5e6ab6a8f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这个选什么就会生成一个什么文件进行配置eslint规则，根据自己的需要选择，我这里选择的是JSON（我选JavaScript，生成的.eslintrc.js会报错），然后继续，一路到底就初始化好了。<br><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b95c049351f84145a5eb76d8e31eeecd~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>配置eslint规则</li>\n</ol>\n<p>然后根据自己的需要在.eslintrc.json配置eslint规则，可以参考<a href=\"https://eslint.bootcss.com/docs/rules/\">eslint规则中文版</a>。</p>\n<ol start=\"3\">\n<li>安装eslint插件</li>\n</ol>\n<p>配置完成后，若vscode没有安装eslint插件，需要安装eslint插件。</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18ff6f1c906f4afc94e60f81d4b4a9c2~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>安装完后，需要给vscode设置一下：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置prettier\"><a href=\"#配置prettier\" class=\"headerlink\" title=\"配置prettier\"></a>配置prettier</h3><ol>\n<li>安装依赖</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i prettier eslint-<span class=\"built_in\">config</span>-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置文件：</li>\n</ol>\n<p>在项目根目录下新建.prettierrc文件，然后写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;semi&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tabWidth&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;trailingComma&quot;</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;arrowParens&quot;</span>: <span class=\"string\">&quot;avoid&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据需要配置自己的prettier规则：可参考<a href=\"https://prettier.io/docs/en/options.html\">prettier规则</a></p>\n<ol start=\"3\">\n<li>vscode安装prettier插件：</li>\n</ol>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6e6d317e69149f48ca138ebce710ac5~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>然后在vscode设置中，把这个勾上，保存时就能自动修复：</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c1ea4ae9f6242b4be65a48ccb635eb4~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>并在vscode设置中添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;<span class=\"selector-attr\">[javascript]</span>&quot;: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>然后在.eslintrc.json文件中extends中添加：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;extends&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint:recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:vue/vue3-essential&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier&quot;</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置代码提交规范husky\"><a href=\"#配置代码提交规范husky\" class=\"headerlink\" title=\"配置代码提交规范husky\"></a>配置代码提交规范husky</h3><p>安装依赖</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> -D husky</span><br></pre></td></tr></table></figure>\n<p>初始化</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky <span class=\"keyword\">install</span> .husky</span><br></pre></td></tr></table></figure>\n<p>添加commit-msg</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky <span class=\"keyword\">add</span> .husky/<span class=\"keyword\">commit</span>-msg &quot;node scripts/verifyCommit.js&quot;</span><br></pre></td></tr></table></figure>\n<p>在根目录下创建scripts文件夹，然后在该文件夹下创建verifyCommit.js文件：<br>然后写入下面代码，在提交时就会执行检验commit的信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line no-undef, @typescript-eslint/no-var-requires</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">  .readFileSync(<span class=\"string\">&#x27;.git/COMMIT_EDITMSG&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">  .trim()</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">const</span> commitRE = <span class=\"regexp\">/^(revert: )?(feat|fix|docs|dx|style|refactor|perf|test|workflow|build|ci|chore|types|wip|release)((.+))?: .&#123;1,50&#125;/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergeRe = <span class=\"regexp\">/^(Merge pull request|Merge branch)/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!commitRE.test(msg)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!mergeRe.test(msg))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;git commit信息校验不通过&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`git commit的信息格式不对, 需要使用 title(scope): desc的格式</span></span><br><span class=\"line\"><span class=\"string\">      比如 fix: xxbug</span></span><br><span class=\"line\"><span class=\"string\">      feat(test): add new </span></span><br><span class=\"line\"><span class=\"string\">      具体校验逻辑看 scripts/verifyCommit.js</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\">    process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;git commit信息校验通过&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在检验commit提交信息前需要先检验eslint规则，有个钩子pre-commit，在commit之前会执行。在工程终端中执行：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky <span class=\"keyword\">add</span> .husky/pre-<span class=\"keyword\">commit</span> &quot;npm run lint&quot;</span><br></pre></td></tr></table></figure>\n<p>然后在package.json的scripts中，加入下面的语句：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;eslint --fix --ext .js,vue src/&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后可以提交一下代码检测一下是否加上了eslint和commitlint.<br>可能会遇到一些问题，慢慢一个一个解决后就可以提交了。</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>在多人合作的项目中，如果没有规范约束，可能每个人提上来的代码都要被格式化一遍，不便于查看该功能具体修改了哪些代码，并且commit信息写的五花八门，有时也不利于理解，所以规范是一个非常nice的东西，有了它，在多人合作的项目中，避免了很多不必要的麻烦，也会节省很多时间。</p>\n<p>本人将如何一步一步添加规范的过程记录下来，方便和我一样有同样需求的小伙伴学习。</p>\n<h3 id=\"配置eslint\"><a href=\"#配置eslint\" class=\"headerlink\" title=\"配置eslint\"></a>配置eslint</h3><ol>\n<li>安装eslint依赖并初始化</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint -D</span><br><span class=\"line\"><span class=\"comment\">// 安装好后，进行初始化</span></span><br><span class=\"line\">npx eslint --init</span><br></pre></td></tr></table></figure>\n\n<p>初始化的步骤如下：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1949611d7e76456b99d33ff403edc9de~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca97821402b243cab0cdcf7c5eea1479~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>这一步需要根据你项目的框架选择，vue.js:<br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f327df04bb544a0ba9f847a6b3acbd4f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>Vue3使用了TypeScript所以需要选“Yes”:</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/126e84330df14658b15ebff793d73aaa~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c5dc24999ae4865baf713c5e6ab6a8f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>这个选什么就会生成一个什么文件进行配置eslint规则，根据自己的需要选择，我这里选择的是JSON（我选JavaScript，生成的.eslintrc.js会报错），然后继续，一路到底就初始化好了。<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b95c049351f84145a5eb76d8e31eeecd~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>配置eslint规则</li>\n</ol>\n<p>然后根据自己的需要在.eslintrc.json配置eslint规则，可以参考<a href=\"https://eslint.bootcss.com/docs/rules/\">eslint规则中文版</a>。</p>\n<ol start=\"3\">\n<li>安装eslint插件</li>\n</ol>\n<p>配置完成后，若vscode没有安装eslint插件，需要安装eslint插件。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18ff6f1c906f4afc94e60f81d4b4a9c2~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>安装完后，需要给vscode设置一下：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置prettier\"><a href=\"#配置prettier\" class=\"headerlink\" title=\"配置prettier\"></a>配置prettier</h3><ol>\n<li>安装依赖</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i prettier eslint-<span class=\"built_in\">config</span>-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置文件：</li>\n</ol>\n<p>在项目根目录下新建.prettierrc文件，然后写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;semi&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;tabWidth&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;trailingComma&quot;</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;arrowParens&quot;</span>: <span class=\"string\">&quot;avoid&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据需要配置自己的prettier规则：可参考<a href=\"https://prettier.io/docs/en/options.html\">prettier规则</a></p>\n<ol start=\"3\">\n<li>vscode安装prettier插件：</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6e6d317e69149f48ca138ebce710ac5~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>然后在vscode设置中，把这个勾上，保存时就能自动修复：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c1ea4ae9f6242b4be65a48ccb635eb4~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>并在vscode设置中添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;<span class=\"selector-attr\">[javascript]</span>&quot;: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>然后在.eslintrc.json文件中extends中添加：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;extends&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint:recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:vue/vue3-essential&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;prettier&quot;</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置代码提交规范husky\"><a href=\"#配置代码提交规范husky\" class=\"headerlink\" title=\"配置代码提交规范husky\"></a>配置代码提交规范husky</h3><p>安装依赖</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> -D husky</span><br></pre></td></tr></table></figure>\n<p>初始化</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky <span class=\"keyword\">install</span> .husky</span><br></pre></td></tr></table></figure>\n<p>添加commit-msg</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky <span class=\"keyword\">add</span> .husky/<span class=\"keyword\">commit</span>-msg &quot;node scripts/verifyCommit.js&quot;</span><br></pre></td></tr></table></figure>\n<p>在根目录下创建scripts文件夹，然后在该文件夹下创建verifyCommit.js文件：<br>然后写入下面代码，在提交时就会执行检验commit的信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line no-undef, @typescript-eslint/no-var-requires</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> msg = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">  .readFileSync(<span class=\"string\">&#x27;.git/COMMIT_EDITMSG&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">  .trim()</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">const</span> commitRE = <span class=\"regexp\">/^(revert: )?(feat|fix|docs|dx|style|refactor|perf|test|workflow|build|ci|chore|types|wip|release)((.+))?: .&#123;1,50&#125;/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergeRe = <span class=\"regexp\">/^(Merge pull request|Merge branch)/</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!commitRE.test(msg)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!mergeRe.test(msg))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;git commit信息校验不通过&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">`git commit的信息格式不对, 需要使用 title(scope): desc的格式</span></span><br><span class=\"line\"><span class=\"string\">      比如 fix: xxbug</span></span><br><span class=\"line\"><span class=\"string\">      feat(test): add new </span></span><br><span class=\"line\"><span class=\"string\">      具体校验逻辑看 scripts/verifyCommit.js</span></span><br><span class=\"line\"><span class=\"string\">    `</span>)</span><br><span class=\"line\">    process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;git commit信息校验通过&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在检验commit提交信息前需要先检验eslint规则，有个钩子pre-commit，在commit之前会执行。在工程终端中执行：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky <span class=\"keyword\">add</span> .husky/pre-<span class=\"keyword\">commit</span> &quot;npm run lint&quot;</span><br></pre></td></tr></table></figure>\n<p>然后在package.json的scripts中，加入下面的语句：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;eslint --fix --ext .js,vue src/&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后可以提交一下代码检测一下是否加上了eslint和commitlint.<br>可能会遇到一些问题，慢慢一个一个解决后就可以提交了。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1949611d7e76456b99d33ff403edc9de~tplv-k3u1fbpfcp-watermark.image","popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"Vue3+Typescript项目配置eslint和commitlint","path":"posts/16572/","eyeCatchImage":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1949611d7e76456b99d33ff403edc9de~tplv-k3u1fbpfcp-watermark.image","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-24T03:26:53.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-24T03:26:53.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2474},{"title":"Webpack常用loader","copyright":true,"comments":1,"abbrlink":28173,"date":"2021-09-17T12:37:15.000Z","_content":"\n### 常用loader\nloader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。\n\n**样式**\n - css-loader : 解析css文件中代码\n -  style-loader : 将css模块作为样式导出到DOM中\n -  less-loader : 加载和转义less文件\n - sass-loader : 加载和转义sass/scss文件\n -  postcss-loader: 自动添加css的兼容前缀\n\n**脚本转换编译**\n\n - script-loader : 在全局上下文中执行一次javascript文件，不需要解析\n - babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析\n\n**Files文件**\n\n - url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL\n -  raw-loader : 加载文件原始内容(utf-8格式)\n\n**加载框架**\n\n - vue-loader : 加载和转义vue组件\n - react-hot-loader : 动态刷新和转义react组件中修改的部分\n**校验测试：**\neslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。\n\n**vue-template-compiler**\n作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template => ast => render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！\n**vue-loader**\n用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：```<template>```，```<script>``` 和 ```<style>```，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。\n","source":"_posts/Webpack常用loader.md","raw":"---\ntitle: Webpack常用loader\ntags: Webpack\ncategories: Webpack\ncopyright: true\ncomments: true\nabbrlink: 28173\ndate: 2021-09-17 20:37:15\n---\n\n### 常用loader\nloader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。\n\n**样式**\n - css-loader : 解析css文件中代码\n -  style-loader : 将css模块作为样式导出到DOM中\n -  less-loader : 加载和转义less文件\n - sass-loader : 加载和转义sass/scss文件\n -  postcss-loader: 自动添加css的兼容前缀\n\n**脚本转换编译**\n\n - script-loader : 在全局上下文中执行一次javascript文件，不需要解析\n - babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析\n\n**Files文件**\n\n - url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL\n -  raw-loader : 加载文件原始内容(utf-8格式)\n\n**加载框架**\n\n - vue-loader : 加载和转义vue组件\n - react-hot-loader : 动态刷新和转义react组件中修改的部分\n**校验测试：**\neslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。\n\n**vue-template-compiler**\n作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template => ast => render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！\n**vue-loader**\n用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：```<template>```，```<script>``` 和 ```<style>```，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。\n","slug":"Webpack常用loader","published":1,"updated":"2022-07-13T01:47:21.922Z","layout":"post","photos":[],"link":"","_id":"clqdf8htd001644t1faj3gmqy","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"常用loader\"><a href=\"#常用loader\" class=\"headerlink\" title=\"常用loader\"></a>常用loader</h3><p>loader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。</p>\n<p><strong>样式</strong></p>\n<ul>\n<li>css-loader : 解析css文件中代码</li>\n<li> style-loader : 将css模块作为样式导出到DOM中</li>\n<li> less-loader : 加载和转义less文件</li>\n<li>sass-loader : 加载和转义sass/scss文件</li>\n<li> postcss-loader: 自动添加css的兼容前缀</li>\n</ul>\n<p><strong>脚本转换编译</strong></p>\n<ul>\n<li>script-loader : 在全局上下文中执行一次javascript文件，不需要解析</li>\n<li>babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析</li>\n</ul>\n<p><strong>Files文件</strong></p>\n<ul>\n<li>url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL</li>\n<li> raw-loader : 加载文件原始内容(utf-8格式)</li>\n</ul>\n<p><strong>加载框架</strong></p>\n<ul>\n<li>vue-loader : 加载和转义vue组件</li>\n<li>react-hot-loader : 动态刷新和转义react组件中修改的部分</li>\n</ul>\n<p><strong>校验测试：</strong><br>eslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。</p>\n<p><strong>vue-template-compiler</strong><br>作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template =&gt; ast =&gt; render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！<br><strong>vue-loader</strong><br>用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：<code>&lt;template&gt;</code>，<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"常用loader\"><a href=\"#常用loader\" class=\"headerlink\" title=\"常用loader\"></a>常用loader</h3><p>loader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。</p>\n<p><strong>样式</strong></p>\n<ul>\n<li>css-loader : 解析css文件中代码</li>\n<li> style-loader : 将css模块作为样式导出到DOM中</li>\n<li> less-loader : 加载和转义less文件</li>\n<li>sass-loader : 加载和转义sass/scss文件</li>\n<li> postcss-loader: 自动添加css的兼容前缀</li>\n</ul>\n<p><strong>脚本转换编译</strong></p>\n<ul>\n<li>script-loader : 在全局上下文中执行一次javascript文件，不需要解析</li>\n<li>babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析</li>\n</ul>\n<p><strong>Files文件</strong></p>\n<ul>\n<li>url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL</li>\n<li> raw-loader : 加载文件原始内容(utf-8格式)</li>\n</ul>\n<p><strong>加载框架</strong></p>\n<ul>\n<li>vue-loader : 加载和转义vue组件</li>\n<li>react-hot-loader : 动态刷新和转义react组件中修改的部分</li>\n</ul>\n<p><strong>校验测试：</strong><br>eslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。</p>\n<p><strong>vue-template-compiler</strong><br>作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template =&gt; ast =&gt; render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！<br><strong>vue-loader</strong><br>用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：<code>&lt;template&gt;</code>，<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"Webpack常用loader","path":"posts/28173/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-09-17T12:37:15.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-09-17T12:37:15.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Webpack","tags":["Webpack"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":991},{"title":"Webpack常用plugin","copyright":true,"comments":1,"abbrlink":3002,"date":"2021-09-17T12:41:48.000Z","_content":"\n### 常用plugin\n使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。\nplugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。\n\n - define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时\n   创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。\n   例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。\n - copy-webpack-plugin：将个别文件或整个目录复制到构建目录。\n - postcss-namespace: css命名\n - BannerPlugin：对所有的文件打包后添加一个版权声明\n - uglifyjs-webpack-plugin：对 JS 进行压缩混淆\n - HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中\n - Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果\n - extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中\n - optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重\n - html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好\n - clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去\n\n```javascript\nlet CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    plugins: [\n        // 打包前先清空\n        new CleanWebpackPlugin('dist')  \n    ]\n}\n\n```\n","source":"_posts/Webpack常用plugin.md","raw":"---\ntitle: Webpack常用plugin\ntags: Webpack\ncategories: Webpack\ncopyright: true\ncomments: true\nabbrlink: 3002\ndate: 2021-09-17 20:41:48\n---\n\n### 常用plugin\n使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。\nplugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。\n\n - define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时\n   创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。\n   例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。\n - copy-webpack-plugin：将个别文件或整个目录复制到构建目录。\n - postcss-namespace: css命名\n - BannerPlugin：对所有的文件打包后添加一个版权声明\n - uglifyjs-webpack-plugin：对 JS 进行压缩混淆\n - HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中\n - Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果\n - extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中\n - optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重\n - html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好\n - clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去\n\n```javascript\nlet CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    plugins: [\n        // 打包前先清空\n        new CleanWebpackPlugin('dist')  \n    ]\n}\n\n```\n","slug":"Webpack常用plugin","published":1,"updated":"2022-07-13T01:47:21.925Z","layout":"post","photos":[],"link":"","_id":"clqdf8hte001b44t198t2fvk9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"常用plugin\"><a href=\"#常用plugin\" class=\"headerlink\" title=\"常用plugin\"></a>常用plugin</h3><p>使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。<br>plugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。</p>\n<ul>\n<li>define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时<br>创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。<br>例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。</li>\n<li>copy-webpack-plugin：将个别文件或整个目录复制到构建目录。</li>\n<li>postcss-namespace: css命名</li>\n<li>BannerPlugin：对所有的文件打包后添加一个版权声明</li>\n<li>uglifyjs-webpack-plugin：对 JS 进行压缩混淆</li>\n<li>HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中</li>\n<li>Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果</li>\n<li>extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中</li>\n<li>optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重</li>\n<li>html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好</li>\n<li>clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 打包前先清空</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(<span class=\"string\">&#x27;dist&#x27;</span>)  </span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"常用plugin\"><a href=\"#常用plugin\" class=\"headerlink\" title=\"常用plugin\"></a>常用plugin</h3><p>使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。<br>plugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。</p>\n<ul>\n<li>define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时<br>创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。<br>例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。</li>\n<li>copy-webpack-plugin：将个别文件或整个目录复制到构建目录。</li>\n<li>postcss-namespace: css命名</li>\n<li>BannerPlugin：对所有的文件打包后添加一个版权声明</li>\n<li>uglifyjs-webpack-plugin：对 JS 进行压缩混淆</li>\n<li>HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中</li>\n<li>Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果</li>\n<li>extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中</li>\n<li>optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重</li>\n<li>html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好</li>\n<li>clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 打包前先清空</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(<span class=\"string\">&#x27;dist&#x27;</span>)  </span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"Webpack常用plugin","path":"posts/3002/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-09-17T12:41:48.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-09-17T12:41:48.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Webpack","tags":["Webpack"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":969},{"title":"Webpack打包原理","copyright":true,"comments":1,"abbrlink":18755,"date":"2021-09-17T12:42:55.000Z","_content":"### 打包原理\n（1）读取入口文件，如项目中的main.js；\n\n（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；\n\n（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；\n\n（4）递归所有模块\n\n（5）生成浏览器可运行的代码\n\n### 打包优化\n1.自带优化\n\na)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行\n\nb)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包\n\n2.插件或其他自定义配置\n\n速度方面：\n\na)happypack 多线程打包，但是项目体积小的话反而更慢\n\n体积方面：\n\na) webpack.IgnorePlugin，不需要的语言包不打包\n\nb) external:{'vue':'vue'}配置不需要打包的文件\n\nc) modules:{noParse:/vue/} 配置不需要解析的文件\n\nd) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上\n\ne) 抽离公共代码块:  splitChunkPlugin\n","source":"_posts/Webpack打包原理.md","raw":"---\ntitle: Webpack打包原理\ntags: Webpack\ncategories: Webpack\ncopyright: true\ncomments: true\nabbrlink: 18755\ndate: 2021-09-17 20:42:55\n---\n### 打包原理\n（1）读取入口文件，如项目中的main.js；\n\n（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；\n\n（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；\n\n（4）递归所有模块\n\n（5）生成浏览器可运行的代码\n\n### 打包优化\n1.自带优化\n\na)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行\n\nb)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包\n\n2.插件或其他自定义配置\n\n速度方面：\n\na)happypack 多线程打包，但是项目体积小的话反而更慢\n\n体积方面：\n\na) webpack.IgnorePlugin，不需要的语言包不打包\n\nb) external:{'vue':'vue'}配置不需要打包的文件\n\nc) modules:{noParse:/vue/} 配置不需要解析的文件\n\nd) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上\n\ne) 抽离公共代码块:  splitChunkPlugin\n","slug":"Webpack打包原理","published":1,"updated":"2022-07-13T01:47:21.928Z","layout":"post","photos":[],"link":"","_id":"clqdf8hte001e44t15w6pep8z","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"打包原理\"><a href=\"#打包原理\" class=\"headerlink\" title=\"打包原理\"></a>打包原理</h3><p>（1）读取入口文件，如项目中的main.js；</p>\n<p>（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；</p>\n<p>（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；</p>\n<p>（4）递归所有模块</p>\n<p>（5）生成浏览器可运行的代码</p>\n<h3 id=\"打包优化\"><a href=\"#打包优化\" class=\"headerlink\" title=\"打包优化\"></a>打包优化</h3><p>1.自带优化</p>\n<p>a)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行</p>\n<p>b)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包</p>\n<p>2.插件或其他自定义配置</p>\n<p>速度方面：</p>\n<p>a)happypack 多线程打包，但是项目体积小的话反而更慢</p>\n<p>体积方面：</p>\n<p>a) webpack.IgnorePlugin，不需要的语言包不打包</p>\n<p>b) external:{‘vue’:’vue’}配置不需要打包的文件</p>\n<p>c) modules:{noParse:/vue/} 配置不需要解析的文件</p>\n<p>d) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上</p>\n<p>e) 抽离公共代码块:  splitChunkPlugin</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"打包原理\"><a href=\"#打包原理\" class=\"headerlink\" title=\"打包原理\"></a>打包原理</h3><p>（1）读取入口文件，如项目中的main.js；</p>\n<p>（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；</p>\n<p>（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；</p>\n<p>（4）递归所有模块</p>\n<p>（5）生成浏览器可运行的代码</p>\n<h3 id=\"打包优化\"><a href=\"#打包优化\" class=\"headerlink\" title=\"打包优化\"></a>打包优化</h3><p>1.自带优化</p>\n<p>a)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行</p>\n<p>b)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包</p>\n<p>2.插件或其他自定义配置</p>\n<p>速度方面：</p>\n<p>a)happypack 多线程打包，但是项目体积小的话反而更慢</p>\n<p>体积方面：</p>\n<p>a) webpack.IgnorePlugin，不需要的语言包不打包</p>\n<p>b) external:{‘vue’:’vue’}配置不需要打包的文件</p>\n<p>c) modules:{noParse:/vue/} 配置不需要解析的文件</p>\n<p>d) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上</p>\n<p>e) 抽离公共代码块:  splitChunkPlugin</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"Webpack打包原理","path":"posts/18755/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-09-17T12:42:55.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-09-17T12:42:55.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Webpack","tags":["Webpack"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":443},{"title":"import和require区别","copyright":true,"comments":1,"abbrlink":45356,"date":"2021-03-14T12:58:20.000Z","_content":"### 遵循规范\nrequire 是 AMD规范引入方式\nimport是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法\n### 调用时间\nrequire是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）\nimport是编译时调用，所以必须放在文件开头\n### 本质\nrequire是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量\nimport是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require\n\nrequire / exports ：\n遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。\n用法只有以下三种简单的写法：\n```\nconst fs = require('fs')\nexports.fs = fs\nmodule.exports = fs\n```\n\nimport / export：\n遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。\n写法就比较多种多样：\n```\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\nexport default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n```\n\n通过require引入基础数据类型时，属于复制该变量。\n通过require引入复杂数据类型时，数据浅拷贝该对象。\n出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。\nCommonJS模块默认export的是一个对象，即使导出的是基础数据类型。\n\n总结：\n    \n| 规范 | 加载方式 | 命令|特点|\n|--|--|\n| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|\n| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|\n \n 参考：https://www.cnblogs.com/myfirstboke/p/10563597.html","source":"_posts/import和require区别.md","raw":"---\ntitle: import和require区别\ntags: 前端工程化\ncategories: 前端工程化\ncopyright: true\ncomments: true\nabbrlink: 45356\ndate: 2021-03-14 20:58:20\n---\n### 遵循规范\nrequire 是 AMD规范引入方式\nimport是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法\n### 调用时间\nrequire是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）\nimport是编译时调用，所以必须放在文件开头\n### 本质\nrequire是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量\nimport是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require\n\nrequire / exports ：\n遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。\n用法只有以下三种简单的写法：\n```\nconst fs = require('fs')\nexports.fs = fs\nmodule.exports = fs\n```\n\nimport / export：\n遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。\n写法就比较多种多样：\n```\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\nexport default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n```\n\n通过require引入基础数据类型时，属于复制该变量。\n通过require引入复杂数据类型时，数据浅拷贝该对象。\n出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。\nCommonJS模块默认export的是一个对象，即使导出的是基础数据类型。\n\n总结：\n    \n| 规范 | 加载方式 | 命令|特点|\n|--|--|\n| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|\n| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|\n \n 参考：https://www.cnblogs.com/myfirstboke/p/10563597.html","slug":"import和require区别","published":1,"updated":"2022-07-13T01:47:21.934Z","layout":"post","photos":[],"link":"","_id":"clqdf8htf001i44t1ffxt1i7q","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"遵循规范\"><a href=\"#遵循规范\" class=\"headerlink\" title=\"遵循规范\"></a>遵循规范</h3><p>require 是 AMD规范引入方式<br>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p>\n<h3 id=\"调用时间\"><a href=\"#调用时间\" class=\"headerlink\" title=\"调用时间\"></a>调用时间</h3><p>require是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）<br>import是编译时调用，所以必须放在文件开头</p>\n<h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><p>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量<br>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p>\n<p>require / exports ：<br>遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。<br>用法只有以下三种简单的写法：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.fs = fs</span><br><span class=\"line\"><span class=\"built_in\">module</span>.<span class=\"built_in\">exports</span> = fs</span><br></pre></td></tr></table></figure>\n\n<p>import / export：<br>遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。<br>写法就比较多种多样：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> fs&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile <span class=\"keyword\">as</span> read&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs, &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> readFile</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;readFile, read&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过require引入基础数据类型时，属于复制该变量。<br>通过require引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。<br>CommonJS模块默认export的是一个对象，即使导出的是基础数据类型。</p>\n<p>总结：</p>\n<p>| 规范 | 加载方式 | 命令|特点|<br>|–|–|<br>| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|<br>| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|</p>\n<p> 参考：<a href=\"https://www.cnblogs.com/myfirstboke/p/10563597.html\">https://www.cnblogs.com/myfirstboke/p/10563597.html</a></p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"遵循规范\"><a href=\"#遵循规范\" class=\"headerlink\" title=\"遵循规范\"></a>遵循规范</h3><p>require 是 AMD规范引入方式<br>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p>\n<h3 id=\"调用时间\"><a href=\"#调用时间\" class=\"headerlink\" title=\"调用时间\"></a>调用时间</h3><p>require是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）<br>import是编译时调用，所以必须放在文件开头</p>\n<h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><p>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量<br>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p>\n<p>require / exports ：<br>遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。<br>用法只有以下三种简单的写法：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.fs = fs</span><br><span class=\"line\"><span class=\"built_in\">module</span>.<span class=\"built_in\">exports</span> = fs</span><br></pre></td></tr></table></figure>\n\n<p>import / export：<br>遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。<br>写法就比较多种多样：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> fs&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile <span class=\"keyword\">as</span> read&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs, &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> readFile</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;readFile, read&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过require引入基础数据类型时，属于复制该变量。<br>通过require引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。<br>CommonJS模块默认export的是一个对象，即使导出的是基础数据类型。</p>\n<p>总结：</p>\n<p>| 规范 | 加载方式 | 命令|特点|<br>|–|–|<br>| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|<br>| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|</p>\n<p> 参考：<a href=\"https://www.cnblogs.com/myfirstboke/p/10563597.html\">https://www.cnblogs.com/myfirstboke/p/10563597.html</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"import和require区别","path":"posts/45356/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-03-14T12:58:20.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-03-14T12:58:20.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"前端工程化","tags":["前端工程化"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1177},{"title":"JS循环知多少","copyright":true,"comments":1,"abbrlink":13579,"date":"2022-04-08T09:06:35.000Z","_content":"\n### 数组遍历\n#### for循环、while、do...while\n听说速度最快，效率最高，其他不过多解释。\n```javascript\nfor(let i = 0; i< 5; i++) {\n  console.log(i)\n}\n```\n\n#### for...of\n遍历的是值，能正确响应return、break、continue语句。不仅可以循环遍历数组对象。还可以迭代 Array、Map、Set、String 等对象。\n```javascript\n// 遍历String\nlet str = \"Hello\";\nfor (let value of str) {\n  console.log(value)\n}\n// H e l l o\n\n// 遍历Map\nlet iterable = new Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\nfor (let entry of iterable) {\n  console.log(entry);\n}\n// [\"a\", 1]\n// [\"b\", 2]\n// [\"c\", 3]\nfor (let [key, value] of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n#### 数组内置方法：\n#### forEach\n不能中断，除非手动抛出异常```throw new Error()```, return、break、continue都不能跳出循环\n#### map()\n处理数组元素，返回新数组\n#### filter()\n过滤，返回新数组\n#### find()\n过滤，返回找到的元素或undefined，非数组\n#### reduce()\n能干好多事：[看这里](https://jelly.jd.com/article/6006b1035b6c6a01506c87a1)\n#### erery()\n检测数组元素是否全部符合指定条件\n#### some()\n检测数组是否存在一个符合指定条件的元素\n\n\n### 对象遍历\n#### for...in\n遍历对象。虽然可以遍历数组，遍历的是数组的索引，并且索引会变成string类型，不做推荐，很多坑。\n> for...in只会遍历自身的属性以及继承下来并且设置为可遍历的属性(继承的类的属性是默认不可遍历的, 但这个属性是更改为可以遍历的，就会造成遍历到不属于自身的属性)必要时可以结合使用hasOwnProperty方法，在循环内部判断一下。\n```javascript\nconst person = { name: '老张' };\nfor (let key in person) {  \n    if (person.hasOwnProperty(key)) {   \n         console.log(key); // name \n      }\n}\n```\n#### Object.keys() 和 Object.getOwnPropertyNames()\n\n\n\n\n\n## 性能\n原始for循环 > forEach > for...of > map > for...in\n\n\n","source":"_posts/js循环知多少.md","raw":"---\ntitle: JS循环知多少\ntags: JavaScript\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 13579\ndate: 2022-04-08 17:06:35\n---\n\n### 数组遍历\n#### for循环、while、do...while\n听说速度最快，效率最高，其他不过多解释。\n```javascript\nfor(let i = 0; i< 5; i++) {\n  console.log(i)\n}\n```\n\n#### for...of\n遍历的是值，能正确响应return、break、continue语句。不仅可以循环遍历数组对象。还可以迭代 Array、Map、Set、String 等对象。\n```javascript\n// 遍历String\nlet str = \"Hello\";\nfor (let value of str) {\n  console.log(value)\n}\n// H e l l o\n\n// 遍历Map\nlet iterable = new Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\nfor (let entry of iterable) {\n  console.log(entry);\n}\n// [\"a\", 1]\n// [\"b\", 2]\n// [\"c\", 3]\nfor (let [key, value] of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n```\n#### 数组内置方法：\n#### forEach\n不能中断，除非手动抛出异常```throw new Error()```, return、break、continue都不能跳出循环\n#### map()\n处理数组元素，返回新数组\n#### filter()\n过滤，返回新数组\n#### find()\n过滤，返回找到的元素或undefined，非数组\n#### reduce()\n能干好多事：[看这里](https://jelly.jd.com/article/6006b1035b6c6a01506c87a1)\n#### erery()\n检测数组元素是否全部符合指定条件\n#### some()\n检测数组是否存在一个符合指定条件的元素\n\n\n### 对象遍历\n#### for...in\n遍历对象。虽然可以遍历数组，遍历的是数组的索引，并且索引会变成string类型，不做推荐，很多坑。\n> for...in只会遍历自身的属性以及继承下来并且设置为可遍历的属性(继承的类的属性是默认不可遍历的, 但这个属性是更改为可以遍历的，就会造成遍历到不属于自身的属性)必要时可以结合使用hasOwnProperty方法，在循环内部判断一下。\n```javascript\nconst person = { name: '老张' };\nfor (let key in person) {  \n    if (person.hasOwnProperty(key)) {   \n         console.log(key); // name \n      }\n}\n```\n#### Object.keys() 和 Object.getOwnPropertyNames()\n\n\n\n\n\n## 性能\n原始for循环 > forEach > for...of > map > for...in\n\n\n","slug":"js循环知多少","published":1,"updated":"2022-07-13T01:47:21.936Z","layout":"post","photos":[],"link":"","_id":"clqdf8htg001l44t1e1ze8uie","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"数组遍历\"><a href=\"#数组遍历\" class=\"headerlink\" title=\"数组遍历\"></a>数组遍历</h3><h4 id=\"for循环、while、do…while\"><a href=\"#for循环、while、do…while\" class=\"headerlink\" title=\"for循环、while、do…while\"></a>for循环、while、do…while</h4><p>听说速度最快，效率最高，其他不过多解释。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h4><p>遍历的是值，能正确响应return、break、continue语句。不仅可以循环遍历数组对象。还可以迭代 Array、Map、Set、String 等对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历String</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// H e l l o</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历Map</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>], [<span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>], [<span class=\"string\">&quot;c&quot;</span>, <span class=\"number\">3</span>]]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entry <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entry);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [&quot;a&quot;, 1]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;b&quot;, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;c&quot;, 3]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组内置方法：\"><a href=\"#数组内置方法：\" class=\"headerlink\" title=\"数组内置方法：\"></a>数组内置方法：</h4><h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h4><p>不能中断，除非手动抛出异常<code>throw new Error()</code>, return、break、continue都不能跳出循环</p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h4><p>处理数组元素，返回新数组</p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h4><p>过滤，返回新数组</p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h4><p>过滤，返回找到的元素或undefined，非数组</p>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h4><p>能干好多事：<a href=\"https://jelly.jd.com/article/6006b1035b6c6a01506c87a1\">看这里</a></p>\n<h4 id=\"erery\"><a href=\"#erery\" class=\"headerlink\" title=\"erery()\"></a>erery()</h4><p>检测数组元素是否全部符合指定条件</p>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h4><p>检测数组是否存在一个符合指定条件的元素</p>\n<h3 id=\"对象遍历\"><a href=\"#对象遍历\" class=\"headerlink\" title=\"对象遍历\"></a>对象遍历</h3><h4 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h4><p>遍历对象。虽然可以遍历数组，遍历的是数组的索引，并且索引会变成string类型，不做推荐，很多坑。</p>\n<blockquote>\n<p>for…in只会遍历自身的属性以及继承下来并且设置为可遍历的属性(继承的类的属性是默认不可遍历的, 但这个属性是更改为可以遍历的，就会造成遍历到不属于自身的属性)必要时可以结合使用hasOwnProperty方法，在循环内部判断一下。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;老张&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> person) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (person.hasOwnProperty(key)) &#123;   </span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// name </span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Object-keys-和-Object-getOwnPropertyNames\"><a href=\"#Object-keys-和-Object-getOwnPropertyNames\" class=\"headerlink\" title=\"Object.keys() 和 Object.getOwnPropertyNames()\"></a>Object.keys() 和 Object.getOwnPropertyNames()</h4><h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>原始for循环 &gt; forEach &gt; for…of &gt; map &gt; for…in</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"数组遍历\"><a href=\"#数组遍历\" class=\"headerlink\" title=\"数组遍历\"></a>数组遍历</h3><h4 id=\"for循环、while、do…while\"><a href=\"#for循环、while、do…while\" class=\"headerlink\" title=\"for循环、while、do…while\"></a>for循环、while、do…while</h4><p>听说速度最快，效率最高，其他不过多解释。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h4><p>遍历的是值，能正确响应return、break、continue语句。不仅可以循环遍历数组对象。还可以迭代 Array、Map、Set、String 等对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历String</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// H e l l o</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历Map</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterable = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>], [<span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>], [<span class=\"string\">&quot;c&quot;</span>, <span class=\"number\">3</span>]]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entry <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(entry);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [&quot;a&quot;, 1]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;b&quot;, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;c&quot;, 3]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组内置方法：\"><a href=\"#数组内置方法：\" class=\"headerlink\" title=\"数组内置方法：\"></a>数组内置方法：</h4><h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h4><p>不能中断，除非手动抛出异常<code>throw new Error()</code>, return、break、continue都不能跳出循环</p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h4><p>处理数组元素，返回新数组</p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h4><p>过滤，返回新数组</p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h4><p>过滤，返回找到的元素或undefined，非数组</p>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h4><p>能干好多事：<a href=\"https://jelly.jd.com/article/6006b1035b6c6a01506c87a1\">看这里</a></p>\n<h4 id=\"erery\"><a href=\"#erery\" class=\"headerlink\" title=\"erery()\"></a>erery()</h4><p>检测数组元素是否全部符合指定条件</p>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h4><p>检测数组是否存在一个符合指定条件的元素</p>\n<h3 id=\"对象遍历\"><a href=\"#对象遍历\" class=\"headerlink\" title=\"对象遍历\"></a>对象遍历</h3><h4 id=\"for…in\"><a href=\"#for…in\" class=\"headerlink\" title=\"for…in\"></a>for…in</h4><p>遍历对象。虽然可以遍历数组，遍历的是数组的索引，并且索引会变成string类型，不做推荐，很多坑。</p>\n<blockquote>\n<p>for…in只会遍历自身的属性以及继承下来并且设置为可遍历的属性(继承的类的属性是默认不可遍历的, 但这个属性是更改为可以遍历的，就会造成遍历到不属于自身的属性)必要时可以结合使用hasOwnProperty方法，在循环内部判断一下。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;老张&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> person) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (person.hasOwnProperty(key)) &#123;   </span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(key); <span class=\"comment\">// name </span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Object-keys-和-Object-getOwnPropertyNames\"><a href=\"#Object-keys-和-Object-getOwnPropertyNames\" class=\"headerlink\" title=\"Object.keys() 和 Object.getOwnPropertyNames()\"></a>Object.keys() 和 Object.getOwnPropertyNames()</h4><h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>原始for循环 &gt; forEach &gt; for…of &gt; map &gt; for…in</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"JS循环知多少","path":"posts/13579/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-04-08T09:06:35.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-04-08T09:06:35.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JavaScript"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1173},{"title":"html知识点记录","copyright":true,"comments":1,"abbrlink":60546,"date":"2022-03-28T09:57:11.000Z","_content":"\n### 1. !DOCTYPE 标签：\n\n它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令.\n\n### 2. H5新特性\n\n媒体播放的 video 和 audio\n本地存储 localStorage 和 sessionStorage\n离线应用 manifest\n桌面通知 Notifications\n语意化标签 article、footer、header、nav、section\n增强表单控件 calendar、date、time、email、url、search\n地理位置 Geolocation\n多任务 webworker\n全双工通信协议 websocket\n历史管理 history\n跨域资源共享(CORS) Access-Control-Allow-Origin\n页面可见性改变事件 visibilitychange\n跨窗口通信 PostMessage\nForm Data 对象\n绘画 canvas\n\n### 3. 行内元素及块级元素\n\n1. HTML4中，元素被分成两大类: inline （内联元素）与 block（块级元素）。一个行内元素只占据它对应标签的边框所包含的空间。\n常见的行内元素有： a b span img strong sub sup button input label select textarea\n\n2. 块级元素占据其父元素（容器）的整个宽度，因此创建了一个“块”。\n常见的块级元素有:  div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p \n3. 区别\n(1)格式上，默认情况下，行内元素不会以新行开始，而块级元素会新起一行。\n(2)内容上，默认情况下，行内元素只能包含文本和其他行内元素。而块级元素可以包含行内元素和其他块级元素。\n(3)行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 width 无效，height 无效（可以设置 line-height），设置 margin 和 padding 的上下不会对其他元素产生影响。\n\n### 4. 自闭和标签\nbr hr img input link meta\n\n### 5. 页面导入样式时，使用 link 和 @import 有什么区别？\n（1）从属关系区别。 @import 是 CSS 提供的语法规则，只有导入样式表的作用；link 是 HTML 提供的标签，不仅可以加\n     载 CSS 文件，还可以定义 RSS、rel 连接属性、引入网站图标等。\n\n（2）加载顺序区别。加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载。\n\n（3）兼容性区别。@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link 标签作为 HTML 元素，不存在兼容\n     性问题。\n\n（4）DOM 可控性区别。可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @i\n    mport 的方式插入样式。\n\n### 6. 常见的浏览器内核比较\nTrident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多\n网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微\n软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等\n安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。\n\nGecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩\n展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。\n\nPresto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的\n天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。\n\nWebkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trid\nent，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit \n前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。\n\nBlink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 B\nlink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是\nKHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto \n内核，加入 Google 阵营，跟随谷歌一起研发 Blink。\n\n### 7. 常见浏览器所用内核\n （1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；\n\n （2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；\n\n （3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；\n\n （4） Safari 浏览器内核：Webkit 内核；\n\n （5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；\n\n （6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；\n\n （7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；\n\n （8） 百度浏览器、世界之窗内核：IE 内核；\n\n （9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；\n\n （10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说\n      是基于火狐内核。\n\n### 8.浏览器渲染原理\n（1）解析收到的文档，构建DOM树；\n（2）解析CSS，构建CSSOM规则树；\n（3）根据DOM和CSSOM构建渲染树，渲染树的节点渲染对象包含颜色，大小等属性的矩形；\n（4）浏览器根据渲染器布局，确定位置，大小；\n（5）绘制，调用渲染对象的paint方法进行绘制；\n\n### 9. CSS 如何阻塞文档解析？（浏览器解析过程）\n 理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，JavaScript 脚本执行时可\n 能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。\n\n 所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档\n 的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。\n\n ### 10.如何减少回流（重排）？（浏览器绘制过程）\n （1）使用 transform 替代 top\n\n （2）不要把节点的属性值放在一个循环里当成循环里的变量\n\n （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局\n\n （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM\n\n （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。\n\n### 11. DOMContentLoaded 事件和 Load 事件的区别？\n\nDOMContentLoaded：初始的HTML文档被完全加载和解析完成之后触发改事件，无需等待样式、子框架的加载完成；\nLoad：所有资源加载完成后触发；\n\n### 12. <b>和<strong>，<i>和<em>区别？\n\n 从页面显示效果来看，被 <b> 和 <strong> 包围的文字将会被加粗，而被 <i> 和 <em> 包围的文字将以斜体的形式呈现。\n\n 但是 <b> <i> 是自然样式标签，分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder}，仅仅表示「这\n 里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在 HTML4.01 中并不被推荐使用。\n\n 而 <em> 和 <strong> 是语义样式标签。 <em> 表示一般的强调文本，而 <strong> 表示比 <em> 语义更强的强调文本。\n \n 使用阅读设备阅读网页时：<strong> 会重读，而 <b> 是展示强调内容。\n\n### 13.前端性能优化？\n\n 前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。\n\n内容方面：\n\n （1）通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况。\n\n （2）通过 DNS 缓存等机制来减少 DNS 的查询次数。\n\n （3）通过设置缓存策略，对常用不变的资源进行缓存。\n\n （4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。\n\n （5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。\n服务器方面：\n\n （1）使用 CDN 服务，来提高用户对于资源请求时的响应速度。\n\n （2）服务器端启用 Gzip、Deflate 等方式对于传输的资源进行压缩，减小文件的体积。\n\n （3）尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie\n\nCSS 和 JavaScript 方面：\n\n （1）把样式表放在页面的 head 标签中，减少页面的首次渲染的时间。\n\n （2）避免使用 @import 标签。\n\n （3）尽量把 js 脚本放在页面底部或者使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染。\n\n （4）通过对 JavaScript 和 CSS 的文件进行压缩，来减小文件的体积。\n","source":"_posts/html知识点集锦.md","raw":"---\ntitle: html知识点记录\ntags:\n  - Html\n  - 面试\ncategories: Html\ncopyright: true\ncomments: true\nabbrlink: 60546\ndate: 2022-03-28 17:57:11\n---\n\n### 1. !DOCTYPE 标签：\n\n它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令.\n\n### 2. H5新特性\n\n媒体播放的 video 和 audio\n本地存储 localStorage 和 sessionStorage\n离线应用 manifest\n桌面通知 Notifications\n语意化标签 article、footer、header、nav、section\n增强表单控件 calendar、date、time、email、url、search\n地理位置 Geolocation\n多任务 webworker\n全双工通信协议 websocket\n历史管理 history\n跨域资源共享(CORS) Access-Control-Allow-Origin\n页面可见性改变事件 visibilitychange\n跨窗口通信 PostMessage\nForm Data 对象\n绘画 canvas\n\n### 3. 行内元素及块级元素\n\n1. HTML4中，元素被分成两大类: inline （内联元素）与 block（块级元素）。一个行内元素只占据它对应标签的边框所包含的空间。\n常见的行内元素有： a b span img strong sub sup button input label select textarea\n\n2. 块级元素占据其父元素（容器）的整个宽度，因此创建了一个“块”。\n常见的块级元素有:  div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p \n3. 区别\n(1)格式上，默认情况下，行内元素不会以新行开始，而块级元素会新起一行。\n(2)内容上，默认情况下，行内元素只能包含文本和其他行内元素。而块级元素可以包含行内元素和其他块级元素。\n(3)行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 width 无效，height 无效（可以设置 line-height），设置 margin 和 padding 的上下不会对其他元素产生影响。\n\n### 4. 自闭和标签\nbr hr img input link meta\n\n### 5. 页面导入样式时，使用 link 和 @import 有什么区别？\n（1）从属关系区别。 @import 是 CSS 提供的语法规则，只有导入样式表的作用；link 是 HTML 提供的标签，不仅可以加\n     载 CSS 文件，还可以定义 RSS、rel 连接属性、引入网站图标等。\n\n（2）加载顺序区别。加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载。\n\n（3）兼容性区别。@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link 标签作为 HTML 元素，不存在兼容\n     性问题。\n\n（4）DOM 可控性区别。可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @i\n    mport 的方式插入样式。\n\n### 6. 常见的浏览器内核比较\nTrident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多\n网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微\n软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等\n安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。\n\nGecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩\n展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。\n\nPresto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的\n天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。\n\nWebkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trid\nent，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit \n前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。\n\nBlink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 B\nlink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是\nKHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto \n内核，加入 Google 阵营，跟随谷歌一起研发 Blink。\n\n### 7. 常见浏览器所用内核\n （1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；\n\n （2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；\n\n （3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；\n\n （4） Safari 浏览器内核：Webkit 内核；\n\n （5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；\n\n （6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；\n\n （7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；\n\n （8） 百度浏览器、世界之窗内核：IE 内核；\n\n （9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；\n\n （10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说\n      是基于火狐内核。\n\n### 8.浏览器渲染原理\n（1）解析收到的文档，构建DOM树；\n（2）解析CSS，构建CSSOM规则树；\n（3）根据DOM和CSSOM构建渲染树，渲染树的节点渲染对象包含颜色，大小等属性的矩形；\n（4）浏览器根据渲染器布局，确定位置，大小；\n（5）绘制，调用渲染对象的paint方法进行绘制；\n\n### 9. CSS 如何阻塞文档解析？（浏览器解析过程）\n 理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，JavaScript 脚本执行时可\n 能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。\n\n 所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档\n 的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。\n\n ### 10.如何减少回流（重排）？（浏览器绘制过程）\n （1）使用 transform 替代 top\n\n （2）不要把节点的属性值放在一个循环里当成循环里的变量\n\n （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局\n\n （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM\n\n （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。\n\n### 11. DOMContentLoaded 事件和 Load 事件的区别？\n\nDOMContentLoaded：初始的HTML文档被完全加载和解析完成之后触发改事件，无需等待样式、子框架的加载完成；\nLoad：所有资源加载完成后触发；\n\n### 12. <b>和<strong>，<i>和<em>区别？\n\n 从页面显示效果来看，被 <b> 和 <strong> 包围的文字将会被加粗，而被 <i> 和 <em> 包围的文字将以斜体的形式呈现。\n\n 但是 <b> <i> 是自然样式标签，分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder}，仅仅表示「这\n 里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在 HTML4.01 中并不被推荐使用。\n\n 而 <em> 和 <strong> 是语义样式标签。 <em> 表示一般的强调文本，而 <strong> 表示比 <em> 语义更强的强调文本。\n \n 使用阅读设备阅读网页时：<strong> 会重读，而 <b> 是展示强调内容。\n\n### 13.前端性能优化？\n\n 前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。\n\n内容方面：\n\n （1）通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况。\n\n （2）通过 DNS 缓存等机制来减少 DNS 的查询次数。\n\n （3）通过设置缓存策略，对常用不变的资源进行缓存。\n\n （4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。\n\n （5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。\n服务器方面：\n\n （1）使用 CDN 服务，来提高用户对于资源请求时的响应速度。\n\n （2）服务器端启用 Gzip、Deflate 等方式对于传输的资源进行压缩，减小文件的体积。\n\n （3）尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie\n\nCSS 和 JavaScript 方面：\n\n （1）把样式表放在页面的 head 标签中，减少页面的首次渲染的时间。\n\n （2）避免使用 @import 标签。\n\n （3）尽量把 js 脚本放在页面底部或者使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染。\n\n （4）通过对 JavaScript 和 CSS 的文件进行压缩，来减小文件的体积。\n","slug":"html知识点集锦","published":1,"updated":"2022-07-13T01:47:21.931Z","layout":"post","photos":[],"link":"","_id":"clqdf8htg001p44t15la07zvb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"1-DOCTYPE-标签：\"><a href=\"#1-DOCTYPE-标签：\" class=\"headerlink\" title=\"1. !DOCTYPE 标签：\"></a>1. !DOCTYPE 标签：</h3><p>它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令.</p>\n<h3 id=\"2-H5新特性\"><a href=\"#2-H5新特性\" class=\"headerlink\" title=\"2. H5新特性\"></a>2. H5新特性</h3><p>媒体播放的 video 和 audio<br>本地存储 localStorage 和 sessionStorage<br>离线应用 manifest<br>桌面通知 Notifications<br>语意化标签 article、footer、header、nav、section<br>增强表单控件 calendar、date、time、email、url、search<br>地理位置 Geolocation<br>多任务 webworker<br>全双工通信协议 websocket<br>历史管理 history<br>跨域资源共享(CORS) Access-Control-Allow-Origin<br>页面可见性改变事件 visibilitychange<br>跨窗口通信 PostMessage<br>Form Data 对象<br>绘画 canvas</p>\n<h3 id=\"3-行内元素及块级元素\"><a href=\"#3-行内元素及块级元素\" class=\"headerlink\" title=\"3. 行内元素及块级元素\"></a>3. 行内元素及块级元素</h3><ol>\n<li><p>HTML4中，元素被分成两大类: inline （内联元素）与 block（块级元素）。一个行内元素只占据它对应标签的边框所包含的空间。<br>常见的行内元素有： a b span img strong sub sup button input label select textarea</p>\n</li>\n<li><p>块级元素占据其父元素（容器）的整个宽度，因此创建了一个“块”。<br>常见的块级元素有:  div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p </p>\n</li>\n<li><p>区别<br>(1)格式上，默认情况下，行内元素不会以新行开始，而块级元素会新起一行。<br>(2)内容上，默认情况下，行内元素只能包含文本和其他行内元素。而块级元素可以包含行内元素和其他块级元素。<br>(3)行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 width 无效，height 无效（可以设置 line-height），设置 margin 和 padding 的上下不会对其他元素产生影响。</p>\n</li>\n</ol>\n<h3 id=\"4-自闭和标签\"><a href=\"#4-自闭和标签\" class=\"headerlink\" title=\"4. 自闭和标签\"></a>4. 自闭和标签</h3><p>br hr img input link meta</p>\n<h3 id=\"5-页面导入样式时，使用-link-和-import-有什么区别？\"><a href=\"#5-页面导入样式时，使用-link-和-import-有什么区别？\" class=\"headerlink\" title=\"5. 页面导入样式时，使用 link 和 @import 有什么区别？\"></a>5. 页面导入样式时，使用 link 和 @import 有什么区别？</h3><p>（1）从属关系区别。 @import 是 CSS 提供的语法规则，只有导入样式表的作用；link 是 HTML 提供的标签，不仅可以加<br>     载 CSS 文件，还可以定义 RSS、rel 连接属性、引入网站图标等。</p>\n<p>（2）加载顺序区别。加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载。</p>\n<p>（3）兼容性区别。@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link 标签作为 HTML 元素，不存在兼容<br>     性问题。</p>\n<p>（4）DOM 可控性区别。可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @i<br>    mport 的方式插入样式。</p>\n<h3 id=\"6-常见的浏览器内核比较\"><a href=\"#6-常见的浏览器内核比较\" class=\"headerlink\" title=\"6. 常见的浏览器内核比较\"></a>6. 常见的浏览器内核比较</h3><p>Trident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多<br>网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微<br>软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等<br>安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。</p>\n<p>Gecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩<br>展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。</p>\n<p>Presto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的<br>天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。</p>\n<p>Webkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trid<br>ent，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit<br>前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。</p>\n<p>Blink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 B<br>link 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是<br>KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto<br>内核，加入 Google 阵营，跟随谷歌一起研发 Blink。</p>\n<h3 id=\"7-常见浏览器所用内核\"><a href=\"#7-常见浏览器所用内核\" class=\"headerlink\" title=\"7. 常见浏览器所用内核\"></a>7. 常见浏览器所用内核</h3><p> （1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；</p>\n<p> （2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；</p>\n<p> （3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；</p>\n<p> （4） Safari 浏览器内核：Webkit 内核；</p>\n<p> （5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；</p>\n<p> （6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；</p>\n<p> （7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；</p>\n<p> （8） 百度浏览器、世界之窗内核：IE 内核；</p>\n<p> （9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；</p>\n<p> （10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说<br>      是基于火狐内核。</p>\n<h3 id=\"8-浏览器渲染原理\"><a href=\"#8-浏览器渲染原理\" class=\"headerlink\" title=\"8.浏览器渲染原理\"></a>8.浏览器渲染原理</h3><p>（1）解析收到的文档，构建DOM树；<br>（2）解析CSS，构建CSSOM规则树；<br>（3）根据DOM和CSSOM构建渲染树，渲染树的节点渲染对象包含颜色，大小等属性的矩形；<br>（4）浏览器根据渲染器布局，确定位置，大小；<br>（5）绘制，调用渲染对象的paint方法进行绘制；</p>\n<h3 id=\"9-CSS-如何阻塞文档解析？（浏览器解析过程）\"><a href=\"#9-CSS-如何阻塞文档解析？（浏览器解析过程）\" class=\"headerlink\" title=\"9. CSS 如何阻塞文档解析？（浏览器解析过程）\"></a>9. CSS 如何阻塞文档解析？（浏览器解析过程）</h3><p> 理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，JavaScript 脚本执行时可<br> 能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。</p>\n<p> 所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档<br> 的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。</p>\n<h3 id=\"10-如何减少回流（重排）？（浏览器绘制过程）\"><a href=\"#10-如何减少回流（重排）？（浏览器绘制过程）\" class=\"headerlink\" title=\"10.如何减少回流（重排）？（浏览器绘制过程）\"></a>10.如何减少回流（重排）？（浏览器绘制过程）</h3><p> （1）使用 transform 替代 top</p>\n<p> （2）不要把节点的属性值放在一个循环里当成循环里的变量</p>\n<p> （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p>\n<p> （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</p>\n<p> （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。</p>\n<h3 id=\"11-DOMContentLoaded-事件和-Load-事件的区别？\"><a href=\"#11-DOMContentLoaded-事件和-Load-事件的区别？\" class=\"headerlink\" title=\"11. DOMContentLoaded 事件和 Load 事件的区别？\"></a>11. DOMContentLoaded 事件和 Load 事件的区别？</h3><p>DOMContentLoaded：初始的HTML文档被完全加载和解析完成之后触发改事件，无需等待样式、子框架的加载完成；<br>Load：所有资源加载完成后触发；</p>\n<h3 id=\"12-和，和区别？\"><a href=\"#12-和，和区别？\" class=\"headerlink\" title=\"12. 和，和区别？\"></a>12. <b>和<strong>，<i>和<em>区别？</em></i></strong></b></h3><p> 从页面显示效果来看，被 <b> 和 <strong> 包围的文字将会被加粗，而被 <i> 和 <em> 包围的文字将以斜体的形式呈现。</em></i></strong></b></p>\n<p> 但是 <b> <i> 是自然样式标签，分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder}，仅仅表示「这<br> 里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在 HTML4.01 中并不被推荐使用。</i></b></p>\n<p> 而 <em> 和 <strong> 是语义样式标签。 <em> 表示一般的强调文本，而 <strong> 表示比 <em> 语义更强的强调文本。</em></strong></em></strong></em></p>\n<p> 使用阅读设备阅读网页时：<strong> 会重读，而 <b> 是展示强调内容。</b></strong></p>\n<h3 id=\"13-前端性能优化？\"><a href=\"#13-前端性能优化？\" class=\"headerlink\" title=\"13.前端性能优化？\"></a>13.前端性能优化？</h3><p> 前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。</p>\n<p>内容方面：</p>\n<p> （1）通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况。</p>\n<p> （2）通过 DNS 缓存等机制来减少 DNS 的查询次数。</p>\n<p> （3）通过设置缓存策略，对常用不变的资源进行缓存。</p>\n<p> （4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。</p>\n<p> （5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。<br>服务器方面：</p>\n<p> （1）使用 CDN 服务，来提高用户对于资源请求时的响应速度。</p>\n<p> （2）服务器端启用 Gzip、Deflate 等方式对于传输的资源进行压缩，减小文件的体积。</p>\n<p> （3）尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie</p>\n<p>CSS 和 JavaScript 方面：</p>\n<p> （1）把样式表放在页面的 head 标签中，减少页面的首次渲染的时间。</p>\n<p> （2）避免使用 @import 标签。</p>\n<p> （3）尽量把 js 脚本放在页面底部或者使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染。</p>\n<p> （4）通过对 JavaScript 和 CSS 的文件进行压缩，来减小文件的体积。</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"1-DOCTYPE-标签：\"><a href=\"#1-DOCTYPE-标签：\" class=\"headerlink\" title=\"1. !DOCTYPE 标签：\"></a>1. !DOCTYPE 标签：</h3><p>它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令.</p>\n<h3 id=\"2-H5新特性\"><a href=\"#2-H5新特性\" class=\"headerlink\" title=\"2. H5新特性\"></a>2. H5新特性</h3><p>媒体播放的 video 和 audio<br>本地存储 localStorage 和 sessionStorage<br>离线应用 manifest<br>桌面通知 Notifications<br>语意化标签 article、footer、header、nav、section<br>增强表单控件 calendar、date、time、email、url、search<br>地理位置 Geolocation<br>多任务 webworker<br>全双工通信协议 websocket<br>历史管理 history<br>跨域资源共享(CORS) Access-Control-Allow-Origin<br>页面可见性改变事件 visibilitychange<br>跨窗口通信 PostMessage<br>Form Data 对象<br>绘画 canvas</p>\n<h3 id=\"3-行内元素及块级元素\"><a href=\"#3-行内元素及块级元素\" class=\"headerlink\" title=\"3. 行内元素及块级元素\"></a>3. 行内元素及块级元素</h3><ol>\n<li><p>HTML4中，元素被分成两大类: inline （内联元素）与 block（块级元素）。一个行内元素只占据它对应标签的边框所包含的空间。<br>常见的行内元素有： a b span img strong sub sup button input label select textarea</p>\n</li>\n<li><p>块级元素占据其父元素（容器）的整个宽度，因此创建了一个“块”。<br>常见的块级元素有:  div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p </p>\n</li>\n<li><p>区别<br>(1)格式上，默认情况下，行内元素不会以新行开始，而块级元素会新起一行。<br>(2)内容上，默认情况下，行内元素只能包含文本和其他行内元素。而块级元素可以包含行内元素和其他块级元素。<br>(3)行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 width 无效，height 无效（可以设置 line-height），设置 margin 和 padding 的上下不会对其他元素产生影响。</p>\n</li>\n</ol>\n<h3 id=\"4-自闭和标签\"><a href=\"#4-自闭和标签\" class=\"headerlink\" title=\"4. 自闭和标签\"></a>4. 自闭和标签</h3><p>br hr img input link meta</p>\n<h3 id=\"5-页面导入样式时，使用-link-和-import-有什么区别？\"><a href=\"#5-页面导入样式时，使用-link-和-import-有什么区别？\" class=\"headerlink\" title=\"5. 页面导入样式时，使用 link 和 @import 有什么区别？\"></a>5. 页面导入样式时，使用 link 和 @import 有什么区别？</h3><p>（1）从属关系区别。 @import 是 CSS 提供的语法规则，只有导入样式表的作用；link 是 HTML 提供的标签，不仅可以加<br>     载 CSS 文件，还可以定义 RSS、rel 连接属性、引入网站图标等。</p>\n<p>（2）加载顺序区别。加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载。</p>\n<p>（3）兼容性区别。@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link 标签作为 HTML 元素，不存在兼容<br>     性问题。</p>\n<p>（4）DOM 可控性区别。可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @i<br>    mport 的方式插入样式。</p>\n<h3 id=\"6-常见的浏览器内核比较\"><a href=\"#6-常见的浏览器内核比较\" class=\"headerlink\" title=\"6. 常见的浏览器内核比较\"></a>6. 常见的浏览器内核比较</h3><p>Trident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多<br>网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微<br>软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等<br>安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。</p>\n<p>Gecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩<br>展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。</p>\n<p>Presto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的<br>天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。</p>\n<p>Webkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trid<br>ent，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit<br>前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。</p>\n<p>Blink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 B<br>link 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是<br>KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto<br>内核，加入 Google 阵营，跟随谷歌一起研发 Blink。</p>\n<h3 id=\"7-常见浏览器所用内核\"><a href=\"#7-常见浏览器所用内核\" class=\"headerlink\" title=\"7. 常见浏览器所用内核\"></a>7. 常见浏览器所用内核</h3><p> （1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；</p>\n<p> （2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；</p>\n<p> （3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；</p>\n<p> （4） Safari 浏览器内核：Webkit 内核；</p>\n<p> （5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；</p>\n<p> （6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；</p>\n<p> （7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；</p>\n<p> （8） 百度浏览器、世界之窗内核：IE 内核；</p>\n<p> （9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；</p>\n<p> （10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说<br>      是基于火狐内核。</p>\n<h3 id=\"8-浏览器渲染原理\"><a href=\"#8-浏览器渲染原理\" class=\"headerlink\" title=\"8.浏览器渲染原理\"></a>8.浏览器渲染原理</h3><p>（1）解析收到的文档，构建DOM树；<br>（2）解析CSS，构建CSSOM规则树；<br>（3）根据DOM和CSSOM构建渲染树，渲染树的节点渲染对象包含颜色，大小等属性的矩形；<br>（4）浏览器根据渲染器布局，确定位置，大小；<br>（5）绘制，调用渲染对象的paint方法进行绘制；</p>\n<h3 id=\"9-CSS-如何阻塞文档解析？（浏览器解析过程）\"><a href=\"#9-CSS-如何阻塞文档解析？（浏览器解析过程）\" class=\"headerlink\" title=\"9. CSS 如何阻塞文档解析？（浏览器解析过程）\"></a>9. CSS 如何阻塞文档解析？（浏览器解析过程）</h3><p> 理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，JavaScript 脚本执行时可<br> 能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。</p>\n<p> 所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档<br> 的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。</p>\n<h3 id=\"10-如何减少回流（重排）？（浏览器绘制过程）\"><a href=\"#10-如何减少回流（重排）？（浏览器绘制过程）\" class=\"headerlink\" title=\"10.如何减少回流（重排）？（浏览器绘制过程）\"></a>10.如何减少回流（重排）？（浏览器绘制过程）</h3><p> （1）使用 transform 替代 top</p>\n<p> （2）不要把节点的属性值放在一个循环里当成循环里的变量</p>\n<p> （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p>\n<p> （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</p>\n<p> （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。</p>\n<h3 id=\"11-DOMContentLoaded-事件和-Load-事件的区别？\"><a href=\"#11-DOMContentLoaded-事件和-Load-事件的区别？\" class=\"headerlink\" title=\"11. DOMContentLoaded 事件和 Load 事件的区别？\"></a>11. DOMContentLoaded 事件和 Load 事件的区别？</h3><p>DOMContentLoaded：初始的HTML文档被完全加载和解析完成之后触发改事件，无需等待样式、子框架的加载完成；<br>Load：所有资源加载完成后触发；</p>\n<h3 id=\"12-和，和区别？\"><a href=\"#12-和，和区别？\" class=\"headerlink\" title=\"12. 和，和区别？\"></a>12. <b>和<strong>，<i>和<em>区别？</em></i></strong></b></h3><p> 从页面显示效果来看，被 <b> 和 <strong> 包围的文字将会被加粗，而被 <i> 和 <em> 包围的文字将以斜体的形式呈现。</em></i></strong></b></p>\n<p> 但是 <b> <i> 是自然样式标签，分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder}，仅仅表示「这<br> 里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在 HTML4.01 中并不被推荐使用。</i></b></p>\n<p> 而 <em> 和 <strong> 是语义样式标签。 <em> 表示一般的强调文本，而 <strong> 表示比 <em> 语义更强的强调文本。</em></strong></em></strong></em></p>\n<p> 使用阅读设备阅读网页时：<strong> 会重读，而 <b> 是展示强调内容。</b></strong></p>\n<h3 id=\"13-前端性能优化？\"><a href=\"#13-前端性能优化？\" class=\"headerlink\" title=\"13.前端性能优化？\"></a>13.前端性能优化？</h3><p> 前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。</p>\n<p>内容方面：</p>\n<p> （1）通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况。</p>\n<p> （2）通过 DNS 缓存等机制来减少 DNS 的查询次数。</p>\n<p> （3）通过设置缓存策略，对常用不变的资源进行缓存。</p>\n<p> （4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。</p>\n<p> （5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。<br>服务器方面：</p>\n<p> （1）使用 CDN 服务，来提高用户对于资源请求时的响应速度。</p>\n<p> （2）服务器端启用 Gzip、Deflate 等方式对于传输的资源进行压缩，减小文件的体积。</p>\n<p> （3）尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie</p>\n<p>CSS 和 JavaScript 方面：</p>\n<p> （1）把样式表放在页面的 head 标签中，减少页面的首次渲染的时间。</p>\n<p> （2）避免使用 @import 标签。</p>\n<p> （3）尽量把 js 脚本放在页面底部或者使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染。</p>\n<p> （4）通过对 JavaScript 和 CSS 的文件进行压缩，来减小文件的体积。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"html知识点记录","path":"posts/60546/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-03-28T09:57:11.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-03-28T09:57:11.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Html","tags":["Html","面试"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3876},{"title":"Vue3学习笔记","copyright":true,"comments":1,"abbrlink":8636,"date":"2021-11-06T03:01:53.000Z","_content":"\n\nVue3的新特性，如下：\n- 速度更快\n- 体积减少\n- 更易维护\n- 更接近原生\n- 更易使用\n\n### 速度更快\nvue3相比vue2\n1. 重写了虚拟Dom实现\n\n2. 编译模板的优化\n\n3. 更高效的组件初始化\n\n4. undate性能提高1.3~2倍\n\n5. SSR速度提高了2~3倍\n\n### 体积更小\n\n通过webpack的tree-shaking功能，可以将无用模块“剪辑”，仅打包需要的\n能够tree-shaking，有两大好处：\n1. 对开发人员，能够对vue实现更多其他的功能，而不必担忧整体体积过大\n2. 对使用者，打包出来的包体积变小了\nvue可以开发出更多其他的功能，而不必担忧vue打包出来的整体体积过多\n\n### 更易维护\ncompositon Api\n可与现有的Options API一起使用\n灵活的逻辑组合与复用\nVue3模块可以和其他框架搭配使用\n\n### 更好的Typescript支持\nVUE3是基于typescipt编写的，可以享受到自动的类型定义提示\n\n### 更接近原生\n可以自定义渲染 API\n\n### Vue3新增特性\nVue 3 中需要关注的一些新功能包括：\n- framents\n- Teleport\n- composition Api\n- createRenderer\n\n#### framents\n在 Vue3.x 中，组件现在支持有多个根节点；\n```\n<!-- Layout.vue -->\n<template>\n  <header>...</header>\n  <main v-bind=\"$attrs\">...</main>\n  <footer>...</footer>\n</template>\n```\n#### Teleport\nTeleport 是一种能够将我们的模板移动到 DOM 中 Vue app 之外的其他位置的技术，就有点像哆啦A梦的“任意门”。在vue2中，像 modals,toast 等这样的元素，如果我们嵌套在 Vue 的某个组件内部，那么处理嵌套组件的定位、z-index 和样式就会变得很困难，通过Teleport，我们可以在组件的逻辑位置写模板代码，然后在 Vue 应用范围之外渲染它。\n```\n<button @click=\"showToast\" class=\"btn\">打开 toast</button>\n<!-- to 属性就是目标位置 -->\n<teleport to=\"#teleport-target\">\n    <div v-if=\"visible\" class=\"toast-wrap\">\n        <div class=\"toast-msg\">我是一个 Toast 文案</div>\n    </div>\n</teleport>\n```\n#### composition Api\ncomposition Api，也就是组合式api，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理。\n\n<div align=center>\n<img src=\"1.png\" width = 60%>\n</div>\n\n![composition](2.png)\n\n<div align=center>\n<img src=\"3.png\" width = 60%>\n</div>\n#### createRenderer\n通过createRenderer，我们能够构建自定义渲染器，我们能够将 vue 的开发模型扩展到其他平台。\n\n\n### 移除 API\n1. keyCode 支持作为 v-on 的修饰符\n2. $on，$off和$once 实例方法\n3. 过滤filter\n4. 内联模板 attribute\n5. $destroy 实例方法。用户不应再手动管理单个Vue 组件的生命周期。\n\n### 其他小改变\n1. destroyed 生命周期选项被重命名为 unmounted\n2. beforeDestroy 生命周期选项被重命名为 beforeUnmount\n3. [prop default工厂函数不再有权访问 this 是上下文\n4. 自定义指令 API 已更改为与组件生命周期一致\n5. data 应始终声明为函数\n6. 来自 mixin 的 data 选项现在可简单地合并\n7. attribute 强制策略已更改\n8. 一些过渡 class 被重命名\n9. 组建 watch 选项和实例方法 $watch不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。\n10. ```<template>``` 没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot) 现在被视为普通元素，并将生成原生的 ```<template>``` 元素，而不是渲染其内部内容。\n11. 在Vue 2.x 中，应用根容器的 ```outerHTML``` 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。Vue 3.x 现在使用应用容器的 ```innerHTML```，这意味着容器本身不再被视为模板的一部分。\n\n\n### Vue3和Vue2开发区别\n\n1. Vue2响应式原理采用的是defineProperty，而vue3选用的是proxy。这两者前者是修改对象属性的权限标签，后者是代理整个对象。性能上proxy会更加优秀;\n2. Vue3支持多个根节点;\n3. Vue3优化diff算法。不再像vue2那样比对所有dom，而采用了block tree的做法。此外重新渲染的算法里也做了改进，利用了闭包来进行缓存。这使得vue3的速度比vue2快了6倍。\n4. Vue2的Options API 对比Vue3的Composition API; \n5. 生命周期的钩子使用方式，在 Vue3 生周期钩子不是全局可调用的了，需要另外从vue中引入。和引入reactive一样，生命周期的挂载钩子叫onMounted；\n6. emit使用方式：\nemit：vue2使用```this.$emit('evnetName', params)```,vue3使用：```setup(_props, {emit}){ emit('eventName', params)}```\n\n\n","source":"_posts/Vue3学习笔记.md","raw":"---\ntitle: Vue3学习笔记\ntags:\n  - Vue\ncategories: Vue\ncopyright: true\ncomments: true\nabbrlink: 8636\ndate: 2021-11-06 11:01:53\n---\n\n\nVue3的新特性，如下：\n- 速度更快\n- 体积减少\n- 更易维护\n- 更接近原生\n- 更易使用\n\n### 速度更快\nvue3相比vue2\n1. 重写了虚拟Dom实现\n\n2. 编译模板的优化\n\n3. 更高效的组件初始化\n\n4. undate性能提高1.3~2倍\n\n5. SSR速度提高了2~3倍\n\n### 体积更小\n\n通过webpack的tree-shaking功能，可以将无用模块“剪辑”，仅打包需要的\n能够tree-shaking，有两大好处：\n1. 对开发人员，能够对vue实现更多其他的功能，而不必担忧整体体积过大\n2. 对使用者，打包出来的包体积变小了\nvue可以开发出更多其他的功能，而不必担忧vue打包出来的整体体积过多\n\n### 更易维护\ncompositon Api\n可与现有的Options API一起使用\n灵活的逻辑组合与复用\nVue3模块可以和其他框架搭配使用\n\n### 更好的Typescript支持\nVUE3是基于typescipt编写的，可以享受到自动的类型定义提示\n\n### 更接近原生\n可以自定义渲染 API\n\n### Vue3新增特性\nVue 3 中需要关注的一些新功能包括：\n- framents\n- Teleport\n- composition Api\n- createRenderer\n\n#### framents\n在 Vue3.x 中，组件现在支持有多个根节点；\n```\n<!-- Layout.vue -->\n<template>\n  <header>...</header>\n  <main v-bind=\"$attrs\">...</main>\n  <footer>...</footer>\n</template>\n```\n#### Teleport\nTeleport 是一种能够将我们的模板移动到 DOM 中 Vue app 之外的其他位置的技术，就有点像哆啦A梦的“任意门”。在vue2中，像 modals,toast 等这样的元素，如果我们嵌套在 Vue 的某个组件内部，那么处理嵌套组件的定位、z-index 和样式就会变得很困难，通过Teleport，我们可以在组件的逻辑位置写模板代码，然后在 Vue 应用范围之外渲染它。\n```\n<button @click=\"showToast\" class=\"btn\">打开 toast</button>\n<!-- to 属性就是目标位置 -->\n<teleport to=\"#teleport-target\">\n    <div v-if=\"visible\" class=\"toast-wrap\">\n        <div class=\"toast-msg\">我是一个 Toast 文案</div>\n    </div>\n</teleport>\n```\n#### composition Api\ncomposition Api，也就是组合式api，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理。\n\n<div align=center>\n<img src=\"1.png\" width = 60%>\n</div>\n\n![composition](2.png)\n\n<div align=center>\n<img src=\"3.png\" width = 60%>\n</div>\n#### createRenderer\n通过createRenderer，我们能够构建自定义渲染器，我们能够将 vue 的开发模型扩展到其他平台。\n\n\n### 移除 API\n1. keyCode 支持作为 v-on 的修饰符\n2. $on，$off和$once 实例方法\n3. 过滤filter\n4. 内联模板 attribute\n5. $destroy 实例方法。用户不应再手动管理单个Vue 组件的生命周期。\n\n### 其他小改变\n1. destroyed 生命周期选项被重命名为 unmounted\n2. beforeDestroy 生命周期选项被重命名为 beforeUnmount\n3. [prop default工厂函数不再有权访问 this 是上下文\n4. 自定义指令 API 已更改为与组件生命周期一致\n5. data 应始终声明为函数\n6. 来自 mixin 的 data 选项现在可简单地合并\n7. attribute 强制策略已更改\n8. 一些过渡 class 被重命名\n9. 组建 watch 选项和实例方法 $watch不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。\n10. ```<template>``` 没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot) 现在被视为普通元素，并将生成原生的 ```<template>``` 元素，而不是渲染其内部内容。\n11. 在Vue 2.x 中，应用根容器的 ```outerHTML``` 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。Vue 3.x 现在使用应用容器的 ```innerHTML```，这意味着容器本身不再被视为模板的一部分。\n\n\n### Vue3和Vue2开发区别\n\n1. Vue2响应式原理采用的是defineProperty，而vue3选用的是proxy。这两者前者是修改对象属性的权限标签，后者是代理整个对象。性能上proxy会更加优秀;\n2. Vue3支持多个根节点;\n3. Vue3优化diff算法。不再像vue2那样比对所有dom，而采用了block tree的做法。此外重新渲染的算法里也做了改进，利用了闭包来进行缓存。这使得vue3的速度比vue2快了6倍。\n4. Vue2的Options API 对比Vue3的Composition API; \n5. 生命周期的钩子使用方式，在 Vue3 生周期钩子不是全局可调用的了，需要另外从vue中引入。和引入reactive一样，生命周期的挂载钩子叫onMounted；\n6. emit使用方式：\nemit：vue2使用```this.$emit('evnetName', params)```,vue3使用：```setup(_props, {emit}){ emit('eventName', params)}```\n\n\n","slug":"Vue3学习笔记","published":1,"updated":"2022-07-13T01:47:21.883Z","layout":"post","photos":[],"link":"","_id":"clqdf8hth001r44t19vtjc96o","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>Vue3的新特性，如下：</p>\n<ul>\n<li>速度更快</li>\n<li>体积减少</li>\n<li>更易维护</li>\n<li>更接近原生</li>\n<li>更易使用</li>\n</ul>\n<h3 id=\"速度更快\"><a href=\"#速度更快\" class=\"headerlink\" title=\"速度更快\"></a>速度更快</h3><p>vue3相比vue2</p>\n<ol>\n<li><p>重写了虚拟Dom实现</p>\n</li>\n<li><p>编译模板的优化</p>\n</li>\n<li><p>更高效的组件初始化</p>\n</li>\n<li><p>undate性能提高1.3~2倍</p>\n</li>\n<li><p>SSR速度提高了2~3倍</p>\n</li>\n</ol>\n<h3 id=\"体积更小\"><a href=\"#体积更小\" class=\"headerlink\" title=\"体积更小\"></a>体积更小</h3><p>通过webpack的tree-shaking功能，可以将无用模块“剪辑”，仅打包需要的<br>能够tree-shaking，有两大好处：</p>\n<ol>\n<li>对开发人员，能够对vue实现更多其他的功能，而不必担忧整体体积过大</li>\n<li>对使用者，打包出来的包体积变小了<br>vue可以开发出更多其他的功能，而不必担忧vue打包出来的整体体积过多</li>\n</ol>\n<h3 id=\"更易维护\"><a href=\"#更易维护\" class=\"headerlink\" title=\"更易维护\"></a>更易维护</h3><p>compositon Api<br>可与现有的Options API一起使用<br>灵活的逻辑组合与复用<br>Vue3模块可以和其他框架搭配使用</p>\n<h3 id=\"更好的Typescript支持\"><a href=\"#更好的Typescript支持\" class=\"headerlink\" title=\"更好的Typescript支持\"></a>更好的Typescript支持</h3><p>VUE3是基于typescipt编写的，可以享受到自动的类型定义提示</p>\n<h3 id=\"更接近原生\"><a href=\"#更接近原生\" class=\"headerlink\" title=\"更接近原生\"></a>更接近原生</h3><p>可以自定义渲染 API</p>\n<h3 id=\"Vue3新增特性\"><a href=\"#Vue3新增特性\" class=\"headerlink\" title=\"Vue3新增特性\"></a>Vue3新增特性</h3><p>Vue 3 中需要关注的一些新功能包括：</p>\n<ul>\n<li>framents</li>\n<li>Teleport</li>\n<li>composition Api</li>\n<li>createRenderer</li>\n</ul>\n<h4 id=\"framents\"><a href=\"#framents\" class=\"headerlink\" title=\"framents\"></a>framents</h4><p>在 Vue3.x 中，组件现在支持有多个根节点；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Layout.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Teleport\"><a href=\"#Teleport\" class=\"headerlink\" title=\"Teleport\"></a>Teleport</h4><p>Teleport 是一种能够将我们的模板移动到 DOM 中 Vue app 之外的其他位置的技术，就有点像哆啦A梦的“任意门”。在vue2中，像 modals,toast 等这样的元素，如果我们嵌套在 Vue 的某个组件内部，那么处理嵌套组件的定位、z-index 和样式就会变得很困难，通过Teleport，我们可以在组件的逻辑位置写模板代码，然后在 Vue 应用范围之外渲染它。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showToast&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>打开 toast<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- to 属性就是目标位置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">teleport</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;#teleport-target&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;visible&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toast-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toast-msg&quot;</span>&gt;</span>我是一个 Toast 文案<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"composition-Api\"><a href=\"#composition-Api\" class=\"headerlink\" title=\"composition Api\"></a>composition Api</h4><p>composition Api，也就是组合式api，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理。</p>\n<div align=\"center\">\n<img data-src=\"/posts/8636/1.png\" width=\"60%\">\n</div>\n\n<p><img data-src=\"/posts/8636/2.png\" alt=\"composition\"></p>\n<div align=\"center\">\n<img data-src=\"/posts/8636/3.png\" width=\"60%\">\n</div>\n#### createRenderer\n通过createRenderer，我们能够构建自定义渲染器，我们能够将 vue 的开发模型扩展到其他平台。\n\n\n<h3 id=\"移除-API\"><a href=\"#移除-API\" class=\"headerlink\" title=\"移除 API\"></a>移除 API</h3><ol>\n<li>keyCode 支持作为 v-on 的修饰符</li>\n<li>$on，$off和$once 实例方法</li>\n<li>过滤filter</li>\n<li>内联模板 attribute</li>\n<li>$destroy 实例方法。用户不应再手动管理单个Vue 组件的生命周期。</li>\n</ol>\n<h3 id=\"其他小改变\"><a href=\"#其他小改变\" class=\"headerlink\" title=\"其他小改变\"></a>其他小改变</h3><ol>\n<li>destroyed 生命周期选项被重命名为 unmounted</li>\n<li>beforeDestroy 生命周期选项被重命名为 beforeUnmount</li>\n<li>[prop default工厂函数不再有权访问 this 是上下文</li>\n<li>自定义指令 API 已更改为与组件生命周期一致</li>\n<li>data 应始终声明为函数</li>\n<li>来自 mixin 的 data 选项现在可简单地合并</li>\n<li>attribute 强制策略已更改</li>\n<li>一些过渡 class 被重命名</li>\n<li>组建 watch 选项和实例方法 $watch不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。</li>\n<li><code>&lt;template&gt;</code> 没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot) 现在被视为普通元素，并将生成原生的 <code>&lt;template&gt;</code> 元素，而不是渲染其内部内容。</li>\n<li>在Vue 2.x 中，应用根容器的 <code>outerHTML</code> 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。Vue 3.x 现在使用应用容器的 <code>innerHTML</code>，这意味着容器本身不再被视为模板的一部分。</li>\n</ol>\n<h3 id=\"Vue3和Vue2开发区别\"><a href=\"#Vue3和Vue2开发区别\" class=\"headerlink\" title=\"Vue3和Vue2开发区别\"></a>Vue3和Vue2开发区别</h3><ol>\n<li>Vue2响应式原理采用的是defineProperty，而vue3选用的是proxy。这两者前者是修改对象属性的权限标签，后者是代理整个对象。性能上proxy会更加优秀;</li>\n<li>Vue3支持多个根节点;</li>\n<li>Vue3优化diff算法。不再像vue2那样比对所有dom，而采用了block tree的做法。此外重新渲染的算法里也做了改进，利用了闭包来进行缓存。这使得vue3的速度比vue2快了6倍。</li>\n<li>Vue2的Options API 对比Vue3的Composition API; </li>\n<li>生命周期的钩子使用方式，在 Vue3 生周期钩子不是全局可调用的了，需要另外从vue中引入。和引入reactive一样，生命周期的挂载钩子叫onMounted；</li>\n<li>emit使用方式：<br>emit：vue2使用<code>this.$emit(&#39;evnetName&#39;, params)</code>,vue3使用：<code>setup(_props, &#123;emit&#125;)&#123; emit(&#39;eventName&#39;, params)&#125;</code></li>\n</ol>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>Vue3的新特性，如下：</p>\n<ul>\n<li>速度更快</li>\n<li>体积减少</li>\n<li>更易维护</li>\n<li>更接近原生</li>\n<li>更易使用</li>\n</ul>\n<h3 id=\"速度更快\"><a href=\"#速度更快\" class=\"headerlink\" title=\"速度更快\"></a>速度更快</h3><p>vue3相比vue2</p>\n<ol>\n<li><p>重写了虚拟Dom实现</p>\n</li>\n<li><p>编译模板的优化</p>\n</li>\n<li><p>更高效的组件初始化</p>\n</li>\n<li><p>undate性能提高1.3~2倍</p>\n</li>\n<li><p>SSR速度提高了2~3倍</p>\n</li>\n</ol>\n<h3 id=\"体积更小\"><a href=\"#体积更小\" class=\"headerlink\" title=\"体积更小\"></a>体积更小</h3><p>通过webpack的tree-shaking功能，可以将无用模块“剪辑”，仅打包需要的<br>能够tree-shaking，有两大好处：</p>\n<ol>\n<li>对开发人员，能够对vue实现更多其他的功能，而不必担忧整体体积过大</li>\n<li>对使用者，打包出来的包体积变小了<br>vue可以开发出更多其他的功能，而不必担忧vue打包出来的整体体积过多</li>\n</ol>\n<h3 id=\"更易维护\"><a href=\"#更易维护\" class=\"headerlink\" title=\"更易维护\"></a>更易维护</h3><p>compositon Api<br>可与现有的Options API一起使用<br>灵活的逻辑组合与复用<br>Vue3模块可以和其他框架搭配使用</p>\n<h3 id=\"更好的Typescript支持\"><a href=\"#更好的Typescript支持\" class=\"headerlink\" title=\"更好的Typescript支持\"></a>更好的Typescript支持</h3><p>VUE3是基于typescipt编写的，可以享受到自动的类型定义提示</p>\n<h3 id=\"更接近原生\"><a href=\"#更接近原生\" class=\"headerlink\" title=\"更接近原生\"></a>更接近原生</h3><p>可以自定义渲染 API</p>\n<h3 id=\"Vue3新增特性\"><a href=\"#Vue3新增特性\" class=\"headerlink\" title=\"Vue3新增特性\"></a>Vue3新增特性</h3><p>Vue 3 中需要关注的一些新功能包括：</p>\n<ul>\n<li>framents</li>\n<li>Teleport</li>\n<li>composition Api</li>\n<li>createRenderer</li>\n</ul>\n<h4 id=\"framents\"><a href=\"#framents\" class=\"headerlink\" title=\"framents\"></a>framents</h4><p>在 Vue3.x 中，组件现在支持有多个根节点；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Layout.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Teleport\"><a href=\"#Teleport\" class=\"headerlink\" title=\"Teleport\"></a>Teleport</h4><p>Teleport 是一种能够将我们的模板移动到 DOM 中 Vue app 之外的其他位置的技术，就有点像哆啦A梦的“任意门”。在vue2中，像 modals,toast 等这样的元素，如果我们嵌套在 Vue 的某个组件内部，那么处理嵌套组件的定位、z-index 和样式就会变得很困难，通过Teleport，我们可以在组件的逻辑位置写模板代码，然后在 Vue 应用范围之外渲染它。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showToast&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>打开 toast<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- to 属性就是目标位置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">teleport</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;#teleport-target&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;visible&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toast-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toast-msg&quot;</span>&gt;</span>我是一个 Toast 文案<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"composition-Api\"><a href=\"#composition-Api\" class=\"headerlink\" title=\"composition Api\"></a>composition Api</h4><p>composition Api，也就是组合式api，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理。</p>\n<div align=\"center\">\n<img src=\"/posts/8636/1.png\" width=\"60%\">\n</div>\n\n<p><img src=\"/posts/8636/2.png\" alt=\"composition\"></p>\n<div align=\"center\">\n<img src=\"/posts/8636/3.png\" width=\"60%\">\n</div>\n#### createRenderer\n通过createRenderer，我们能够构建自定义渲染器，我们能够将 vue 的开发模型扩展到其他平台。\n\n\n<h3 id=\"移除-API\"><a href=\"#移除-API\" class=\"headerlink\" title=\"移除 API\"></a>移除 API</h3><ol>\n<li>keyCode 支持作为 v-on 的修饰符</li>\n<li>$on，$off和$once 实例方法</li>\n<li>过滤filter</li>\n<li>内联模板 attribute</li>\n<li>$destroy 实例方法。用户不应再手动管理单个Vue 组件的生命周期。</li>\n</ol>\n<h3 id=\"其他小改变\"><a href=\"#其他小改变\" class=\"headerlink\" title=\"其他小改变\"></a>其他小改变</h3><ol>\n<li>destroyed 生命周期选项被重命名为 unmounted</li>\n<li>beforeDestroy 生命周期选项被重命名为 beforeUnmount</li>\n<li>[prop default工厂函数不再有权访问 this 是上下文</li>\n<li>自定义指令 API 已更改为与组件生命周期一致</li>\n<li>data 应始终声明为函数</li>\n<li>来自 mixin 的 data 选项现在可简单地合并</li>\n<li>attribute 强制策略已更改</li>\n<li>一些过渡 class 被重命名</li>\n<li>组建 watch 选项和实例方法 $watch不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。</li>\n<li><code>&lt;template&gt;</code> 没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot) 现在被视为普通元素，并将生成原生的 <code>&lt;template&gt;</code> 元素，而不是渲染其内部内容。</li>\n<li>在Vue 2.x 中，应用根容器的 <code>outerHTML</code> 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。Vue 3.x 现在使用应用容器的 <code>innerHTML</code>，这意味着容器本身不再被视为模板的一部分。</li>\n</ol>\n<h3 id=\"Vue3和Vue2开发区别\"><a href=\"#Vue3和Vue2开发区别\" class=\"headerlink\" title=\"Vue3和Vue2开发区别\"></a>Vue3和Vue2开发区别</h3><ol>\n<li>Vue2响应式原理采用的是defineProperty，而vue3选用的是proxy。这两者前者是修改对象属性的权限标签，后者是代理整个对象。性能上proxy会更加优秀;</li>\n<li>Vue3支持多个根节点;</li>\n<li>Vue3优化diff算法。不再像vue2那样比对所有dom，而采用了block tree的做法。此外重新渲染的算法里也做了改进，利用了闭包来进行缓存。这使得vue3的速度比vue2快了6倍。</li>\n<li>Vue2的Options API 对比Vue3的Composition API; </li>\n<li>生命周期的钩子使用方式，在 Vue3 生周期钩子不是全局可调用的了，需要另外从vue中引入。和引入reactive一样，生命周期的挂载钩子叫onMounted；</li>\n<li>emit使用方式：<br>emit：vue2使用<code>this.$emit(&#39;evnetName&#39;, params)</code>,vue3使用：<code>setup(_props, &#123;emit&#125;)&#123; emit(&#39;eventName&#39;, params)&#125;</code></li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/posts/8636/1.png","popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"Vue3学习笔记","path":"posts/8636/","eyeCatchImage":"/posts/8636/1.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-11-06T03:01:53.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-11-06T03:01:53.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue","tags":["Vue"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2309},{"title":"【react-note】useState()使用","copyright":true,"comments":1,"abbrlink":48187,"date":"2021-10-09T09:21:02.000Z","_content":"\n### useState是什么？\nuseState()是改变状态的开关，将状态添加到函数组件需要4个步骤:启用状态、初始化、读取和更新。\n\n### 使用方法\n\n场景： 有4个tab键需要切换，当切换不同tab时，要在指定区域内渲染指定的自定义组件。\n\n```javascript\n\nimport React, { useState } from 'react'; // 启用状态\nimport styles from './index.module.less';\nimport ComponentZero from './ComponentZero';\nimport ComponentOne from './ComponentOne';\nimport ComponentTwo from './ComponentTwo';\nimport ComponentThree from './ComponentThree';\n\nfuction ControlTabActive() {\n  // 初始化状态为 1\n  const [selectStatus, setSelectStatus] = useState(1);\n  const tabsList = [\n    { label: 'Tab1'},\n    { label: 'Tab2'},\n    { label: 'Tab3'},\n    { label: 'Tab4'},\n  ];\n  return (\n    <div className=\"app\">\n      <div className=\"tab\">\n        {\n          tabsList.map((item, index) =>\n            <div key={index}\n              className={`${styles.navitem} ${selectStatus === index ? styles.active : ''}`}\n              // 更新状态\n              onClick={() => setSelectStatus(index)}>\n              {item.label}\n            </div>)\n        }\n      </div>\n      {/*读取状态*/}\n      <div className=\"main\">\n        {selectStatus === 0 ? <ComponentZero /> : ''}\n        {selectStatus === 1 ? <ComponentOne /> : ''}\n        {selectStatus === 2 ? <ComponentTwo /> : ''}\n        {selectStatus === 3 ? <ComponentThree /> : ''}\n      </div>\n    </div>\n  )\n}\n```\n\n多种状态、状态的延迟初始化、seState() 中的坑等点击查看: <https://www.jianshu.com/p/700777ea9db0>\n\n\n\n\n\n\n","source":"_posts/react-note.md","raw":"---\ntitle: 【react-note】useState()使用\ntags: React\ncategories: React\ncopyright: true\ncomments: true\nabbrlink: 48187\ndate: 2021-10-09 17:21:02\n---\n\n### useState是什么？\nuseState()是改变状态的开关，将状态添加到函数组件需要4个步骤:启用状态、初始化、读取和更新。\n\n### 使用方法\n\n场景： 有4个tab键需要切换，当切换不同tab时，要在指定区域内渲染指定的自定义组件。\n\n```javascript\n\nimport React, { useState } from 'react'; // 启用状态\nimport styles from './index.module.less';\nimport ComponentZero from './ComponentZero';\nimport ComponentOne from './ComponentOne';\nimport ComponentTwo from './ComponentTwo';\nimport ComponentThree from './ComponentThree';\n\nfuction ControlTabActive() {\n  // 初始化状态为 1\n  const [selectStatus, setSelectStatus] = useState(1);\n  const tabsList = [\n    { label: 'Tab1'},\n    { label: 'Tab2'},\n    { label: 'Tab3'},\n    { label: 'Tab4'},\n  ];\n  return (\n    <div className=\"app\">\n      <div className=\"tab\">\n        {\n          tabsList.map((item, index) =>\n            <div key={index}\n              className={`${styles.navitem} ${selectStatus === index ? styles.active : ''}`}\n              // 更新状态\n              onClick={() => setSelectStatus(index)}>\n              {item.label}\n            </div>)\n        }\n      </div>\n      {/*读取状态*/}\n      <div className=\"main\">\n        {selectStatus === 0 ? <ComponentZero /> : ''}\n        {selectStatus === 1 ? <ComponentOne /> : ''}\n        {selectStatus === 2 ? <ComponentTwo /> : ''}\n        {selectStatus === 3 ? <ComponentThree /> : ''}\n      </div>\n    </div>\n  )\n}\n```\n\n多种状态、状态的延迟初始化、seState() 中的坑等点击查看: <https://www.jianshu.com/p/700777ea9db0>\n\n\n\n\n\n\n","slug":"react-note","published":1,"updated":"2022-07-13T01:47:21.939Z","layout":"post","photos":[],"link":"","_id":"clqdf8hti001w44t191pu7zpb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"useState是什么？\"><a href=\"#useState是什么？\" class=\"headerlink\" title=\"useState是什么？\"></a>useState是什么？</h3><p>useState()是改变状态的开关，将状态添加到函数组件需要4个步骤:启用状态、初始化、读取和更新。</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>场景： 有4个tab键需要切换，当切换不同tab时，要在指定区域内渲染指定的自定义组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>; <span class=\"comment\">// 启用状态</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.module.less&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ComponentZero <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ComponentZero&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ComponentOne <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ComponentOne&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ComponentTwo <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ComponentTwo&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ComponentThree <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ComponentThree&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fuction <span class=\"function\"><span class=\"title\">ControlTabActive</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化状态为 1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [selectStatus, setSelectStatus] = useState(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tabsList = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Tab1&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Tab2&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Tab3&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Tab4&#x27;</span>&#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">&quot;tab&quot;</span>&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          tabsList.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span></span><br><span class=\"line\">            &lt;div key=&#123;index&#125;</span><br><span class=\"line\">              className=&#123;<span class=\"string\">`<span class=\"subst\">$&#123;styles.navitem&#125;</span> <span class=\"subst\">$&#123;selectStatus === index ? styles.active : <span class=\"string\">&#x27;&#x27;</span>&#125;</span>`</span>&#125;</span><br><span class=\"line\">              <span class=\"comment\">// 更新状态</span></span><br><span class=\"line\">              onClick=&#123;<span class=\"function\">() =&gt;</span> setSelectStatus(index)&#125;&gt;</span><br><span class=\"line\">              &#123;item.label&#125;</span><br><span class=\"line\">            &lt;/div&gt;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &#123;<span class=\"comment\">/*读取状态*/</span>&#125;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">&quot;main&quot;</span>&gt;</span><br><span class=\"line\">        &#123;selectStatus === <span class=\"number\">0</span> ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentZero</span> /&gt;</span></span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">        &#123;selectStatus === <span class=\"number\">1</span> ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentOne</span> /&gt;</span></span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">        &#123;selectStatus === <span class=\"number\">2</span> ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentTwo</span> /&gt;</span></span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">        &#123;selectStatus === <span class=\"number\">3</span> ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentThree</span> /&gt;</span></span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多种状态、状态的延迟初始化、seState() 中的坑等点击查看: <a href=\"https://www.jianshu.com/p/700777ea9db0\">https://www.jianshu.com/p/700777ea9db0</a></p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"useState是什么？\"><a href=\"#useState是什么？\" class=\"headerlink\" title=\"useState是什么？\"></a>useState是什么？</h3><p>useState()是改变状态的开关，将状态添加到函数组件需要4个步骤:启用状态、初始化、读取和更新。</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>场景： 有4个tab键需要切换，当切换不同tab时，要在指定区域内渲染指定的自定义组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>; <span class=\"comment\">// 启用状态</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./index.module.less&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ComponentZero <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ComponentZero&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ComponentOne <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ComponentOne&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ComponentTwo <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ComponentTwo&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ComponentThree <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ComponentThree&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fuction <span class=\"function\"><span class=\"title\">ControlTabActive</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化状态为 1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [selectStatus, setSelectStatus] = useState(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tabsList = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Tab1&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Tab2&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Tab3&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">label</span>: <span class=\"string\">&#x27;Tab4&#x27;</span>&#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">&quot;tab&quot;</span>&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          tabsList.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span></span><br><span class=\"line\">            &lt;div key=&#123;index&#125;</span><br><span class=\"line\">              className=&#123;<span class=\"string\">`<span class=\"subst\">$&#123;styles.navitem&#125;</span> <span class=\"subst\">$&#123;selectStatus === index ? styles.active : <span class=\"string\">&#x27;&#x27;</span>&#125;</span>`</span>&#125;</span><br><span class=\"line\">              <span class=\"comment\">// 更新状态</span></span><br><span class=\"line\">              onClick=&#123;<span class=\"function\">() =&gt;</span> setSelectStatus(index)&#125;&gt;</span><br><span class=\"line\">              &#123;item.label&#125;</span><br><span class=\"line\">            &lt;/div&gt;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &#123;<span class=\"comment\">/*读取状态*/</span>&#125;</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">&quot;main&quot;</span>&gt;</span><br><span class=\"line\">        &#123;selectStatus === <span class=\"number\">0</span> ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentZero</span> /&gt;</span></span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">        &#123;selectStatus === <span class=\"number\">1</span> ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentOne</span> /&gt;</span></span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">        &#123;selectStatus === <span class=\"number\">2</span> ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentTwo</span> /&gt;</span></span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">        &#123;selectStatus === <span class=\"number\">3</span> ? <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ComponentThree</span> /&gt;</span></span> : <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多种状态、状态的延迟初始化、seState() 中的坑等点击查看: <a href=\"https://www.jianshu.com/p/700777ea9db0\">https://www.jianshu.com/p/700777ea9db0</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"【react-note】useState()使用","path":"posts/48187/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-10-09T09:21:02.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-10-09T09:21:02.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"React","tags":["React"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1515},{"title":"Array.prototype.reduce()","copyright":true,"comments":1,"abbrlink":25025,"date":"2022-04-28T06:35:10.000Z","_content":"\n### 基本使用\n```javascript\narr.reduce(function(previousValue, item, index, arr){},\ninitialValue)\n```\n1. callback入参：\n- previousValue：上一次调用 callbackFn 时的返回值。在第一次调用时，若指定了初始值 initialValue，其值则为 initialValue，否则为数组索引为 0 的元素 array[0]。\n- item initialValue，其值则为数组索引为 0 的元素 array[0]，否则为 array[1]。\n- index：数组中正在处理的元素的索引。若指定了初始值 initialValue，则起始索引号为 0，否则从索引 1 起始。\n- arr：用于遍历的数组。\n\n2. initialValue 可选\n作为第一次调用 callback 函数时参数 previousValue 的值。若指定了初始值 initialValue，则 currentValue 则将使用数组第一个元素；否则 previousValue 将使用数组第一个元素，而 currentValue 将使用数组第二个元素。\n\n3. 返回值\n使用 “reducer” 回调函数遍历整个数组后的结果。\n4. 如果数组为空且未指定初始值 initialValue，则会抛出 TypeError。\n\n### 使用场景\n#### 1 求所有数组的和\n```javascript\nconst arr = [1,2,3,4]\nconst res = arr.reduce((pre, item, index, arr)=>{\n  return pre + item\n}, 0)\nconsole.log(res) // 10\n```\n\n#### 2 数组扁平化\n\n```javascript\nconst arr = [[1,2], [3,4],[5,6]]\nconst res = arr.reduce((pre, item, index, arr)=>{\n  return pre.concat(item)\n},[])\nconsole.log(res)\n// [ 1, 2, 3, 4, 5, 6 ]\n```\n\n#### 3 统计数组中元素出现的次数\n```javascript\nconst arr = [1,2,2,3,3,3,4,4]\nconst res = arr.reduce((pre, item, index, arr)=>{\n  if(item in pre){\n    pre[item] += 1\n  } else {\n    pre[item] = 0\n  }\n  return pre\n}, {})\nconsole.log(res)\n// { '1': 1, '2': 2, '3': 3, '4': 2 }\n```\n#### 4 按照属性对object进行分类\n```javascript\nlet people = [\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n];\n\nfunction groupby(arr, property){\n  return arr.reduce(function(pre, item, index, arr){\n    let key = item[property]\n      if(!pre[key]){\n        pre[key] = [item]\n      } else {\n        pre[key].push(item)\n      }\n    return pre\n  }, {})\n}\nconsole.log(groupby(people, age))\n// {\n//   '20': [ { name: 'Max', age: 20 }, { name: 'Jane', age: 20 } ],\n//   '21': [ { name: 'Alice', age: 21 } ]\n// }\n```\n#### 5 数组去重\n```javascript\nconst arr = [1,2,2,2,3,3,4]\nconst res = arr.sort().reduce((pre, item, index, arr.sort())=>{\n  if(pre.length === 0 || pre[pre.length-1] !== item){\n    pre.push(item)\n  }\n  return pre\n}, [])\nconsole.log(res) // [1,2,3,4]\n```\n#### 6 函数组合实现管道-高阶函数\n```javascript\nconst double = x => x + x\nconst triple = x => 3 * x\nconst quadruple = x => 4 * x\n\n function pipe (...fns){\n  return function(input){\n    return fns.reduce((pre, fn, index) => fn(pre)\n    }, input)\n  }\n}\nconst sixble = pipe(double, triple)\nconsole.log(sixble(6))\n```\n#### 7 reduce实现map\n```javascript\nconst arr = [1,2,,3]\nif(!Array.prototype.mapUseReduce){\n  Array.prototype.mapUseReduce = function(callback, initialValue){\n    // this指向调用mapUseReduce的数组\n    return this.reduce((pre, item, index, arr)=>{\n      pre[index] = callback.call(initialValue, item, index, arr)\n      return pre\n    },[])\n  }\n}\nconst res = arr.mapUseReduce((item, index, arr)=>{\n  return item+index+arr.length\n})\nconsole.log(res) //[ 5, 7, <1 empty item>, 10 ]\n```\n### 手写实现reduce\n```javascript\nArray.prototype.myReduce = function(fn, initialValue){\n  if(!Array.isArray(this) || !this.length || typeof fn !== 'function'){ return [] }\n  const arr = this\n  const isHasInitval = initialValue === undefined ? false: true\n  let pre = isHasInitval ? initialValue : arr[0]\n  let i = isHasInitval ? 0 : 1\n  for(; i<arr.length; i++){\n    pre = fn(pre, arr[i], i, arr)\n  }\n  return pre\n}\nconst arr = [1,2,3]\nconsole.log(arr.myReduce((pre, item)=>{\n  return pre + item\n}, 0)) // 6\n\n```","source":"_posts/reduce.md","raw":"---\ntitle: Array.prototype.reduce()\ntags: JavaScript\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 25025\ndate: 2022-04-28 14:35:10\n---\n\n### 基本使用\n```javascript\narr.reduce(function(previousValue, item, index, arr){},\ninitialValue)\n```\n1. callback入参：\n- previousValue：上一次调用 callbackFn 时的返回值。在第一次调用时，若指定了初始值 initialValue，其值则为 initialValue，否则为数组索引为 0 的元素 array[0]。\n- item initialValue，其值则为数组索引为 0 的元素 array[0]，否则为 array[1]。\n- index：数组中正在处理的元素的索引。若指定了初始值 initialValue，则起始索引号为 0，否则从索引 1 起始。\n- arr：用于遍历的数组。\n\n2. initialValue 可选\n作为第一次调用 callback 函数时参数 previousValue 的值。若指定了初始值 initialValue，则 currentValue 则将使用数组第一个元素；否则 previousValue 将使用数组第一个元素，而 currentValue 将使用数组第二个元素。\n\n3. 返回值\n使用 “reducer” 回调函数遍历整个数组后的结果。\n4. 如果数组为空且未指定初始值 initialValue，则会抛出 TypeError。\n\n### 使用场景\n#### 1 求所有数组的和\n```javascript\nconst arr = [1,2,3,4]\nconst res = arr.reduce((pre, item, index, arr)=>{\n  return pre + item\n}, 0)\nconsole.log(res) // 10\n```\n\n#### 2 数组扁平化\n\n```javascript\nconst arr = [[1,2], [3,4],[5,6]]\nconst res = arr.reduce((pre, item, index, arr)=>{\n  return pre.concat(item)\n},[])\nconsole.log(res)\n// [ 1, 2, 3, 4, 5, 6 ]\n```\n\n#### 3 统计数组中元素出现的次数\n```javascript\nconst arr = [1,2,2,3,3,3,4,4]\nconst res = arr.reduce((pre, item, index, arr)=>{\n  if(item in pre){\n    pre[item] += 1\n  } else {\n    pre[item] = 0\n  }\n  return pre\n}, {})\nconsole.log(res)\n// { '1': 1, '2': 2, '3': 3, '4': 2 }\n```\n#### 4 按照属性对object进行分类\n```javascript\nlet people = [\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n];\n\nfunction groupby(arr, property){\n  return arr.reduce(function(pre, item, index, arr){\n    let key = item[property]\n      if(!pre[key]){\n        pre[key] = [item]\n      } else {\n        pre[key].push(item)\n      }\n    return pre\n  }, {})\n}\nconsole.log(groupby(people, age))\n// {\n//   '20': [ { name: 'Max', age: 20 }, { name: 'Jane', age: 20 } ],\n//   '21': [ { name: 'Alice', age: 21 } ]\n// }\n```\n#### 5 数组去重\n```javascript\nconst arr = [1,2,2,2,3,3,4]\nconst res = arr.sort().reduce((pre, item, index, arr.sort())=>{\n  if(pre.length === 0 || pre[pre.length-1] !== item){\n    pre.push(item)\n  }\n  return pre\n}, [])\nconsole.log(res) // [1,2,3,4]\n```\n#### 6 函数组合实现管道-高阶函数\n```javascript\nconst double = x => x + x\nconst triple = x => 3 * x\nconst quadruple = x => 4 * x\n\n function pipe (...fns){\n  return function(input){\n    return fns.reduce((pre, fn, index) => fn(pre)\n    }, input)\n  }\n}\nconst sixble = pipe(double, triple)\nconsole.log(sixble(6))\n```\n#### 7 reduce实现map\n```javascript\nconst arr = [1,2,,3]\nif(!Array.prototype.mapUseReduce){\n  Array.prototype.mapUseReduce = function(callback, initialValue){\n    // this指向调用mapUseReduce的数组\n    return this.reduce((pre, item, index, arr)=>{\n      pre[index] = callback.call(initialValue, item, index, arr)\n      return pre\n    },[])\n  }\n}\nconst res = arr.mapUseReduce((item, index, arr)=>{\n  return item+index+arr.length\n})\nconsole.log(res) //[ 5, 7, <1 empty item>, 10 ]\n```\n### 手写实现reduce\n```javascript\nArray.prototype.myReduce = function(fn, initialValue){\n  if(!Array.isArray(this) || !this.length || typeof fn !== 'function'){ return [] }\n  const arr = this\n  const isHasInitval = initialValue === undefined ? false: true\n  let pre = isHasInitval ? initialValue : arr[0]\n  let i = isHasInitval ? 0 : 1\n  for(; i<arr.length; i++){\n    pre = fn(pre, arr[i], i, arr)\n  }\n  return pre\n}\nconst arr = [1,2,3]\nconsole.log(arr.myReduce((pre, item)=>{\n  return pre + item\n}, 0)) // 6\n\n```","slug":"reduce","published":1,"updated":"2023-12-20T06:57:18.962Z","_id":"clqdf8hti001z44t14g343ddv","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, item, index, arr</span>)</span>&#123;&#125;,</span><br><span class=\"line\">initialValue)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>callback入参：</li>\n</ol>\n<ul>\n<li>previousValue：上一次调用 callbackFn 时的返回值。在第一次调用时，若指定了初始值 initialValue，其值则为 initialValue，否则为数组索引为 0 的元素 array[0]。</li>\n<li>item initialValue，其值则为数组索引为 0 的元素 array[0]，否则为 array[1]。</li>\n<li>index：数组中正在处理的元素的索引。若指定了初始值 initialValue，则起始索引号为 0，否则从索引 1 起始。</li>\n<li>arr：用于遍历的数组。</li>\n</ul>\n<ol start=\"2\">\n<li><p>initialValue 可选<br>作为第一次调用 callback 函数时参数 previousValue 的值。若指定了初始值 initialValue，则 currentValue 则将使用数组第一个元素；否则 previousValue 将使用数组第一个元素，而 currentValue 将使用数组第二个元素。</p>\n</li>\n<li><p>返回值<br>使用 “reducer” 回调函数遍历整个数组后的结果。</p>\n</li>\n<li><p>如果数组为空且未指定初始值 initialValue，则会抛出 TypeError。</p>\n</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><h4 id=\"1-求所有数组的和\"><a href=\"#1-求所有数组的和\" class=\"headerlink\" title=\"1 求所有数组的和\"></a>1 求所有数组的和</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-数组扁平化\"><a href=\"#2-数组扁平化\" class=\"headerlink\" title=\"2 数组扁平化\"></a>2 数组扁平化</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre.concat(item)</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-统计数组中元素出现的次数\"><a href=\"#3-统计数组中元素出现的次数\" class=\"headerlink\" title=\"3 统计数组中元素出现的次数\"></a>3 统计数组中元素出现的次数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item <span class=\"keyword\">in</span> pre)&#123;</span><br><span class=\"line\">    pre[item] += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    pre[item] = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\"><span class=\"comment\">// &#123; &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-按照属性对object进行分类\"><a href=\"#4-按照属性对object进行分类\" class=\"headerlink\" title=\"4 按照属性对object进行分类\"></a>4 按照属性对object进行分类</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> people = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Max&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jane&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">groupby</span>(<span class=\"params\">arr, property</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pre, item, index, arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = item[property]</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!pre[key])&#123;</span><br><span class=\"line\">        pre[key] = [item]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pre[key].push(item)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">  &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(groupby(people, age))</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#x27;20&#x27;: [ &#123; name: &#x27;Max&#x27;, age: 20 &#125;, &#123; name: &#x27;Jane&#x27;, age: 20 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   &#x27;21&#x27;: [ &#123; name: &#x27;Alice&#x27;, age: 21 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-数组去重\"><a href=\"#5-数组去重\" class=\"headerlink\" title=\"5 数组去重\"></a>5 数组去重</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.sort().reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr.sort()</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(pre.length === <span class=\"number\">0</span> || pre[pre.length-<span class=\"number\">1</span>] !== item)&#123;</span><br><span class=\"line\">    pre.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;, [])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-函数组合实现管道-高阶函数\"><a href=\"#6-函数组合实现管道-高阶函数\" class=\"headerlink\" title=\"6 函数组合实现管道-高阶函数\"></a>6 函数组合实现管道-高阶函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + x</span><br><span class=\"line\"><span class=\"keyword\">const</span> triple = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">3</span> * x</span><br><span class=\"line\"><span class=\"keyword\">const</span> quadruple = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">4</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pipe</span> (<span class=\"params\">...fns</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fns.reduce(<span class=\"function\">(<span class=\"params\">pre, fn, index</span>) =&gt;</span> fn(pre)</span><br><span class=\"line\">    &#125;, input)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sixble = pipe(double, triple)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sixble(<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-reduce实现map\"><a href=\"#7-reduce实现map\" class=\"headerlink\" title=\"7 reduce实现map\"></a>7 reduce实现map</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.prototype.mapUseReduce)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.mapUseReduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, initialValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this指向调用mapUseReduce的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      pre[index] = callback.call(initialValue, item, index, arr)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.mapUseReduce(<span class=\"function\">(<span class=\"params\">item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item+index+arr.length</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">//[ 5, 7, &lt;1 empty item&gt;, 10 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"手写实现reduce\"><a href=\"#手写实现reduce\" class=\"headerlink\" title=\"手写实现reduce\"></a>手写实现reduce</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myReduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, initialValue</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.isArray(<span class=\"built_in\">this</span>) || !<span class=\"built_in\">this</span>.length || <span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&#x27;function&#x27;</span>)&#123; <span class=\"keyword\">return</span> [] &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isHasInitval = initialValue === <span class=\"literal\">undefined</span> ? <span class=\"literal\">false</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pre = isHasInitval ? initialValue : arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = isHasInitval ? <span class=\"number\">0</span> : <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(; i&lt;arr.length; i++)&#123;</span><br><span class=\"line\">    pre = fn(pre, arr[i], i, arr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.myReduce(<span class=\"function\">(<span class=\"params\">pre, item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)) <span class=\"comment\">// 6</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, item, index, arr</span>)</span>&#123;&#125;,</span><br><span class=\"line\">initialValue)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>callback入参：</li>\n</ol>\n<ul>\n<li>previousValue：上一次调用 callbackFn 时的返回值。在第一次调用时，若指定了初始值 initialValue，其值则为 initialValue，否则为数组索引为 0 的元素 array[0]。</li>\n<li>item initialValue，其值则为数组索引为 0 的元素 array[0]，否则为 array[1]。</li>\n<li>index：数组中正在处理的元素的索引。若指定了初始值 initialValue，则起始索引号为 0，否则从索引 1 起始。</li>\n<li>arr：用于遍历的数组。</li>\n</ul>\n<ol start=\"2\">\n<li><p>initialValue 可选<br>作为第一次调用 callback 函数时参数 previousValue 的值。若指定了初始值 initialValue，则 currentValue 则将使用数组第一个元素；否则 previousValue 将使用数组第一个元素，而 currentValue 将使用数组第二个元素。</p>\n</li>\n<li><p>返回值<br>使用 “reducer” 回调函数遍历整个数组后的结果。</p>\n</li>\n<li><p>如果数组为空且未指定初始值 initialValue，则会抛出 TypeError。</p>\n</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><h4 id=\"1-求所有数组的和\"><a href=\"#1-求所有数组的和\" class=\"headerlink\" title=\"1 求所有数组的和\"></a>1 求所有数组的和</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-数组扁平化\"><a href=\"#2-数组扁平化\" class=\"headerlink\" title=\"2 数组扁平化\"></a>2 数组扁平化</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>]]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre.concat(item)</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-统计数组中元素出现的次数\"><a href=\"#3-统计数组中元素出现的次数\" class=\"headerlink\" title=\"3 统计数组中元素出现的次数\"></a>3 统计数组中元素出现的次数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item <span class=\"keyword\">in</span> pre)&#123;</span><br><span class=\"line\">    pre[item] += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    pre[item] = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\"><span class=\"comment\">// &#123; &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-按照属性对object进行分类\"><a href=\"#4-按照属性对object进行分类\" class=\"headerlink\" title=\"4 按照属性对object进行分类\"></a>4 按照属性对object进行分类</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> people = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Max&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jane&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">groupby</span>(<span class=\"params\">arr, property</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pre, item, index, arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = item[property]</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!pre[key])&#123;</span><br><span class=\"line\">        pre[key] = [item]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pre[key].push(item)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">  &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(groupby(people, age))</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#x27;20&#x27;: [ &#123; name: &#x27;Max&#x27;, age: 20 &#125;, &#123; name: &#x27;Jane&#x27;, age: 20 &#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   &#x27;21&#x27;: [ &#123; name: &#x27;Alice&#x27;, age: 21 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-数组去重\"><a href=\"#5-数组去重\" class=\"headerlink\" title=\"5 数组去重\"></a>5 数组去重</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.sort().reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr.sort()</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(pre.length === <span class=\"number\">0</span> || pre[pre.length-<span class=\"number\">1</span>] !== item)&#123;</span><br><span class=\"line\">    pre.push(item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;, [])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-函数组合实现管道-高阶函数\"><a href=\"#6-函数组合实现管道-高阶函数\" class=\"headerlink\" title=\"6 函数组合实现管道-高阶函数\"></a>6 函数组合实现管道-高阶函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> double = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + x</span><br><span class=\"line\"><span class=\"keyword\">const</span> triple = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">3</span> * x</span><br><span class=\"line\"><span class=\"keyword\">const</span> quadruple = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">4</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pipe</span> (<span class=\"params\">...fns</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fns.reduce(<span class=\"function\">(<span class=\"params\">pre, fn, index</span>) =&gt;</span> fn(pre)</span><br><span class=\"line\">    &#125;, input)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sixble = pipe(double, triple)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sixble(<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-reduce实现map\"><a href=\"#7-reduce实现map\" class=\"headerlink\" title=\"7 reduce实现map\"></a>7 reduce实现map</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.prototype.mapUseReduce)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.mapUseReduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, initialValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this指向调用mapUseReduce的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      pre[index] = callback.call(initialValue, item, index, arr)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = arr.mapUseReduce(<span class=\"function\">(<span class=\"params\">item, index, arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item+index+arr.length</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res) <span class=\"comment\">//[ 5, 7, &lt;1 empty item&gt;, 10 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"手写实现reduce\"><a href=\"#手写实现reduce\" class=\"headerlink\" title=\"手写实现reduce\"></a>手写实现reduce</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.myReduce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, initialValue</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.isArray(<span class=\"built_in\">this</span>) || !<span class=\"built_in\">this</span>.length || <span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&#x27;function&#x27;</span>)&#123; <span class=\"keyword\">return</span> [] &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isHasInitval = initialValue === <span class=\"literal\">undefined</span> ? <span class=\"literal\">false</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pre = isHasInitval ? initialValue : arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = isHasInitval ? <span class=\"number\">0</span> : <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(; i&lt;arr.length; i++)&#123;</span><br><span class=\"line\">    pre = fn(pre, arr[i], i, arr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.myReduce(<span class=\"function\">(<span class=\"params\">pre, item</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre + item</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)) <span class=\"comment\">// 6</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"Array.prototype.reduce()","path":"posts/25025/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-04-28T06:35:10.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-04-28T06:35:10.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JavaScript"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3112},{"title":"require.context使用","copyright":true,"comments":1,"abbrlink":36892,"date":"2021-10-08T09:28:03.000Z","_content":"\n### 什么是require.context\n  一个webpack的api,通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块。\n\n### require.context使用场景\n\n```javascript\nimport home from '../page/home';\nimport demo from '../page/demo';\nimport lcdp from '../page/lcdp';\nimport table from '../page/table';\nimport form from '../page/form';\nimport detail from '../page/detail';\n```\n\n可以使用require.context：\n\n```javascript\n// 获取全部modules目录\nconst modulesFiles = require.context('../pages', true, /^[.](\\/[^/]*)\\/index\\.js$/);\n\n// 组织modules为数组\nconst appModules = modulesFiles.keys().reduce((modules, modulePath) => {\n  const value = modulesFiles(modulePath);\n  const moduleName = modulePath.match(/\\.\\/(\\S*)\\//)[1];\n  modules.push({\n    moduleName,\n    module: value.default,\n  });\n  return modules;\n}, []);\n\nexport { appModules };\n```\n\n### require.context使用方法\n\nrequire.context函数接受三个参数：\n1. directory {String} -读取文件的路径\n2. useSubdirectories {Boolean} -是否遍历文件的子目录\n3. regExp {RegExp} -匹配文件的正则\n\neg: ``` require.context('./test', false, /.test.js$/);```\n\nrequire.context()执行后返回是一个函数：\n```javascript\n webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\n```\n并且这个函数有三个属性：\n\n1. resolve {Function} -接受一个参数request,request为test文件夹下面匹配文件的相对路径,返回这个匹配文件相对于整个工程的相对路径\n2. keys {Function} -返回匹配成功模块的名字组成的数组\n3. id {String} -执行环境的id,返回的是一个字符串,主要用在module.hot.accept,应该是热加载?\n\n打印这三个属性：\n\n![2.jpg](./require.context使用/2.jpg)\n\n![1.jpg](./require.context使用/1.jpg)\n\n\n\n\n\n\n\n","source":"_posts/require.context使用.md","raw":"---\ntitle: require.context使用\ntags: Webpack\ncategories: Webpack\ncopyright: true\ncomments: true\nabbrlink: 36892\ndate: 2021-10-08 17:28:03\n---\n\n### 什么是require.context\n  一个webpack的api,通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块。\n\n### require.context使用场景\n\n```javascript\nimport home from '../page/home';\nimport demo from '../page/demo';\nimport lcdp from '../page/lcdp';\nimport table from '../page/table';\nimport form from '../page/form';\nimport detail from '../page/detail';\n```\n\n可以使用require.context：\n\n```javascript\n// 获取全部modules目录\nconst modulesFiles = require.context('../pages', true, /^[.](\\/[^/]*)\\/index\\.js$/);\n\n// 组织modules为数组\nconst appModules = modulesFiles.keys().reduce((modules, modulePath) => {\n  const value = modulesFiles(modulePath);\n  const moduleName = modulePath.match(/\\.\\/(\\S*)\\//)[1];\n  modules.push({\n    moduleName,\n    module: value.default,\n  });\n  return modules;\n}, []);\n\nexport { appModules };\n```\n\n### require.context使用方法\n\nrequire.context函数接受三个参数：\n1. directory {String} -读取文件的路径\n2. useSubdirectories {Boolean} -是否遍历文件的子目录\n3. regExp {RegExp} -匹配文件的正则\n\neg: ``` require.context('./test', false, /.test.js$/);```\n\nrequire.context()执行后返回是一个函数：\n```javascript\n webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\n```\n并且这个函数有三个属性：\n\n1. resolve {Function} -接受一个参数request,request为test文件夹下面匹配文件的相对路径,返回这个匹配文件相对于整个工程的相对路径\n2. keys {Function} -返回匹配成功模块的名字组成的数组\n3. id {String} -执行环境的id,返回的是一个字符串,主要用在module.hot.accept,应该是热加载?\n\n打印这三个属性：\n\n![2.jpg](./require.context使用/2.jpg)\n\n![1.jpg](./require.context使用/1.jpg)\n\n\n\n\n\n\n\n","slug":"require.context使用","published":1,"updated":"2022-07-13T01:47:21.944Z","layout":"post","photos":[],"link":"","_id":"clqdf8htj002444t1byzr1bcj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"什么是require-context\"><a href=\"#什么是require-context\" class=\"headerlink\" title=\"什么是require.context\"></a>什么是require.context</h3><p>  一个webpack的api,通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块。</p>\n<h3 id=\"require-context使用场景\"><a href=\"#require-context使用场景\" class=\"headerlink\" title=\"require.context使用场景\"></a>require.context使用场景</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> home <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/home&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> demo <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/demo&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lcdp <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/lcdp&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> table <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/table&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> form <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/form&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> detail <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/detail&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用require.context：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取全部modules目录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> modulesFiles = <span class=\"built_in\">require</span>.context(<span class=\"string\">&#x27;../pages&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"regexp\">/^[.](\\/[^/]*)\\/index\\.js$/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组织modules为数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> appModules = modulesFiles.keys().reduce(<span class=\"function\">(<span class=\"params\">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = modulesFiles(modulePath);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleName = modulePath.match(<span class=\"regexp\">/\\.\\/(\\S*)\\//</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  modules.push(&#123;</span><br><span class=\"line\">    moduleName,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: value.default,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> modules;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; appModules &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"require-context使用方法\"><a href=\"#require-context使用方法\" class=\"headerlink\" title=\"require.context使用方法\"></a>require.context使用方法</h3><p>require.context函数接受三个参数：</p>\n<ol>\n<li>directory {String} -读取文件的路径</li>\n<li>useSubdirectories {Boolean} -是否遍历文件的子目录</li>\n<li>regExp {RegExp} -匹配文件的正则</li>\n</ol>\n<p>eg: <code> require.context(&#39;./test&#39;, false, /.test.js$/);</code></p>\n<p>require.context()执行后返回是一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"title\">webpackContext</span>(<span class=\"params\">req</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = webpackContextResolve(req);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __webpack_require__(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并且这个函数有三个属性：</p>\n<ol>\n<li>resolve {Function} -接受一个参数request,request为test文件夹下面匹配文件的相对路径,返回这个匹配文件相对于整个工程的相对路径</li>\n<li>keys {Function} -返回匹配成功模块的名字组成的数组</li>\n<li>id {String} -执行环境的id,返回的是一个字符串,主要用在module.hot.accept,应该是热加载?</li>\n</ol>\n<p>打印这三个属性：</p>\n<p><img data-src=\"/posts/36892/2.jpg\" alt=\"2.jpg\"></p>\n<p><img data-src=\"/posts/36892/1.jpg\" alt=\"1.jpg\"></p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"什么是require-context\"><a href=\"#什么是require-context\" class=\"headerlink\" title=\"什么是require.context\"></a>什么是require.context</h3><p>  一个webpack的api,通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块。</p>\n<h3 id=\"require-context使用场景\"><a href=\"#require-context使用场景\" class=\"headerlink\" title=\"require.context使用场景\"></a>require.context使用场景</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> home <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/home&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> demo <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/demo&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lcdp <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/lcdp&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> table <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/table&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> form <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/form&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> detail <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../page/detail&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用require.context：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取全部modules目录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> modulesFiles = <span class=\"built_in\">require</span>.context(<span class=\"string\">&#x27;../pages&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"regexp\">/^[.](\\/[^/]*)\\/index\\.js$/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组织modules为数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> appModules = modulesFiles.keys().reduce(<span class=\"function\">(<span class=\"params\">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = modulesFiles(modulePath);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> moduleName = modulePath.match(<span class=\"regexp\">/\\.\\/(\\S*)\\//</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">  modules.push(&#123;</span><br><span class=\"line\">    moduleName,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: value.default,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> modules;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; appModules &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"require-context使用方法\"><a href=\"#require-context使用方法\" class=\"headerlink\" title=\"require.context使用方法\"></a>require.context使用方法</h3><p>require.context函数接受三个参数：</p>\n<ol>\n<li>directory {String} -读取文件的路径</li>\n<li>useSubdirectories {Boolean} -是否遍历文件的子目录</li>\n<li>regExp {RegExp} -匹配文件的正则</li>\n</ol>\n<p>eg: <code> require.context(&#39;./test&#39;, false, /.test.js$/);</code></p>\n<p>require.context()执行后返回是一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"title\">webpackContext</span>(<span class=\"params\">req</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = webpackContextResolve(req);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __webpack_require__(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并且这个函数有三个属性：</p>\n<ol>\n<li>resolve {Function} -接受一个参数request,request为test文件夹下面匹配文件的相对路径,返回这个匹配文件相对于整个工程的相对路径</li>\n<li>keys {Function} -返回匹配成功模块的名字组成的数组</li>\n<li>id {String} -执行环境的id,返回的是一个字符串,主要用在module.hot.accept,应该是热加载?</li>\n</ol>\n<p>打印这三个属性：</p>\n<p><img src=\"/posts/36892/2.jpg\" alt=\"2.jpg\"></p>\n<p><img src=\"/posts/36892/1.jpg\" alt=\"1.jpg\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/posts/36892/2.jpg","popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"require.context使用","path":"posts/36892/","eyeCatchImage":"/posts/36892/2.jpg","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-10-08T09:28:03.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-10-08T09:28:03.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Webpack","tags":["Webpack"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1353},{"title":"JS-this","copyright":true,"comments":1,"abbrlink":14526,"date":"2022-04-10T02:06:25.000Z","_content":"### 绑定规则及优先级\n\n1. new 绑定：new foo()\n2. 显示绑定：call,apply,bind\n3. 隐式绑定：对象调用(obj.foo())，谁调用指向谁\n4. 默认绑定：默认指向window\n\n### 箭头函数\n箭头函数本身没有this，this指向由外层函数的作用域决定，父级this指向谁，箭头函数的this就指向谁。上面四项绑定规则对箭头函数都无效\n```javascript\nvar a = 0\nfunction foo (b) {\n    console.log(this)\n    var test = () => {\n        console.log(this)\n    }\n    return test\n}\nvar obj1 = {\n    a: 1,\n    foo: foo,\n}\nvar obj2 = {\n    a: 2\n    foo: () => {\n        console.log(this)\n    }\n}\nobj1.foo()() // this此时指向obj1,虽然是window调用，但是默认绑定规则对箭头函数失效，箭头函数this就是父级this的指向。\nvar bar = foo.call(obj1) // this依然指向window, 显示绑定也无法改变this指向\nobj2.foo() // this此时指向window,而不指向obj2，所以隐式调用也无效\n\n// 箭头函数不允许作为构造函数\nvar foo1 = () => {\n    console.log(this)\n}\nnew foo1() // 浏览器报错：Uncaught typeerror\n```\n\n### 练习题1：\n```javascript\nvar name = 'window'\nvar obj1 = {\n    name: '1',\n    fn1: function(){\n        console.log(this.name)\n    },\n    fn2: () => {console.log(this.name)},\n    fn3: function(){\n        return function(){\n            console.log(this.name)\n        }\n    },\n    fn4: function(){\n        return () => {\n            console.log(this.name)\n        }\n    },\n}\nvar obj2 = {\n    name: '2'\n}\n\nobj1.fn1() // 1\nobj1.fn1.call(obj2) // 2\n\nobj1.fn2() // window\nobj1.fn2.call(obj2) // window\n\nobj1.fn3()() //错误 1 // 正确 window 返回的函数自调用，所以指向window\nobj1.fn3().call(obj2)  // 2\nobj1.fn3.call(obj2)() // 错误 2 // 正确 window 返回的函数自调用，所以指向window\n\nobj1.fn4()() // 错误window //正确 1，返回的箭头函数中this指向父级fn4,fn4的this是obj1调用，故this指向obj1, 所以答案是1\nobj1.fn4().call(obj2) // 错误window //正确 1,上题返回1，call不能改变箭头函数的this,故还是1\nobj1.fn4.call(obj2)() // 2，相当于fn4在obj2中了，fn4 this指向obj2,故返回的箭头函数this也指向obj2。\n//想更改箭头函数的this指向，只能更改父级作用域this指向\n\n```\n\n### 练习题2：\n```javascript\nfunction Foo() {\n    getName = function() {\n        console.log(1)\n    }\n    return this\n}\nFoo.getName = function(){ console.log(2) }\nFoo.prototype.getName = function(){ console.log(3) }\nvar getName = function(){ console.log(4) }\nfunction getName (){ console.log(5) }\n\nFoo.getName() // 2\ngetName() // 4\nFoo().getName() // 1\ngetName() // 1\n// 预编译时，函数提升，执行时getNname表达式会覆盖函数getNname，所以5永远也不会打印出来了。\n\nnew Foo.getName() // 2, new的是对象上的属性，该属性是个方法(Foo.getNname = function(){ console.log(2) })，new的时候会执行里面的语句\nnew Foo().getName()  // 3, 要这么看：(new Foo()).getName()，也就是new Foo()之后的实例对象的getName()，在实例对象上没有找到getName()，再去原型上找\nnew new Foo().getName()  // 3，这么看：new( (new Foo()).getName() ),  最终new对象实例上的属性，实例上没有该属性，去原型上找，该属性是个方法，new时会执行里面的语句\n\n```\n\n","source":"_posts/this.md","raw":"---\ntitle: JS-this\ntags: JS基础\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 14526\ndate: 2022-04-10 10:06:25\n---\n### 绑定规则及优先级\n\n1. new 绑定：new foo()\n2. 显示绑定：call,apply,bind\n3. 隐式绑定：对象调用(obj.foo())，谁调用指向谁\n4. 默认绑定：默认指向window\n\n### 箭头函数\n箭头函数本身没有this，this指向由外层函数的作用域决定，父级this指向谁，箭头函数的this就指向谁。上面四项绑定规则对箭头函数都无效\n```javascript\nvar a = 0\nfunction foo (b) {\n    console.log(this)\n    var test = () => {\n        console.log(this)\n    }\n    return test\n}\nvar obj1 = {\n    a: 1,\n    foo: foo,\n}\nvar obj2 = {\n    a: 2\n    foo: () => {\n        console.log(this)\n    }\n}\nobj1.foo()() // this此时指向obj1,虽然是window调用，但是默认绑定规则对箭头函数失效，箭头函数this就是父级this的指向。\nvar bar = foo.call(obj1) // this依然指向window, 显示绑定也无法改变this指向\nobj2.foo() // this此时指向window,而不指向obj2，所以隐式调用也无效\n\n// 箭头函数不允许作为构造函数\nvar foo1 = () => {\n    console.log(this)\n}\nnew foo1() // 浏览器报错：Uncaught typeerror\n```\n\n### 练习题1：\n```javascript\nvar name = 'window'\nvar obj1 = {\n    name: '1',\n    fn1: function(){\n        console.log(this.name)\n    },\n    fn2: () => {console.log(this.name)},\n    fn3: function(){\n        return function(){\n            console.log(this.name)\n        }\n    },\n    fn4: function(){\n        return () => {\n            console.log(this.name)\n        }\n    },\n}\nvar obj2 = {\n    name: '2'\n}\n\nobj1.fn1() // 1\nobj1.fn1.call(obj2) // 2\n\nobj1.fn2() // window\nobj1.fn2.call(obj2) // window\n\nobj1.fn3()() //错误 1 // 正确 window 返回的函数自调用，所以指向window\nobj1.fn3().call(obj2)  // 2\nobj1.fn3.call(obj2)() // 错误 2 // 正确 window 返回的函数自调用，所以指向window\n\nobj1.fn4()() // 错误window //正确 1，返回的箭头函数中this指向父级fn4,fn4的this是obj1调用，故this指向obj1, 所以答案是1\nobj1.fn4().call(obj2) // 错误window //正确 1,上题返回1，call不能改变箭头函数的this,故还是1\nobj1.fn4.call(obj2)() // 2，相当于fn4在obj2中了，fn4 this指向obj2,故返回的箭头函数this也指向obj2。\n//想更改箭头函数的this指向，只能更改父级作用域this指向\n\n```\n\n### 练习题2：\n```javascript\nfunction Foo() {\n    getName = function() {\n        console.log(1)\n    }\n    return this\n}\nFoo.getName = function(){ console.log(2) }\nFoo.prototype.getName = function(){ console.log(3) }\nvar getName = function(){ console.log(4) }\nfunction getName (){ console.log(5) }\n\nFoo.getName() // 2\ngetName() // 4\nFoo().getName() // 1\ngetName() // 1\n// 预编译时，函数提升，执行时getNname表达式会覆盖函数getNname，所以5永远也不会打印出来了。\n\nnew Foo.getName() // 2, new的是对象上的属性，该属性是个方法(Foo.getNname = function(){ console.log(2) })，new的时候会执行里面的语句\nnew Foo().getName()  // 3, 要这么看：(new Foo()).getName()，也就是new Foo()之后的实例对象的getName()，在实例对象上没有找到getName()，再去原型上找\nnew new Foo().getName()  // 3，这么看：new( (new Foo()).getName() ),  最终new对象实例上的属性，实例上没有该属性，去原型上找，该属性是个方法，new时会执行里面的语句\n\n```\n\n","slug":"this","published":1,"updated":"2023-12-20T06:57:18.967Z","_id":"clqdf8htk002744t1cthl1cdn","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"绑定规则及优先级\"><a href=\"#绑定规则及优先级\" class=\"headerlink\" title=\"绑定规则及优先级\"></a>绑定规则及优先级</h3><ol>\n<li>new 绑定：new foo()</li>\n<li>显示绑定：call,apply,bind</li>\n<li>隐式绑定：对象调用(obj.foo())，谁调用指向谁</li>\n<li>默认绑定：默认指向window</li>\n</ol>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数本身没有this，this指向由外层函数的作用域决定，父级this指向谁，箭头函数的this就指向谁。上面四项绑定规则对箭头函数都无效</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> test</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    foo: foo,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span></span><br><span class=\"line\">    foo: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.foo()() <span class=\"comment\">// this此时指向obj1,虽然是window调用，但是默认绑定规则对箭头函数失效，箭头函数this就是父级this的指向。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo.call(obj1) <span class=\"comment\">// this依然指向window, 显示绑定也无法改变this指向</span></span><br><span class=\"line\">obj2.foo() <span class=\"comment\">// this此时指向window,而不指向obj2，所以隐式调用也无效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数不允许作为构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo1 = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> foo1() <span class=\"comment\">// 浏览器报错：Uncaught typeerror</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"练习题1：\"><a href=\"#练习题1：\" class=\"headerlink\" title=\"练习题1：\"></a>练习题1：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    fn1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fn2: <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)&#125;,</span><br><span class=\"line\">    fn3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fn4: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.fn1() <span class=\"comment\">// 1</span></span><br><span class=\"line\">obj1.fn1.call(obj2) <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1.fn2() <span class=\"comment\">// window</span></span><br><span class=\"line\">obj1.fn2.call(obj2) <span class=\"comment\">// window</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1.fn3()() <span class=\"comment\">//错误 1 // 正确 window 返回的函数自调用，所以指向window</span></span><br><span class=\"line\">obj1.fn3().call(obj2)  <span class=\"comment\">// 2</span></span><br><span class=\"line\">obj1.fn3.call(obj2)() <span class=\"comment\">// 错误 2 // 正确 window 返回的函数自调用，所以指向window</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1.fn4()() <span class=\"comment\">// 错误window //正确 1，返回的箭头函数中this指向父级fn4,fn4的this是obj1调用，故this指向obj1, 所以答案是1</span></span><br><span class=\"line\">obj1.fn4().call(obj2) <span class=\"comment\">// 错误window //正确 1,上题返回1，call不能改变箭头函数的this,故还是1</span></span><br><span class=\"line\">obj1.fn4.call(obj2)() <span class=\"comment\">// 2，相当于fn4在obj2中了，fn4 this指向obj2,故返回的箭头函数this也指向obj2。</span></span><br><span class=\"line\"><span class=\"comment\">//想更改箭头函数的this指向，只能更改父级作用域this指向</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"练习题2：\"><a href=\"#练习题2：\" class=\"headerlink\" title=\"练习题2：\"></a>练习题2：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getName() <span class=\"comment\">// 2</span></span><br><span class=\"line\">getName() <span class=\"comment\">// 4</span></span><br><span class=\"line\">Foo().getName() <span class=\"comment\">// 1</span></span><br><span class=\"line\">getName() <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 预编译时，函数提升，执行时getNname表达式会覆盖函数getNname，所以5永远也不会打印出来了。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName() <span class=\"comment\">// 2, new的是对象上的属性，该属性是个方法(Foo.getNname = function()&#123; console.log(2) &#125;)，new的时候会执行里面的语句</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName()  <span class=\"comment\">// 3, 要这么看：(new Foo()).getName()，也就是new Foo()之后的实例对象的getName()，在实例对象上没有找到getName()，再去原型上找</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName()  <span class=\"comment\">// 3，这么看：new( (new Foo()).getName() ),  最终new对象实例上的属性，实例上没有该属性，去原型上找，该属性是个方法，new时会执行里面的语句</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"绑定规则及优先级\"><a href=\"#绑定规则及优先级\" class=\"headerlink\" title=\"绑定规则及优先级\"></a>绑定规则及优先级</h3><ol>\n<li>new 绑定：new foo()</li>\n<li>显示绑定：call,apply,bind</li>\n<li>隐式绑定：对象调用(obj.foo())，谁调用指向谁</li>\n<li>默认绑定：默认指向window</li>\n</ol>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>箭头函数本身没有this，this指向由外层函数的作用域决定，父级this指向谁，箭头函数的this就指向谁。上面四项绑定规则对箭头函数都无效</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> test</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    foo: foo,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">2</span></span><br><span class=\"line\">    foo: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.foo()() <span class=\"comment\">// this此时指向obj1,虽然是window调用，但是默认绑定规则对箭头函数失效，箭头函数this就是父级this的指向。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo.call(obj1) <span class=\"comment\">// this依然指向window, 显示绑定也无法改变this指向</span></span><br><span class=\"line\">obj2.foo() <span class=\"comment\">// this此时指向window,而不指向obj2，所以隐式调用也无效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数不允许作为构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo1 = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> foo1() <span class=\"comment\">// 浏览器报错：Uncaught typeerror</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"练习题1：\"><a href=\"#练习题1：\" class=\"headerlink\" title=\"练习题1：\"></a>练习题1：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;window&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    fn1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fn2: <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)&#125;,</span><br><span class=\"line\">    fn3: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fn4: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.fn1() <span class=\"comment\">// 1</span></span><br><span class=\"line\">obj1.fn1.call(obj2) <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1.fn2() <span class=\"comment\">// window</span></span><br><span class=\"line\">obj1.fn2.call(obj2) <span class=\"comment\">// window</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1.fn3()() <span class=\"comment\">//错误 1 // 正确 window 返回的函数自调用，所以指向window</span></span><br><span class=\"line\">obj1.fn3().call(obj2)  <span class=\"comment\">// 2</span></span><br><span class=\"line\">obj1.fn3.call(obj2)() <span class=\"comment\">// 错误 2 // 正确 window 返回的函数自调用，所以指向window</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj1.fn4()() <span class=\"comment\">// 错误window //正确 1，返回的箭头函数中this指向父级fn4,fn4的this是obj1调用，故this指向obj1, 所以答案是1</span></span><br><span class=\"line\">obj1.fn4().call(obj2) <span class=\"comment\">// 错误window //正确 1,上题返回1，call不能改变箭头函数的this,故还是1</span></span><br><span class=\"line\">obj1.fn4.call(obj2)() <span class=\"comment\">// 2，相当于fn4在obj2中了，fn4 this指向obj2,故返回的箭头函数this也指向obj2。</span></span><br><span class=\"line\"><span class=\"comment\">//想更改箭头函数的this指向，只能更改父级作用域this指向</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"练习题2：\"><a href=\"#练习题2：\" class=\"headerlink\" title=\"练习题2：\"></a>练习题2：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getName() <span class=\"comment\">// 2</span></span><br><span class=\"line\">getName() <span class=\"comment\">// 4</span></span><br><span class=\"line\">Foo().getName() <span class=\"comment\">// 1</span></span><br><span class=\"line\">getName() <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 预编译时，函数提升，执行时getNname表达式会覆盖函数getNname，所以5永远也不会打印出来了。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName() <span class=\"comment\">// 2, new的是对象上的属性，该属性是个方法(Foo.getNname = function()&#123; console.log(2) &#125;)，new的时候会执行里面的语句</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName()  <span class=\"comment\">// 3, 要这么看：(new Foo()).getName()，也就是new Foo()之后的实例对象的getName()，在实例对象上没有找到getName()，再去原型上找</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName()  <span class=\"comment\">// 3，这么看：new( (new Foo()).getName() ),  最终new对象实例上的属性，实例上没有该属性，去原型上找，该属性是个方法，new时会执行里面的语句</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"JS-this","path":"posts/14526/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-04-10T02:06:25.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-04-10T02:06:25.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JS基础"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2281},{"title":"vuex学习","copyright":true,"comments":1,"abbrlink":3116,"date":"2021-03-05T06:06:16.000Z","_content":"\n\n官方文档： https://vuex.vuejs.org/zh/\n\n### 1 vuex概述\n组件之间共享数据的方式\n- 父->子：v-bind\n- 子->父：v-on\n- 兄弟之间共享数据：EventBus\n只适用于小范围共享。\n\nvuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。\n\n<div align=center>\n<img src=\"vuex-1.png\" width = 65%>\n<!-- ![vuex](vuex-1.png) -->\n</div>\n\n使用vuex好处：\n- 能够在vuex中集中管理共享的数据，易于开发和后期维护\n- 能够高效地实现组件之间的数据共享，提高开发效率\n- 存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步\n\n### 2 vuex核心概念\n#### state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\n\n```\nconst store = new Vuex.store({\n  state: {\n    count: 0,\n  }\n});\n```\n两种访问state数据方式：\n1.直接在需要用的地方使用\"$store.state.***\"\n2. 先引入mapState,再使用\nimport { mapState } from vuex;\ncomputed: {\n  ...mapState(['count']),\n},\n\n#### Mutation\nMutation用于改变store中的数据,只能处理同步任务，不能执行异步操作\n- 只能通过Mutation变更store数据，不可以直接在组件中操作store数据\n- 这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化\n```\n// 定义Mutation\nconst store  = new Vuex.store({\n  state: {\n    count: 0,\n  },\n  mutations: {\n    add(state, step) {\n      state.count += step;\n    },\n  },\n});\n\n//触发mutation: 第一种方式\nmethods: {\n  handle1() {\n    this.$store.commit('add', 3);\n  },\n},\n//触发mutation：第二种方式\n\nimport { mapMutations } from vuex;\nmethods: {\n  ...mapMutations(['add']),\n  handle2() {\n    this.add(3);\n  },\n},\n```\n\n#### Action\nAction用于处理异步任务。\n注意：\n- 如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。\n- Action不能直接修改state数据，必须通过commit触发mutation才行\n\n```\n//定义Action\nconst store = new Vuex.store({\n  mutations: {\n    add(state, step) {\n      state.count += step;\n    },\n  },\n  actions: {\n    addAsync(context, step) {\n      // Action不能直接修改state数据，必须通过commit触发mutation才行\n      setTimeout(() => {\n        context.conmmit('add', step);\n      }, 1000);\n    },\n  },\n});\n\n// 触发Action: 第一种方式\nmethods: {\n  handle3() {\n    this.$store.dispatch('addAsync', 3);\n  },\n},\n\n// 触发Action:第二种方式\nimport { mapActions } from 'vuex';\nmethods: {\n  ...mapActions(['addAsync']),\n  handle4() {\n    this.addAsync(3);\n  },\n},\n```\n#### Getter\ngetter用于对store中的数据进行加工处理形成新的数据。\n- getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性\n- getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化\n\n```\n// 定义getter\nconst store = new Vuex.store({\n  state: {\n    count: 0,\n  },\n  getters: {\n    showNum: (state) => {\n      return state.count++;\n    },\n  },\n});\n\n// 第一种使用方式\nmethods: {\n  handle5() {\n    return this.$store.getter('showNum');\n  },\n},\n\n/ 第二种使用方式\nimport { mapGetters } from 'vuex';\ncomputed: {\n  ...mapGetters(['showNum']),\n},\n```\n\n\n\n\n\n\n\n","source":"_posts/vuex.md","raw":"---\ntitle: vuex学习\ntags: Vuex\ncategories: Vuex\ncopyright: true\ncomments: true\nabbrlink: 3116\ndate: 2021-03-05 14:06:16\n---\n\n\n官方文档： https://vuex.vuejs.org/zh/\n\n### 1 vuex概述\n组件之间共享数据的方式\n- 父->子：v-bind\n- 子->父：v-on\n- 兄弟之间共享数据：EventBus\n只适用于小范围共享。\n\nvuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。\n\n<div align=center>\n<img src=\"vuex-1.png\" width = 65%>\n<!-- ![vuex](vuex-1.png) -->\n</div>\n\n使用vuex好处：\n- 能够在vuex中集中管理共享的数据，易于开发和后期维护\n- 能够高效地实现组件之间的数据共享，提高开发效率\n- 存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步\n\n### 2 vuex核心概念\n#### state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\n\n```\nconst store = new Vuex.store({\n  state: {\n    count: 0,\n  }\n});\n```\n两种访问state数据方式：\n1.直接在需要用的地方使用\"$store.state.***\"\n2. 先引入mapState,再使用\nimport { mapState } from vuex;\ncomputed: {\n  ...mapState(['count']),\n},\n\n#### Mutation\nMutation用于改变store中的数据,只能处理同步任务，不能执行异步操作\n- 只能通过Mutation变更store数据，不可以直接在组件中操作store数据\n- 这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化\n```\n// 定义Mutation\nconst store  = new Vuex.store({\n  state: {\n    count: 0,\n  },\n  mutations: {\n    add(state, step) {\n      state.count += step;\n    },\n  },\n});\n\n//触发mutation: 第一种方式\nmethods: {\n  handle1() {\n    this.$store.commit('add', 3);\n  },\n},\n//触发mutation：第二种方式\n\nimport { mapMutations } from vuex;\nmethods: {\n  ...mapMutations(['add']),\n  handle2() {\n    this.add(3);\n  },\n},\n```\n\n#### Action\nAction用于处理异步任务。\n注意：\n- 如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。\n- Action不能直接修改state数据，必须通过commit触发mutation才行\n\n```\n//定义Action\nconst store = new Vuex.store({\n  mutations: {\n    add(state, step) {\n      state.count += step;\n    },\n  },\n  actions: {\n    addAsync(context, step) {\n      // Action不能直接修改state数据，必须通过commit触发mutation才行\n      setTimeout(() => {\n        context.conmmit('add', step);\n      }, 1000);\n    },\n  },\n});\n\n// 触发Action: 第一种方式\nmethods: {\n  handle3() {\n    this.$store.dispatch('addAsync', 3);\n  },\n},\n\n// 触发Action:第二种方式\nimport { mapActions } from 'vuex';\nmethods: {\n  ...mapActions(['addAsync']),\n  handle4() {\n    this.addAsync(3);\n  },\n},\n```\n#### Getter\ngetter用于对store中的数据进行加工处理形成新的数据。\n- getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性\n- getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化\n\n```\n// 定义getter\nconst store = new Vuex.store({\n  state: {\n    count: 0,\n  },\n  getters: {\n    showNum: (state) => {\n      return state.count++;\n    },\n  },\n});\n\n// 第一种使用方式\nmethods: {\n  handle5() {\n    return this.$store.getter('showNum');\n  },\n},\n\n/ 第二种使用方式\nimport { mapGetters } from 'vuex';\ncomputed: {\n  ...mapGetters(['showNum']),\n},\n```\n\n\n\n\n\n\n\n","slug":"vuex","published":1,"updated":"2022-07-13T01:47:21.963Z","layout":"post","photos":[],"link":"","_id":"clqdf8htl002a44t12v4278hz","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>官方文档： <a href=\"https://vuex.vuejs.org/zh/\">https://vuex.vuejs.org/zh/</a></p>\n<h3 id=\"1-vuex概述\"><a href=\"#1-vuex概述\" class=\"headerlink\" title=\"1 vuex概述\"></a>1 vuex概述</h3><p>组件之间共享数据的方式</p>\n<ul>\n<li>父-&gt;子：v-bind</li>\n<li>子-&gt;父：v-on</li>\n<li>兄弟之间共享数据：EventBus<br>只适用于小范围共享。</li>\n</ul>\n<p>vuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。</p>\n<div align=\"center\">\n<img data-src=\"/posts/3116/vuex-1.png\" width=\"65%\">\n<!-- ![vuex](vuex-1.png) -->\n</div>\n\n<p>使用vuex好处：</p>\n<ul>\n<li>能够在vuex中集中管理共享的数据，易于开发和后期维护</li>\n<li>能够高效地实现组件之间的数据共享，提高开发效率</li>\n<li>存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步</li>\n</ul>\n<h3 id=\"2-vuex核心概念\"><a href=\"#2-vuex核心概念\" class=\"headerlink\" title=\"2 vuex核心概念\"></a>2 vuex核心概念</h3><h4 id=\"state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\"><a href=\"#state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\" class=\"headerlink\" title=\"state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\"></a>state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储</h4><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>两种访问state数据方式：<br>1.直接在需要用的地方使用”$store.state.***”<br>2. 先引入mapState,再使用<br>import { mapState } from vuex;<br>computed: {<br>  …mapState([‘count’]),<br>},</p>\n<h4 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h4><p>Mutation用于改变store中的数据,只能处理同步任务，不能执行异步操作</p>\n<ul>\n<li>只能通过Mutation变更store数据，不可以直接在组件中操作store数据</li>\n<li>这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义Mutation</span><br><span class=\"line\"><span class=\"keyword\">const</span> store  = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    add(<span class=\"keyword\">state</span>, step) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">state</span>.count += step;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//触发mutation: 第一种方式</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  handle1() &#123;</span><br><span class=\"line\">    this.<span class=\"variable\">$store</span>.commit(&#x27;add&#x27;, <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//触发mutation：第二种方式</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; mapMutations &#125; <span class=\"keyword\">from</span> vuex;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapMutations([&#x27;add&#x27;]),</span><br><span class=\"line\">  handle2() &#123;</span><br><span class=\"line\">    this.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>Action用于处理异步任务。<br>注意：</p>\n<ul>\n<li>如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。</li>\n<li>Action不能直接修改state数据，必须通过commit触发mutation才行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Action</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">state, step</span>)</span> &#123;</span><br><span class=\"line\">      state.count += step;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addAsync</span>(<span class=\"params\">context, step</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Action不能直接修改state数据，必须通过commit触发mutation才行</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.conmmit(<span class=\"string\">&#x27;add&#x27;</span>, step);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发Action: 第一种方式</span></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handle3</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发Action:第二种方式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">&#x27;addAsync&#x27;</span>]),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handle4</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.addAsync(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h4><p>getter用于对store中的数据进行加工处理形成新的数据。</p>\n<ul>\n<li>getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性</li>\n<li>getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义getter</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    showNum: (<span class=\"keyword\">state</span>) =&gt; &#123;</span><br><span class=\"line\">      return <span class=\"keyword\">state</span>.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一种使用方式</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  handle5() &#123;</span><br><span class=\"line\">    return this.<span class=\"variable\">$store</span>.getter(&#x27;showNum&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">/ 第二种使用方式</span><br><span class=\"line\">import &#123; mapGetters &#125; <span class=\"keyword\">from</span> &#x27;vuex&#x27;;</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([&#x27;showNum&#x27;]),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>官方文档： <a href=\"https://vuex.vuejs.org/zh/\">https://vuex.vuejs.org/zh/</a></p>\n<h3 id=\"1-vuex概述\"><a href=\"#1-vuex概述\" class=\"headerlink\" title=\"1 vuex概述\"></a>1 vuex概述</h3><p>组件之间共享数据的方式</p>\n<ul>\n<li>父-&gt;子：v-bind</li>\n<li>子-&gt;父：v-on</li>\n<li>兄弟之间共享数据：EventBus<br>只适用于小范围共享。</li>\n</ul>\n<p>vuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。</p>\n<div align=\"center\">\n<img src=\"/posts/3116/vuex-1.png\" width=\"65%\">\n<!-- ![vuex](vuex-1.png) -->\n</div>\n\n<p>使用vuex好处：</p>\n<ul>\n<li>能够在vuex中集中管理共享的数据，易于开发和后期维护</li>\n<li>能够高效地实现组件之间的数据共享，提高开发效率</li>\n<li>存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步</li>\n</ul>\n<h3 id=\"2-vuex核心概念\"><a href=\"#2-vuex核心概念\" class=\"headerlink\" title=\"2 vuex核心概念\"></a>2 vuex核心概念</h3><h4 id=\"state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\"><a href=\"#state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\" class=\"headerlink\" title=\"state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\"></a>state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储</h4><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>两种访问state数据方式：<br>1.直接在需要用的地方使用”$store.state.***”<br>2. 先引入mapState,再使用<br>import { mapState } from vuex;<br>computed: {<br>  …mapState([‘count’]),<br>},</p>\n<h4 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h4><p>Mutation用于改变store中的数据,只能处理同步任务，不能执行异步操作</p>\n<ul>\n<li>只能通过Mutation变更store数据，不可以直接在组件中操作store数据</li>\n<li>这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义Mutation</span><br><span class=\"line\"><span class=\"keyword\">const</span> store  = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    add(<span class=\"keyword\">state</span>, step) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">state</span>.count += step;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//触发mutation: 第一种方式</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  handle1() &#123;</span><br><span class=\"line\">    this.<span class=\"variable\">$store</span>.commit(&#x27;add&#x27;, <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//触发mutation：第二种方式</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; mapMutations &#125; <span class=\"keyword\">from</span> vuex;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapMutations([&#x27;add&#x27;]),</span><br><span class=\"line\">  handle2() &#123;</span><br><span class=\"line\">    this.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>Action用于处理异步任务。<br>注意：</p>\n<ul>\n<li>如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。</li>\n<li>Action不能直接修改state数据，必须通过commit触发mutation才行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Action</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">state, step</span>)</span> &#123;</span><br><span class=\"line\">      state.count += step;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addAsync</span>(<span class=\"params\">context, step</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Action不能直接修改state数据，必须通过commit触发mutation才行</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.conmmit(<span class=\"string\">&#x27;add&#x27;</span>, step);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发Action: 第一种方式</span></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handle3</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发Action:第二种方式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">&#x27;addAsync&#x27;</span>]),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handle4</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.addAsync(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h4><p>getter用于对store中的数据进行加工处理形成新的数据。</p>\n<ul>\n<li>getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性</li>\n<li>getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义getter</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    showNum: (<span class=\"keyword\">state</span>) =&gt; &#123;</span><br><span class=\"line\">      return <span class=\"keyword\">state</span>.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一种使用方式</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  handle5() &#123;</span><br><span class=\"line\">    return this.<span class=\"variable\">$store</span>.getter(&#x27;showNum&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">/ 第二种使用方式</span><br><span class=\"line\">import &#123; mapGetters &#125; <span class=\"keyword\">from</span> &#x27;vuex&#x27;;</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([&#x27;showNum&#x27;]),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/posts/3116/vuex-1.png","popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"vuex学习","path":"posts/3116/","eyeCatchImage":"/posts/3116/vuex-1.png","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-03-05T06:06:16.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-03-05T06:06:16.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vuex","tags":["Vuex"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2308},{"title":"浅谈前端安全","copyright":true,"comments":1,"abbrlink":28265,"date":"2022-03-28T05:48:46.000Z","_content":"\n1. 老生常谈的XSS\n2. 警惕iframe带来的风险\n3. 别被点击劫持了\n4. 错误的内容推断\n5. 防火防盗防猪队友：不安全的第三方依赖包\n6. 用了HTTPS也可能掉坑里\n7. 本地存储数据泄露\n8. 缺失静态资源完整性校验\n\n### XSS 跨站脚本攻击\n\n##### 是什么\nXSS是跨站脚本攻击（Cross-Site Scripting）的简称，攻击者可以利用XSS漏洞来窃取包括用户身份信息在内的各种敏感信息、修改Web页面以欺骗用户，甚至控制受害者浏览器，或者和其他漏洞结合起来形成蠕虫攻击，等等。\n\n##### 如何防御\n防御XSS最佳的做法就是对数据进行严格的输出编码，使得攻击者提供的数据不再被浏览器认为是脚本而被误执行。例如```<script>```在进行HTML编码后变成了```&lt;script&gt;```，而这段数据就会被浏览器认为只是一段普通的字符串，而不会被当做脚本执行了。\n\n\n\n\n","source":"_posts/前端安全.md","raw":"---\ntitle: 浅谈前端安全\ntags:\n  - 计算机网络\n  - 网络安全\ncategories: 计算机网络\ncopyright: true\ncomments: true\nabbrlink: 28265\ndate: 2022-03-28 13:48:46\n---\n\n1. 老生常谈的XSS\n2. 警惕iframe带来的风险\n3. 别被点击劫持了\n4. 错误的内容推断\n5. 防火防盗防猪队友：不安全的第三方依赖包\n6. 用了HTTPS也可能掉坑里\n7. 本地存储数据泄露\n8. 缺失静态资源完整性校验\n\n### XSS 跨站脚本攻击\n\n##### 是什么\nXSS是跨站脚本攻击（Cross-Site Scripting）的简称，攻击者可以利用XSS漏洞来窃取包括用户身份信息在内的各种敏感信息、修改Web页面以欺骗用户，甚至控制受害者浏览器，或者和其他漏洞结合起来形成蠕虫攻击，等等。\n\n##### 如何防御\n防御XSS最佳的做法就是对数据进行严格的输出编码，使得攻击者提供的数据不再被浏览器认为是脚本而被误执行。例如```<script>```在进行HTML编码后变成了```&lt;script&gt;```，而这段数据就会被浏览器认为只是一段普通的字符串，而不会被当做脚本执行了。\n\n\n\n\n","slug":"前端安全","published":1,"updated":"2022-07-13T01:47:21.977Z","layout":"post","photos":[],"link":"","_id":"clqdf8htq002f44t19dj730kv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><ol>\n<li>老生常谈的XSS</li>\n<li>警惕iframe带来的风险</li>\n<li>别被点击劫持了</li>\n<li>错误的内容推断</li>\n<li>防火防盗防猪队友：不安全的第三方依赖包</li>\n<li>用了HTTPS也可能掉坑里</li>\n<li>本地存储数据泄露</li>\n<li>缺失静态资源完整性校验</li>\n</ol>\n<h3 id=\"XSS-跨站脚本攻击\"><a href=\"#XSS-跨站脚本攻击\" class=\"headerlink\" title=\"XSS 跨站脚本攻击\"></a>XSS 跨站脚本攻击</h3><h5 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h5><p>XSS是跨站脚本攻击（Cross-Site Scripting）的简称，攻击者可以利用XSS漏洞来窃取包括用户身份信息在内的各种敏感信息、修改Web页面以欺骗用户，甚至控制受害者浏览器，或者和其他漏洞结合起来形成蠕虫攻击，等等。</p>\n<h5 id=\"如何防御\"><a href=\"#如何防御\" class=\"headerlink\" title=\"如何防御\"></a>如何防御</h5><p>防御XSS最佳的做法就是对数据进行严格的输出编码，使得攻击者提供的数据不再被浏览器认为是脚本而被误执行。例如<code>&lt;script&gt;</code>在进行HTML编码后变成了<code>&amp;lt;script&amp;gt;</code>，而这段数据就会被浏览器认为只是一段普通的字符串，而不会被当做脚本执行了。</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<ol>\n<li>老生常谈的XSS</li>\n<li>警惕iframe带来的风险</li>\n<li>别被点击劫持了</li>\n<li>错误的内容推断</li>\n<li>防火防盗防猪队友：不安全的第三方依赖包</li>\n<li>用了HTTPS也可能掉坑里</li>\n<li>本地存储数据泄露</li>\n<li>缺失静态资源完整性校验</li>\n</ol>\n<h3 id=\"XSS-跨站脚本攻击\"><a href=\"#XSS-跨站脚本攻击\" class=\"headerlink\" title=\"XSS 跨站脚本攻击\"></a>XSS 跨站脚本攻击</h3><h5 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h5><p>XSS是跨站脚本攻击（Cross-Site Scripting）的简称，攻击者可以利用XSS漏洞来窃取包括用户身份信息在内的各种敏感信息、修改Web页面以欺骗用户，甚至控制受害者浏览器，或者和其他漏洞结合起来形成蠕虫攻击，等等。</p>\n<h5 id=\"如何防御\"><a href=\"#如何防御\" class=\"headerlink\" title=\"如何防御\"></a>如何防御</h5><p>防御XSS最佳的做法就是对数据进行严格的输出编码，使得攻击者提供的数据不再被浏览器认为是脚本而被误执行。例如<code>&lt;script&gt;</code>在进行HTML编码后变成了<code>&amp;lt;script&amp;gt;</code>，而这段数据就会被浏览器认为只是一段普通的字符串，而不会被当做脚本执行了。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"浅谈前端安全","path":"posts/28265/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-03-28T05:48:46.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-03-28T05:48:46.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"计算机网络","tags":["计算机网络","网络安全"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":355},{"title":"tsconfig.json配置","copyright":true,"comments":1,"abbrlink":33825,"date":"2022-08-09T06:32:22.000Z","_content":"\n一些常见的tsconfig.json配置。TypeScript官方文档\n\n英文：https://www.typescriptlang.org/docs/\n\n中文：https://www.tslang.cn/docs/home.html\n\n先简单上一个tsconfig.json的配置：\n\n```js\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",  \n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"esnext\", \"dom\"],\n    \"skipLibCheck\": true, \n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\":[\n        \"src/*\"\n      ]\n    }\n\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.d.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"],\n  \"exclude\": [\"node_modules\"],\n  \"suppressImplicitAnyIndexErrors\":true, // \n}\n```\n 下面具体理解一下。\n \n \n ### compilerOptions下的配置：\n定义项目的运行时期望、JavaScript 的发出方式和位置以及与现有 JavaScript 代码的集成级别。\n 1. target\n \n    TypeScript文件编译后生成的javascript文件里的语法应该遵循哪个JavaScript的版本。可选项为：\"ES5\"， \"ES6\"/ \"ES2015\"， \"ES2016\"， \"ES2017\"或 \"ESNext\"\n \n 2. useDefineForClassFields：   https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\n 3. module\n \n    告诉编译器对发出的.js文件中的模块使用什么语法。可选择 none、commonjs、amd、system、umd、es2015或esnext告诉编译器以哪种语法编写代码，意味着必须从哪个代码将其编译为commonjs。如果用于服务器端项目 如果使用的是Angular前端应用程序，则使用Node.js，然后可能使用CJS 可能不是ESM 较新的JS版本有时包含用于模块导入/导出的更多功能。 将export设置为\"module\"可以支持这些功能，而这些功能通常尚未添加到官方规范中。例如dynamic import的\"ESNext\"表达式。无论如何，编译器的目的是将代码编译成浏览器可理解的语法（commonjs） module影响发出代码的模块语法，而target影响其余代码。\n4. moduleResolution\n\n   模块解析策略，ts默认用node的解析策略，即相对的方式导入, 可选值：node、classic\n如果未指定，则 --module commonjs 默认为 node，否则默认为 classic（包括 --module 设置为 amd、system、umd、es2015、esnext 等）Node 模块解析是 TypeScript 社区中最常用的，推荐用于大多数项目。 如果您在 TypeScript 中遇到导入和导出的解析问题，请尝试设置 moduleResolution: “node” 以查看它是否解决了问题。\n\n5. strict\n\n    开启所有严格的类型检查\n     * true => 同时开启 alwaysStrict, noImplicitAny, noImplicitThis 和 strictNullChecks\n     * alwaysStrict：严格模式，为每个文件添加 \"use strict\"\n     * noImplicitAny：不允许隐式 any，如果true，函数的形参必须带类型，如果叫不出class名的js对象，那就得any。比如(d:any)=>{}；如果false, 则允许隐式any,函数的样子更像js (d)=>{}\n     * noImplicitThis：不允许 this 为隐式 any\n     * strictNullChecks：undefined 和 null 两个空类型的设计，使用上不方便，所以 通过strictNullChecks严格校验类型，让代码更安全\n\n6. jsx\n\n    指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'\n     * preserve:生成代码中会保留JSX以供后续的转换操作使用(比如：Babel)。另外,输出文件会带有.jsx扩展名。 \n\t * react:会生成React.createElement,在使用前不需要再进行转换操作了,输出文件的扩展名为.js。 \n\t * react-native:相当于preserve,它也保留了所有的JSX,但是输出文件的扩展名是.js\n\n7. sourceMap\n\n    是否生成目标文件的sourceMap文件。此文件允许调试器和其他工具在实际使用发出的JavaScript文件时显示原始的TypeScript源代码。此文件为 .js.map (or .jsx.map) 格式，位于相应的.js 输出文件相同目录\n8. resolveJsonModule\n\n    防止 ts文件中引入json文件，会报如下红色波浪线。TypeScript 2.9的resolveJsonModule功能，只要我使用ts-node执行应用程序，该功能就可以正常工作。\n9. esModuleInterop\n\n    作用是支持使用import d from 'cjs'的方式引入commonjs包。\n10. lib\n\n    编译过程中需要引入的库文件的列表，告诉 typescript 编译器可以使用哪些功能。\n     * 比如说，我们这里有一个 dom 的库文件，这个文件会告诉编译器 dom api 的接口，所以当我们在 ts 代码中使用 dom 的时候，比如说执行 “document.getElementById (\"root\")” 这句话的时候，编译器就会知道该如何进行检查。\n     * 如果我们不设置这个选项，那么编译器也有自己默认的库文件列表，一般来说是 [\"dom\", \"es6\",\"DOM.Iterable\"] 等等。\n     \n11. skipLibCheck\n\n    解决打包报`vue-tsc --noEmit && vite build`的错,忽略所有的声明文件(*.d.ts)的类型检查\n    \n12. path\n\n    用于拓宽引入非相对模块时的查找路径的。其默认值就是\"./\"，目的是解决项目代码层级较深相互之间引用起来会比较麻烦的问题，各种 …/,…/…/,…/…/…/ 等等。\n    \n### include\n\n   用于指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符， 比如\"./src\"即表示要编译src文件夹下的所有文件以及子文件夹的文件。\n   \n### exclude\n   ts 排除的文件\n### 将suppressImplicitAnyIndexErrors \n   将suppressImplicitAnyIndexErrors 设为true 将禁止在对对象进行索引时报告有关隐式anys 的错误。\n  \n","source":"_posts/tsconfig-json配置.md","raw":"---\ntitle: tsconfig.json配置\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 33825\ndate: 2022-08-09 14:32:22\n---\n\n一些常见的tsconfig.json配置。TypeScript官方文档\n\n英文：https://www.typescriptlang.org/docs/\n\n中文：https://www.tslang.cn/docs/home.html\n\n先简单上一个tsconfig.json的配置：\n\n```js\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",  \n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"esnext\", \"dom\"],\n    \"skipLibCheck\": true, \n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\":[\n        \"src/*\"\n      ]\n    }\n\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.d.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"],\n  \"exclude\": [\"node_modules\"],\n  \"suppressImplicitAnyIndexErrors\":true, // \n}\n```\n 下面具体理解一下。\n \n \n ### compilerOptions下的配置：\n定义项目的运行时期望、JavaScript 的发出方式和位置以及与现有 JavaScript 代码的集成级别。\n 1. target\n \n    TypeScript文件编译后生成的javascript文件里的语法应该遵循哪个JavaScript的版本。可选项为：\"ES5\"， \"ES6\"/ \"ES2015\"， \"ES2016\"， \"ES2017\"或 \"ESNext\"\n \n 2. useDefineForClassFields：   https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\n 3. module\n \n    告诉编译器对发出的.js文件中的模块使用什么语法。可选择 none、commonjs、amd、system、umd、es2015或esnext告诉编译器以哪种语法编写代码，意味着必须从哪个代码将其编译为commonjs。如果用于服务器端项目 如果使用的是Angular前端应用程序，则使用Node.js，然后可能使用CJS 可能不是ESM 较新的JS版本有时包含用于模块导入/导出的更多功能。 将export设置为\"module\"可以支持这些功能，而这些功能通常尚未添加到官方规范中。例如dynamic import的\"ESNext\"表达式。无论如何，编译器的目的是将代码编译成浏览器可理解的语法（commonjs） module影响发出代码的模块语法，而target影响其余代码。\n4. moduleResolution\n\n   模块解析策略，ts默认用node的解析策略，即相对的方式导入, 可选值：node、classic\n如果未指定，则 --module commonjs 默认为 node，否则默认为 classic（包括 --module 设置为 amd、system、umd、es2015、esnext 等）Node 模块解析是 TypeScript 社区中最常用的，推荐用于大多数项目。 如果您在 TypeScript 中遇到导入和导出的解析问题，请尝试设置 moduleResolution: “node” 以查看它是否解决了问题。\n\n5. strict\n\n    开启所有严格的类型检查\n     * true => 同时开启 alwaysStrict, noImplicitAny, noImplicitThis 和 strictNullChecks\n     * alwaysStrict：严格模式，为每个文件添加 \"use strict\"\n     * noImplicitAny：不允许隐式 any，如果true，函数的形参必须带类型，如果叫不出class名的js对象，那就得any。比如(d:any)=>{}；如果false, 则允许隐式any,函数的样子更像js (d)=>{}\n     * noImplicitThis：不允许 this 为隐式 any\n     * strictNullChecks：undefined 和 null 两个空类型的设计，使用上不方便，所以 通过strictNullChecks严格校验类型，让代码更安全\n\n6. jsx\n\n    指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'\n     * preserve:生成代码中会保留JSX以供后续的转换操作使用(比如：Babel)。另外,输出文件会带有.jsx扩展名。 \n\t * react:会生成React.createElement,在使用前不需要再进行转换操作了,输出文件的扩展名为.js。 \n\t * react-native:相当于preserve,它也保留了所有的JSX,但是输出文件的扩展名是.js\n\n7. sourceMap\n\n    是否生成目标文件的sourceMap文件。此文件允许调试器和其他工具在实际使用发出的JavaScript文件时显示原始的TypeScript源代码。此文件为 .js.map (or .jsx.map) 格式，位于相应的.js 输出文件相同目录\n8. resolveJsonModule\n\n    防止 ts文件中引入json文件，会报如下红色波浪线。TypeScript 2.9的resolveJsonModule功能，只要我使用ts-node执行应用程序，该功能就可以正常工作。\n9. esModuleInterop\n\n    作用是支持使用import d from 'cjs'的方式引入commonjs包。\n10. lib\n\n    编译过程中需要引入的库文件的列表，告诉 typescript 编译器可以使用哪些功能。\n     * 比如说，我们这里有一个 dom 的库文件，这个文件会告诉编译器 dom api 的接口，所以当我们在 ts 代码中使用 dom 的时候，比如说执行 “document.getElementById (\"root\")” 这句话的时候，编译器就会知道该如何进行检查。\n     * 如果我们不设置这个选项，那么编译器也有自己默认的库文件列表，一般来说是 [\"dom\", \"es6\",\"DOM.Iterable\"] 等等。\n     \n11. skipLibCheck\n\n    解决打包报`vue-tsc --noEmit && vite build`的错,忽略所有的声明文件(*.d.ts)的类型检查\n    \n12. path\n\n    用于拓宽引入非相对模块时的查找路径的。其默认值就是\"./\"，目的是解决项目代码层级较深相互之间引用起来会比较麻烦的问题，各种 …/,…/…/,…/…/…/ 等等。\n    \n### include\n\n   用于指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符， 比如\"./src\"即表示要编译src文件夹下的所有文件以及子文件夹的文件。\n   \n### exclude\n   ts 排除的文件\n### 将suppressImplicitAnyIndexErrors \n   将suppressImplicitAnyIndexErrors 设为true 将禁止在对对象进行索引时报告有关隐式anys 的错误。\n  \n","slug":"tsconfig-json配置","published":1,"updated":"2023-12-20T06:57:18.975Z","_id":"clqdf8htr002g44t15esl8glb","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>一些常见的tsconfig.json配置。TypeScript官方文档</p>\n<p>英文：<a href=\"https://www.typescriptlang.org/docs/\">https://www.typescriptlang.org/docs/</a></p>\n<p>中文：<a href=\"https://www.tslang.cn/docs/home.html\">https://www.tslang.cn/docs/home.html</a></p>\n<p>先简单上一个tsconfig.json的配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;useDefineForClassFields&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,  </span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jsx&quot;</span>: <span class=\"string\">&quot;preserve&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;resolveJsonModule&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;esModuleInterop&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lib&quot;</span>: [<span class=\"string\">&quot;esnext&quot;</span>, <span class=\"string\">&quot;dom&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;skipLibCheck&quot;</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;baseUrl&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;paths&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;@/*&quot;</span>:[</span><br><span class=\"line\">        <span class=\"string\">&quot;src/*&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src/**/*.ts&quot;</span>, <span class=\"string\">&quot;src/**/*.d.ts&quot;</span>, <span class=\"string\">&quot;src/**/*.tsx&quot;</span>, <span class=\"string\">&quot;src/**/*.vue&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class=\"literal\">true</span>, <span class=\"comment\">// </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 下面具体理解一下。</p>\n<h3 id=\"compilerOptions下的配置：\"><a href=\"#compilerOptions下的配置：\" class=\"headerlink\" title=\"compilerOptions下的配置：\"></a>compilerOptions下的配置：</h3><p>定义项目的运行时期望、JavaScript 的发出方式和位置以及与现有 JavaScript 代码的集成级别。</p>\n<ol>\n<li><p>target</p>\n<p>TypeScript文件编译后生成的javascript文件里的语法应该遵循哪个JavaScript的版本。可选项为：”ES5”， “ES6”/ “ES2015”， “ES2016”， “ES2017”或 “ESNext”</p>\n</li>\n<li><p>useDefineForClassFields：   <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier</a></p>\n</li>\n<li><p>module</p>\n<p>告诉编译器对发出的.js文件中的模块使用什么语法。可选择 none、commonjs、amd、system、umd、es2015或esnext告诉编译器以哪种语法编写代码，意味着必须从哪个代码将其编译为commonjs。如果用于服务器端项目 如果使用的是Angular前端应用程序，则使用Node.js，然后可能使用CJS 可能不是ESM 较新的JS版本有时包含用于模块导入/导出的更多功能。 将export设置为”module”可以支持这些功能，而这些功能通常尚未添加到官方规范中。例如dynamic import的”ESNext”表达式。无论如何，编译器的目的是将代码编译成浏览器可理解的语法（commonjs） module影响发出代码的模块语法，而target影响其余代码。</p>\n</li>\n<li><p>moduleResolution</p>\n<p>模块解析策略，ts默认用node的解析策略，即相对的方式导入, 可选值：node、classic<br>如果未指定，则 –module commonjs 默认为 node，否则默认为 classic（包括 –module 设置为 amd、system、umd、es2015、esnext 等）Node 模块解析是 TypeScript 社区中最常用的，推荐用于大多数项目。 如果您在 TypeScript 中遇到导入和导出的解析问题，请尝试设置 moduleResolution: “node” 以查看它是否解决了问题。</p>\n</li>\n<li><p>strict</p>\n<p> 开启所有严格的类型检查</p>\n<ul>\n<li>true =&gt; 同时开启 alwaysStrict, noImplicitAny, noImplicitThis 和 strictNullChecks</li>\n<li>alwaysStrict：严格模式，为每个文件添加 “use strict”</li>\n<li>noImplicitAny：不允许隐式 any，如果true，函数的形参必须带类型，如果叫不出class名的js对象，那就得any。比如(d:any)=&gt;{}；如果false, 则允许隐式any,函数的样子更像js (d)=&gt;{}</li>\n<li>noImplicitThis：不允许 this 为隐式 any</li>\n<li>strictNullChecks：undefined 和 null 两个空类型的设计，使用上不方便，所以 通过strictNullChecks严格校验类型，让代码更安全</li>\n</ul>\n</li>\n<li><p>jsx</p>\n<p> 指定jsx代码用于的开发环境: ‘preserve’, ‘react-native’, or ‘react’</p>\n<ul>\n<li>preserve:生成代码中会保留JSX以供后续的转换操作使用(比如：Babel)。另外,输出文件会带有.jsx扩展名。 </li>\n<li>react:会生成React.createElement,在使用前不需要再进行转换操作了,输出文件的扩展名为.js。 </li>\n<li>react-native:相当于preserve,它也保留了所有的JSX,但是输出文件的扩展名是.js</li>\n</ul>\n</li>\n<li><p>sourceMap</p>\n<p> 是否生成目标文件的sourceMap文件。此文件允许调试器和其他工具在实际使用发出的JavaScript文件时显示原始的TypeScript源代码。此文件为 .js.map (or .jsx.map) 格式，位于相应的.js 输出文件相同目录</p>\n</li>\n<li><p>resolveJsonModule</p>\n<p> 防止 ts文件中引入json文件，会报如下红色波浪线。TypeScript 2.9的resolveJsonModule功能，只要我使用ts-node执行应用程序，该功能就可以正常工作。</p>\n</li>\n<li><p>esModuleInterop</p>\n<p> 作用是支持使用import d from ‘cjs’的方式引入commonjs包。</p>\n</li>\n<li><p>lib</p>\n<p>编译过程中需要引入的库文件的列表，告诉 typescript 编译器可以使用哪些功能。</p>\n<ul>\n<li>比如说，我们这里有一个 dom 的库文件，这个文件会告诉编译器 dom api 的接口，所以当我们在 ts 代码中使用 dom 的时候，比如说执行 “document.getElementById (“root”)” 这句话的时候，编译器就会知道该如何进行检查。</li>\n<li>如果我们不设置这个选项，那么编译器也有自己默认的库文件列表，一般来说是 [“dom”, “es6”,”DOM.Iterable”] 等等。</li>\n</ul>\n</li>\n<li><p>skipLibCheck</p>\n<p>解决打包报<code>vue-tsc --noEmit &amp;&amp; vite build</code>的错,忽略所有的声明文件(*.d.ts)的类型检查</p>\n</li>\n<li><p>path</p>\n<p>用于拓宽引入非相对模块时的查找路径的。其默认值就是”./“，目的是解决项目代码层级较深相互之间引用起来会比较麻烦的问题，各种 …/,…/…/,…/…/…/ 等等。</p>\n<h3 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h3><p>用于指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符， 比如”./src”即表示要编译src文件夹下的所有文件以及子文件夹的文件。</p>\n<h3 id=\"exclude\"><a href=\"#exclude\" class=\"headerlink\" title=\"exclude\"></a>exclude</h3><p>ts 排除的文件</p>\n<h3 id=\"将suppressImplicitAnyIndexErrors\"><a href=\"#将suppressImplicitAnyIndexErrors\" class=\"headerlink\" title=\"将suppressImplicitAnyIndexErrors\"></a>将suppressImplicitAnyIndexErrors</h3><p>将suppressImplicitAnyIndexErrors 设为true 将禁止在对对象进行索引时报告有关隐式anys 的错误。</p>\n</li>\n</ol>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>一些常见的tsconfig.json配置。TypeScript官方文档</p>\n<p>英文：<a href=\"https://www.typescriptlang.org/docs/\">https://www.typescriptlang.org/docs/</a></p>\n<p>中文：<a href=\"https://www.tslang.cn/docs/home.html\">https://www.tslang.cn/docs/home.html</a></p>\n<p>先简单上一个tsconfig.json的配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;useDefineForClassFields&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,  </span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jsx&quot;</span>: <span class=\"string\">&quot;preserve&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;resolveJsonModule&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;esModuleInterop&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lib&quot;</span>: [<span class=\"string\">&quot;esnext&quot;</span>, <span class=\"string\">&quot;dom&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;skipLibCheck&quot;</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">    <span class=\"string\">&quot;baseUrl&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;paths&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;@/*&quot;</span>:[</span><br><span class=\"line\">        <span class=\"string\">&quot;src/*&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [<span class=\"string\">&quot;src/**/*.ts&quot;</span>, <span class=\"string\">&quot;src/**/*.d.ts&quot;</span>, <span class=\"string\">&quot;src/**/*.tsx&quot;</span>, <span class=\"string\">&quot;src/**/*.vue&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class=\"literal\">true</span>, <span class=\"comment\">// </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 下面具体理解一下。</p>\n<h3 id=\"compilerOptions下的配置：\"><a href=\"#compilerOptions下的配置：\" class=\"headerlink\" title=\"compilerOptions下的配置：\"></a>compilerOptions下的配置：</h3><p>定义项目的运行时期望、JavaScript 的发出方式和位置以及与现有 JavaScript 代码的集成级别。</p>\n<ol>\n<li><p>target</p>\n<p>TypeScript文件编译后生成的javascript文件里的语法应该遵循哪个JavaScript的版本。可选项为：”ES5”， “ES6”/ “ES2015”， “ES2016”， “ES2017”或 “ESNext”</p>\n</li>\n<li><p>useDefineForClassFields：   <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier</a></p>\n</li>\n<li><p>module</p>\n<p>告诉编译器对发出的.js文件中的模块使用什么语法。可选择 none、commonjs、amd、system、umd、es2015或esnext告诉编译器以哪种语法编写代码，意味着必须从哪个代码将其编译为commonjs。如果用于服务器端项目 如果使用的是Angular前端应用程序，则使用Node.js，然后可能使用CJS 可能不是ESM 较新的JS版本有时包含用于模块导入/导出的更多功能。 将export设置为”module”可以支持这些功能，而这些功能通常尚未添加到官方规范中。例如dynamic import的”ESNext”表达式。无论如何，编译器的目的是将代码编译成浏览器可理解的语法（commonjs） module影响发出代码的模块语法，而target影响其余代码。</p>\n</li>\n<li><p>moduleResolution</p>\n<p>模块解析策略，ts默认用node的解析策略，即相对的方式导入, 可选值：node、classic<br>如果未指定，则 –module commonjs 默认为 node，否则默认为 classic（包括 –module 设置为 amd、system、umd、es2015、esnext 等）Node 模块解析是 TypeScript 社区中最常用的，推荐用于大多数项目。 如果您在 TypeScript 中遇到导入和导出的解析问题，请尝试设置 moduleResolution: “node” 以查看它是否解决了问题。</p>\n</li>\n<li><p>strict</p>\n<p> 开启所有严格的类型检查</p>\n<ul>\n<li>true =&gt; 同时开启 alwaysStrict, noImplicitAny, noImplicitThis 和 strictNullChecks</li>\n<li>alwaysStrict：严格模式，为每个文件添加 “use strict”</li>\n<li>noImplicitAny：不允许隐式 any，如果true，函数的形参必须带类型，如果叫不出class名的js对象，那就得any。比如(d:any)=&gt;{}；如果false, 则允许隐式any,函数的样子更像js (d)=&gt;{}</li>\n<li>noImplicitThis：不允许 this 为隐式 any</li>\n<li>strictNullChecks：undefined 和 null 两个空类型的设计，使用上不方便，所以 通过strictNullChecks严格校验类型，让代码更安全</li>\n</ul>\n</li>\n<li><p>jsx</p>\n<p> 指定jsx代码用于的开发环境: ‘preserve’, ‘react-native’, or ‘react’</p>\n<ul>\n<li>preserve:生成代码中会保留JSX以供后续的转换操作使用(比如：Babel)。另外,输出文件会带有.jsx扩展名。 </li>\n<li>react:会生成React.createElement,在使用前不需要再进行转换操作了,输出文件的扩展名为.js。 </li>\n<li>react-native:相当于preserve,它也保留了所有的JSX,但是输出文件的扩展名是.js</li>\n</ul>\n</li>\n<li><p>sourceMap</p>\n<p> 是否生成目标文件的sourceMap文件。此文件允许调试器和其他工具在实际使用发出的JavaScript文件时显示原始的TypeScript源代码。此文件为 .js.map (or .jsx.map) 格式，位于相应的.js 输出文件相同目录</p>\n</li>\n<li><p>resolveJsonModule</p>\n<p> 防止 ts文件中引入json文件，会报如下红色波浪线。TypeScript 2.9的resolveJsonModule功能，只要我使用ts-node执行应用程序，该功能就可以正常工作。</p>\n</li>\n<li><p>esModuleInterop</p>\n<p> 作用是支持使用import d from ‘cjs’的方式引入commonjs包。</p>\n</li>\n<li><p>lib</p>\n<p>编译过程中需要引入的库文件的列表，告诉 typescript 编译器可以使用哪些功能。</p>\n<ul>\n<li>比如说，我们这里有一个 dom 的库文件，这个文件会告诉编译器 dom api 的接口，所以当我们在 ts 代码中使用 dom 的时候，比如说执行 “document.getElementById (“root”)” 这句话的时候，编译器就会知道该如何进行检查。</li>\n<li>如果我们不设置这个选项，那么编译器也有自己默认的库文件列表，一般来说是 [“dom”, “es6”,”DOM.Iterable”] 等等。</li>\n</ul>\n</li>\n<li><p>skipLibCheck</p>\n<p>解决打包报<code>vue-tsc --noEmit &amp;&amp; vite build</code>的错,忽略所有的声明文件(*.d.ts)的类型检查</p>\n</li>\n<li><p>path</p>\n<p>用于拓宽引入非相对模块时的查找路径的。其默认值就是”./“，目的是解决项目代码层级较深相互之间引用起来会比较麻烦的问题，各种 …/,…/…/,…/…/…/ 等等。</p>\n<h3 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h3><p>用于指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符， 比如”./src”即表示要编译src文件夹下的所有文件以及子文件夹的文件。</p>\n<h3 id=\"exclude\"><a href=\"#exclude\" class=\"headerlink\" title=\"exclude\"></a>exclude</h3><p>ts 排除的文件</p>\n<h3 id=\"将suppressImplicitAnyIndexErrors\"><a href=\"#将suppressImplicitAnyIndexErrors\" class=\"headerlink\" title=\"将suppressImplicitAnyIndexErrors\"></a>将suppressImplicitAnyIndexErrors</h3><p>将suppressImplicitAnyIndexErrors 设为true 将禁止在对对象进行索引时报告有关隐式anys 的错误。</p>\n</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"tsconfig.json配置","path":"posts/33825/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-09T06:32:22.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-09T06:32:22.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3370},{"title":"加解密算法","copyright":true,"comments":1,"abbrlink":52606,"date":"2021-10-23T03:48:09.000Z","_content":"\n小程序中经常会使用加解密提高安全性，此文采用对称加密，使用CryptoJS库，ECB模式\n\n```javascript\n\nimport { CryptoJS } from './CryptoJS'\n\n/**\n * 加密算法\n * @param params 要加密的明文\n * @param cryptoKey 秘钥\n * @returns string\n */\nexport const encrypt = (params, cryptoKey) => {\n    const key = CryptoJS.enc.Utf8.parse(cryptoKey)\n    // 设置固定 iv 和 key 保证同样输入同样输出，可取消保证生成唯一性\n    const result = CryptoJS.TripleDES.encrypt(JSON.stringify(params), key, {\n        mode: CryptoJS.mode.ECB, // 模式\n        padding: CryptoJS.pad.Pkcs7, // 填充方式\n    })\n    return result.toString()\n}\n\n/**\n * 解密算法\n * @param result 要解密的密文\n * @param cryptoKey 秘钥\n * @returns Object\n */\nexport const decrypt = (result, cryptoKey) => {\n    const key = CryptoJS.enc.Utf8.parse(cryptoKey)\n    const decrypted = CryptoJS.TripleDES.decrypt(result, key, {\n        mode: CryptoJS.mode.ECB, // 模式\n        padding: CryptoJS.pad.Pkcs7, // 填充方式\n    }).toString(CryptoJS.enc.Utf8)\n\n    try {\n        return JSON.parse(decrypted)\n    } catch (e) {\n        return decrypted\n    }\n}\n\n```","source":"_posts/加解密算法.md","raw":"---\ntitle: 加解密算法\ntags: 安全\ncategories: 安全\ncopyright: true\ncomments: true\nabbrlink: 52606\ndate: 2021-10-23 11:48:09\n---\n\n小程序中经常会使用加解密提高安全性，此文采用对称加密，使用CryptoJS库，ECB模式\n\n```javascript\n\nimport { CryptoJS } from './CryptoJS'\n\n/**\n * 加密算法\n * @param params 要加密的明文\n * @param cryptoKey 秘钥\n * @returns string\n */\nexport const encrypt = (params, cryptoKey) => {\n    const key = CryptoJS.enc.Utf8.parse(cryptoKey)\n    // 设置固定 iv 和 key 保证同样输入同样输出，可取消保证生成唯一性\n    const result = CryptoJS.TripleDES.encrypt(JSON.stringify(params), key, {\n        mode: CryptoJS.mode.ECB, // 模式\n        padding: CryptoJS.pad.Pkcs7, // 填充方式\n    })\n    return result.toString()\n}\n\n/**\n * 解密算法\n * @param result 要解密的密文\n * @param cryptoKey 秘钥\n * @returns Object\n */\nexport const decrypt = (result, cryptoKey) => {\n    const key = CryptoJS.enc.Utf8.parse(cryptoKey)\n    const decrypted = CryptoJS.TripleDES.decrypt(result, key, {\n        mode: CryptoJS.mode.ECB, // 模式\n        padding: CryptoJS.pad.Pkcs7, // 填充方式\n    }).toString(CryptoJS.enc.Utf8)\n\n    try {\n        return JSON.parse(decrypted)\n    } catch (e) {\n        return decrypted\n    }\n}\n\n```","slug":"加解密算法","published":1,"updated":"2022-07-13T01:47:21.982Z","layout":"post","photos":[],"link":"","_id":"clqdf8hts002k44t17g7abl9v","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>小程序中经常会使用加解密提高安全性，此文采用对称加密，使用CryptoJS库，ECB模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CryptoJS &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./CryptoJS&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 加密算法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>params 要加密的明文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>cryptoKey 秘钥</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns <span class=\"variable\">string</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> encrypt = <span class=\"function\">(<span class=\"params\">params, cryptoKey</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = CryptoJS.enc.Utf8.parse(cryptoKey)</span><br><span class=\"line\">    <span class=\"comment\">// 设置固定 iv 和 key 保证同样输入同样输出，可取消保证生成唯一性</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = CryptoJS.TripleDES.encrypt(<span class=\"built_in\">JSON</span>.stringify(params), key, &#123;</span><br><span class=\"line\">        mode: CryptoJS.mode.ECB, <span class=\"comment\">// 模式</span></span><br><span class=\"line\">        padding: CryptoJS.pad.Pkcs7, <span class=\"comment\">// 填充方式</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.toString()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解密算法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>result 要解密的密文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>cryptoKey 秘钥</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns <span class=\"variable\">Object</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> decrypt = <span class=\"function\">(<span class=\"params\">result, cryptoKey</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = CryptoJS.enc.Utf8.parse(cryptoKey)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decrypted = CryptoJS.TripleDES.decrypt(result, key, &#123;</span><br><span class=\"line\">        mode: CryptoJS.mode.ECB, <span class=\"comment\">// 模式</span></span><br><span class=\"line\">        padding: CryptoJS.pad.Pkcs7, <span class=\"comment\">// 填充方式</span></span><br><span class=\"line\">    &#125;).toString(CryptoJS.enc.Utf8)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(decrypted)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> decrypted</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>小程序中经常会使用加解密提高安全性，此文采用对称加密，使用CryptoJS库，ECB模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CryptoJS &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./CryptoJS&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 加密算法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>params 要加密的明文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>cryptoKey 秘钥</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns <span class=\"variable\">string</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> encrypt = <span class=\"function\">(<span class=\"params\">params, cryptoKey</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = CryptoJS.enc.Utf8.parse(cryptoKey)</span><br><span class=\"line\">    <span class=\"comment\">// 设置固定 iv 和 key 保证同样输入同样输出，可取消保证生成唯一性</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = CryptoJS.TripleDES.encrypt(<span class=\"built_in\">JSON</span>.stringify(params), key, &#123;</span><br><span class=\"line\">        mode: CryptoJS.mode.ECB, <span class=\"comment\">// 模式</span></span><br><span class=\"line\">        padding: CryptoJS.pad.Pkcs7, <span class=\"comment\">// 填充方式</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.toString()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解密算法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>result 要解密的密文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>cryptoKey 秘钥</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns <span class=\"variable\">Object</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> decrypt = <span class=\"function\">(<span class=\"params\">result, cryptoKey</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = CryptoJS.enc.Utf8.parse(cryptoKey)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decrypted = CryptoJS.TripleDES.decrypt(result, key, &#123;</span><br><span class=\"line\">        mode: CryptoJS.mode.ECB, <span class=\"comment\">// 模式</span></span><br><span class=\"line\">        padding: CryptoJS.pad.Pkcs7, <span class=\"comment\">// 填充方式</span></span><br><span class=\"line\">    &#125;).toString(CryptoJS.enc.Utf8)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(decrypted)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> decrypted</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"加解密算法","path":"posts/52606/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-10-23T03:48:09.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-10-23T03:48:09.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"安全","tags":["安全"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":909},{"title":"小程序开发问题记录","copyright":true,"comments":1,"abbrlink":58156,"date":"2022-06-14T09:21:42.000Z","_content":"\n1. 微信小程序原生textarea的placeholder-style对rgba识别bug：(0,10-15,27,0.15)识别不出来，会设置不上颜色\n    \n2. 滚动穿透：popup中滚动会穿透到底层\n3. 微信原生picker mode=date start，end设置后，依然会展示不在设置范围内的，只是不能选择\n4.  setTimeout、setInterval实现的定时器在鸿蒙系统出现掉帧现象，目前已解决，参考[高刷屏对requestAnimationFrame和setTimeout的影响](https://blog.csdn.net/liuhp123/article/details/122361919?spm=1001.2014.3001.5501)\n5. 兼容性：ios和安卓底部黑条问题兼容\n ```javascript\n // **兼容iphone 下方小黑条\n  @supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) {\n      padding-bottom: calc(constant(safe-area-inset-bottom)); /* 兼容 iOS < 11.2 */\n      padding-bottom: calc(env(safe-area-inset-bottom)); /* 兼容 iOS >= 11.2 */\n  }\n```\n\n6. 在scroll-view列表中，ios底部会出现大量留白。\n解决方案： 将scroll-view中的enhanced属性置为false。\n\n7. 在【返回上一页】和【toast提示】这两个动作考虑好先后的时机，不然可能会toast提示不出来。\n最好在B页面，等待toast提示完再返回A页面，不要同时提示toast和返回上一页，会造成toast被返回上一页动作覆盖掉。","source":"_posts/小程序开发问题记录.md","raw":"---\ntitle: 小程序开发问题记录\ntags: 小程序\ncategories: 小程序\ncopyright: true\ncomments: true\nabbrlink: 58156\ndate: 2022-06-14 17:21:42\n---\n\n1. 微信小程序原生textarea的placeholder-style对rgba识别bug：(0,10-15,27,0.15)识别不出来，会设置不上颜色\n    \n2. 滚动穿透：popup中滚动会穿透到底层\n3. 微信原生picker mode=date start，end设置后，依然会展示不在设置范围内的，只是不能选择\n4.  setTimeout、setInterval实现的定时器在鸿蒙系统出现掉帧现象，目前已解决，参考[高刷屏对requestAnimationFrame和setTimeout的影响](https://blog.csdn.net/liuhp123/article/details/122361919?spm=1001.2014.3001.5501)\n5. 兼容性：ios和安卓底部黑条问题兼容\n ```javascript\n // **兼容iphone 下方小黑条\n  @supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) {\n      padding-bottom: calc(constant(safe-area-inset-bottom)); /* 兼容 iOS < 11.2 */\n      padding-bottom: calc(env(safe-area-inset-bottom)); /* 兼容 iOS >= 11.2 */\n  }\n```\n\n6. 在scroll-view列表中，ios底部会出现大量留白。\n解决方案： 将scroll-view中的enhanced属性置为false。\n\n7. 在【返回上一页】和【toast提示】这两个动作考虑好先后的时机，不然可能会toast提示不出来。\n最好在B页面，等待toast提示完再返回A页面，不要同时提示toast和返回上一页，会造成toast被返回上一页动作覆盖掉。","slug":"小程序开发问题记录","published":1,"updated":"2023-12-20T06:57:18.981Z","_id":"clqdf8htt002n44t11q902cw5","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><ol>\n<li><p>微信小程序原生textarea的placeholder-style对rgba识别bug：(0,10-15,27,0.15)识别不出来，会设置不上颜色</p>\n</li>\n<li><p>滚动穿透：popup中滚动会穿透到底层</p>\n</li>\n<li><p>微信原生picker mode=date start，end设置后，依然会展示不在设置范围内的，只是不能选择</p>\n</li>\n<li><p> setTimeout、setInterval实现的定时器在鸿蒙系统出现掉帧现象，目前已解决，参考<a href=\"https://blog.csdn.net/liuhp123/article/details/122361919?spm=1001.2014.3001.5501\">高刷屏对requestAnimationFrame和setTimeout的影响</a></p>\n</li>\n<li><p>兼容性：ios和安卓底部黑条问题兼容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// **兼容iphone 下方小黑条</span></span><br><span class=\"line\"> @supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) &#123;</span><br><span class=\"line\">     padding-bottom: calc(constant(safe-area-inset-bottom)); <span class=\"comment\">/* 兼容 iOS &lt; 11.2 */</span></span><br><span class=\"line\">     padding-bottom: calc(env(safe-area-inset-bottom)); <span class=\"comment\">/* 兼容 iOS &gt;= 11.2 */</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在scroll-view列表中，ios底部会出现大量留白。<br>解决方案： 将scroll-view中的enhanced属性置为false。</p>\n</li>\n<li><p>在【返回上一页】和【toast提示】这两个动作考虑好先后的时机，不然可能会toast提示不出来。<br>最好在B页面，等待toast提示完再返回A页面，不要同时提示toast和返回上一页，会造成toast被返回上一页动作覆盖掉。</p>\n</li>\n</ol>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<ol>\n<li><p>微信小程序原生textarea的placeholder-style对rgba识别bug：(0,10-15,27,0.15)识别不出来，会设置不上颜色</p>\n</li>\n<li><p>滚动穿透：popup中滚动会穿透到底层</p>\n</li>\n<li><p>微信原生picker mode=date start，end设置后，依然会展示不在设置范围内的，只是不能选择</p>\n</li>\n<li><p> setTimeout、setInterval实现的定时器在鸿蒙系统出现掉帧现象，目前已解决，参考<a href=\"https://blog.csdn.net/liuhp123/article/details/122361919?spm=1001.2014.3001.5501\">高刷屏对requestAnimationFrame和setTimeout的影响</a></p>\n</li>\n<li><p>兼容性：ios和安卓底部黑条问题兼容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// **兼容iphone 下方小黑条</span></span><br><span class=\"line\"> @supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) &#123;</span><br><span class=\"line\">     padding-bottom: calc(constant(safe-area-inset-bottom)); <span class=\"comment\">/* 兼容 iOS &lt; 11.2 */</span></span><br><span class=\"line\">     padding-bottom: calc(env(safe-area-inset-bottom)); <span class=\"comment\">/* 兼容 iOS &gt;= 11.2 */</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在scroll-view列表中，ios底部会出现大量留白。<br>解决方案： 将scroll-view中的enhanced属性置为false。</p>\n</li>\n<li><p>在【返回上一页】和【toast提示】这两个动作考虑好先后的时机，不然可能会toast提示不出来。<br>最好在B页面，等待toast提示完再返回A页面，不要同时提示toast和返回上一页，会造成toast被返回上一页动作覆盖掉。</p>\n</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"小程序开发问题记录","path":"posts/58156/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-06-14T09:21:42.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-06-14T09:21:42.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"小程序","tags":["小程序"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":686},{"title":"Vue3项目中使用TypeScript一些报错问题","copyright":true,"comments":1,"abbrlink":28547,"date":"2022-08-23T01:20:12.000Z","_content":"\nVue3项目中，使用TypeScript遇到的问题及解决方案。\n\n1. Vue3的template中使用v-for，提示错误：对象的类型为 \"unknown\"。ts(2571)\n\n解决方案：\n给循环中item定义类型；\n\n```js\n<template>\n  <el-form :model=\"state.form\" ref=\"form\"  :label-width=\"labelWidth\"\n    @submit.native.prevent\n  >\n    <el-row :gutter=\"20\">\n      <el-col v-bind=\"item.layout||layout\" v-for=\"(item, index) in elements\" :key=\"index\">\n        <el-form-item\n          :prop=\"item.prop\"\n          :label=\"item.label\"\n          :label-width=\"item.labelWidth ? (item.labelWidth + 'px') : ''\"\n        >\n          <!-- el-input -->\n          <el-input\n            v-if=\"item.type === 'input' || item.type === undefined\"\n            v-model=\"state.form[item.prop]\"\n            :size=\"item.size ? item.size : size\"\n            :disabled=\"item.disabled\"\n            :placeholder=\"item.placeholder\"\n            :suffix-icon=\"item.suffixIcon\"\n            clearable\n          />\n         </el-form-item>\n       </el-col>\n    </el-row>\n  </el-form>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, reactive, defineProps,watch, PropType } from 'vue'\nimport { Search, RefreshLeft } from '@element-plus/icons-vue'\n\ntype elementItem = {\n  prop: string,\n  label: string,\n  type: string,\n  size?: string,\n  disabled?: boolean,\n  placeholder?: string,\n  suffixIcon?: string,\n  filterable?: boolean,\n  multiple?: boolean,\n  style?: object,\n  optionGroup?: boolean,\n  options: Array<any>,\n  layout?:object,\n  labelWidth?: number | string,\n}\nconst emits = defineEmits(['search'])\nconst props = defineProps({\n  // layout\n    layout: {\n      type: Object,\n      default: () => ({\n        lg: {\n          span: 6,\n        },\n        md: {\n          span: 8,\n        },\n        sm: {\n          span: 12,\n        },\n        xs: {\n          span: 24,\n        },\n      }),\n    },\n    // 表单label宽度\n    labelWidth: {\n      type: [String, Number],\n      default: 'auto',\n    },\n    // 表单元素大小 默认 meidum\n    size: {\n      type: String,\n      default: 'default',\n      // validator: sizeValidator,\n    },\n    // 表单元素\n    elements: {\n      type: Array as unknown as PropType<[elementItem]>,\n      required: true,\n    },\n    // 是否展示搜索、重置按钮\n    hideBtns: {\n      type: Boolean,\n      default: false,\n    },\n})\n\nconst form = ref()\nconst state = reactive({\n  form: {},\n  formatters: {},\n})\n</script>\n```\n\n2. 在定义接口时，入参如果不定义类型会报：\n```\n(parameter) params: any\n\n参数“params”隐式具有“any”类型。ts(7006)\n```\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439521acfbaa49338539156b9329e153~tplv-k3u1fbpfcp-watermark.image?)\n解决办法就是给入参定义接口类型：\n```\ninterface generalViewIn {\n  page: number,\n  pagesize: number,\n}\n//获取概览列表数据\nexport async function getGeneralView(params: generalViewIn) {\n  return await http.get(Api.getGeneralView, params)\n}\n```\n这样params入参就不会标红了。\n\n3. 对象使用变量索引时，会标红，报：\n\n```\n元素隐式具有 \"any\" 类型，因为类型为 \"string\" 的表达式不能用于索引类型 \"{}\"。\\在类型 \"{}\" 上找不到具有类型为 \"string\" 的参数的索引签名。ts(7053)\n```\n\n解决办法：\n最简单是方案是修改tsconfig.json配置：在\"compilerOptions\"下加入下面这句，就不报错了。还有其他方案：\n\n```js\n{\n  \"compilerOptions\": {\n    \"suppressImplicitAnyIndexErrors\":true,\n  },\n}\n```\n\n4. 给reactive的变量赋值，会报：\n```\n不能将类型“{ path: any; meta: any; }[]”分配给类型“never[]”。\\\n不能将类型“{ path: any; meta: any; }”分配给类型“never”。ts(2322)\n```\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/845f5d9a319247dbb9d25a55c44d84a8~tplv-k3u1fbpfcp-watermark.image?)\n\n解决办法：\n在声明变量出就定义类型：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93316f5ee5ac4b3f900cf41b2bea040d~tplv-k3u1fbpfcp-watermark.image?)\n\n5. 在遍历中，item会报错：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/524c3332f3534028944f96225c5b2aac~tplv-k3u1fbpfcp-watermark.image?)\n\n解决办法： 给item定义类型\n\n```javascript\nconst subChildren = children.filter((item:any) => !item.meta?.hidden);\n```\n\n6. 从路由中获取参数，然后传递给接口\n```javascript\n// 变量声明\nconst { regionName=\"\", regionId='',  status=\"\" } = route.query\n//接口声明\ninterface getHostListIn {\n  regionId: string,\n}\n\n//接口使用\nconst getOptionList = () => {\n  getHostList({regionId}).then((res) => {\n   ...\n  }).catch((err) => {\n    ...\n  })\n  \n}\n```\n传给接口的入参使用从路由中获取的参数时会报错：\n```javascript\n不能将类型“string | LocationQueryValue[]”分配给类型“string”。\\\n不能将类型“LocationQueryValue[]”分配给类型“string”。ts(2322)\n```\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3d814427b6f405897321486b2d351cb~tplv-k3u1fbpfcp-watermark.image?)\n\n解决办法：\n修改接口入参声明类型：\n```javascript\n//变量声明\nconst regionName = route.query.regionName\nconst regionId = route.query.regionId\nconst status = route.query.status\n\n//接口声明\ninterface getHostListIn {\n  regionId: string | LocationQueryValue[],\n}\n```","source":"_posts/ts常见报错问题.md","raw":"---\ntitle: Vue3项目中使用TypeScript一些报错问题\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 28547\ndate: 2022-08-23 09:20:12\n---\n\nVue3项目中，使用TypeScript遇到的问题及解决方案。\n\n1. Vue3的template中使用v-for，提示错误：对象的类型为 \"unknown\"。ts(2571)\n\n解决方案：\n给循环中item定义类型；\n\n```js\n<template>\n  <el-form :model=\"state.form\" ref=\"form\"  :label-width=\"labelWidth\"\n    @submit.native.prevent\n  >\n    <el-row :gutter=\"20\">\n      <el-col v-bind=\"item.layout||layout\" v-for=\"(item, index) in elements\" :key=\"index\">\n        <el-form-item\n          :prop=\"item.prop\"\n          :label=\"item.label\"\n          :label-width=\"item.labelWidth ? (item.labelWidth + 'px') : ''\"\n        >\n          <!-- el-input -->\n          <el-input\n            v-if=\"item.type === 'input' || item.type === undefined\"\n            v-model=\"state.form[item.prop]\"\n            :size=\"item.size ? item.size : size\"\n            :disabled=\"item.disabled\"\n            :placeholder=\"item.placeholder\"\n            :suffix-icon=\"item.suffixIcon\"\n            clearable\n          />\n         </el-form-item>\n       </el-col>\n    </el-row>\n  </el-form>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref, reactive, defineProps,watch, PropType } from 'vue'\nimport { Search, RefreshLeft } from '@element-plus/icons-vue'\n\ntype elementItem = {\n  prop: string,\n  label: string,\n  type: string,\n  size?: string,\n  disabled?: boolean,\n  placeholder?: string,\n  suffixIcon?: string,\n  filterable?: boolean,\n  multiple?: boolean,\n  style?: object,\n  optionGroup?: boolean,\n  options: Array<any>,\n  layout?:object,\n  labelWidth?: number | string,\n}\nconst emits = defineEmits(['search'])\nconst props = defineProps({\n  // layout\n    layout: {\n      type: Object,\n      default: () => ({\n        lg: {\n          span: 6,\n        },\n        md: {\n          span: 8,\n        },\n        sm: {\n          span: 12,\n        },\n        xs: {\n          span: 24,\n        },\n      }),\n    },\n    // 表单label宽度\n    labelWidth: {\n      type: [String, Number],\n      default: 'auto',\n    },\n    // 表单元素大小 默认 meidum\n    size: {\n      type: String,\n      default: 'default',\n      // validator: sizeValidator,\n    },\n    // 表单元素\n    elements: {\n      type: Array as unknown as PropType<[elementItem]>,\n      required: true,\n    },\n    // 是否展示搜索、重置按钮\n    hideBtns: {\n      type: Boolean,\n      default: false,\n    },\n})\n\nconst form = ref()\nconst state = reactive({\n  form: {},\n  formatters: {},\n})\n</script>\n```\n\n2. 在定义接口时，入参如果不定义类型会报：\n```\n(parameter) params: any\n\n参数“params”隐式具有“any”类型。ts(7006)\n```\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439521acfbaa49338539156b9329e153~tplv-k3u1fbpfcp-watermark.image?)\n解决办法就是给入参定义接口类型：\n```\ninterface generalViewIn {\n  page: number,\n  pagesize: number,\n}\n//获取概览列表数据\nexport async function getGeneralView(params: generalViewIn) {\n  return await http.get(Api.getGeneralView, params)\n}\n```\n这样params入参就不会标红了。\n\n3. 对象使用变量索引时，会标红，报：\n\n```\n元素隐式具有 \"any\" 类型，因为类型为 \"string\" 的表达式不能用于索引类型 \"{}\"。\\在类型 \"{}\" 上找不到具有类型为 \"string\" 的参数的索引签名。ts(7053)\n```\n\n解决办法：\n最简单是方案是修改tsconfig.json配置：在\"compilerOptions\"下加入下面这句，就不报错了。还有其他方案：\n\n```js\n{\n  \"compilerOptions\": {\n    \"suppressImplicitAnyIndexErrors\":true,\n  },\n}\n```\n\n4. 给reactive的变量赋值，会报：\n```\n不能将类型“{ path: any; meta: any; }[]”分配给类型“never[]”。\\\n不能将类型“{ path: any; meta: any; }”分配给类型“never”。ts(2322)\n```\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/845f5d9a319247dbb9d25a55c44d84a8~tplv-k3u1fbpfcp-watermark.image?)\n\n解决办法：\n在声明变量出就定义类型：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93316f5ee5ac4b3f900cf41b2bea040d~tplv-k3u1fbpfcp-watermark.image?)\n\n5. 在遍历中，item会报错：\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/524c3332f3534028944f96225c5b2aac~tplv-k3u1fbpfcp-watermark.image?)\n\n解决办法： 给item定义类型\n\n```javascript\nconst subChildren = children.filter((item:any) => !item.meta?.hidden);\n```\n\n6. 从路由中获取参数，然后传递给接口\n```javascript\n// 变量声明\nconst { regionName=\"\", regionId='',  status=\"\" } = route.query\n//接口声明\ninterface getHostListIn {\n  regionId: string,\n}\n\n//接口使用\nconst getOptionList = () => {\n  getHostList({regionId}).then((res) => {\n   ...\n  }).catch((err) => {\n    ...\n  })\n  \n}\n```\n传给接口的入参使用从路由中获取的参数时会报错：\n```javascript\n不能将类型“string | LocationQueryValue[]”分配给类型“string”。\\\n不能将类型“LocationQueryValue[]”分配给类型“string”。ts(2322)\n```\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3d814427b6f405897321486b2d351cb~tplv-k3u1fbpfcp-watermark.image?)\n\n解决办法：\n修改接口入参声明类型：\n```javascript\n//变量声明\nconst regionName = route.query.regionName\nconst regionId = route.query.regionId\nconst status = route.query.status\n\n//接口声明\ninterface getHostListIn {\n  regionId: string | LocationQueryValue[],\n}\n```","slug":"ts常见报错问题","published":1,"updated":"2023-12-20T06:57:18.989Z","_id":"clqdf8htv002s44t17flb3odz","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>Vue3项目中，使用TypeScript遇到的问题及解决方案。</p>\n<ol>\n<li>Vue3的template中使用v-for，提示错误：对象的类型为 “unknown”。ts(2571)</li>\n</ol>\n<p>解决方案：<br>给循环中item定义类型；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-form :model=<span class=\"string\">&quot;state.form&quot;</span> ref=<span class=\"string\">&quot;form&quot;</span>  :label-width=<span class=\"string\">&quot;labelWidth&quot;</span></span><br><span class=\"line\">    @submit.native.prevent</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;el-row :gutter=<span class=\"string\">&quot;20&quot;</span>&gt;</span><br><span class=\"line\">      &lt;el-col v-bind=<span class=\"string\">&quot;item.layout||layout&quot;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item, index) in elements&quot;</span> :key=<span class=\"string\">&quot;index&quot;</span>&gt;</span><br><span class=\"line\">        &lt;el-form-item</span><br><span class=\"line\">          :prop=<span class=\"string\">&quot;item.prop&quot;</span></span><br><span class=\"line\">          :label=<span class=\"string\">&quot;item.label&quot;</span></span><br><span class=\"line\">          :label-width=<span class=\"string\">&quot;item.labelWidth ? (item.labelWidth + &#x27;px&#x27;) : &#x27;&#x27;&quot;</span></span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;!-- el-input --&gt;</span><br><span class=\"line\">          &lt;el-input</span><br><span class=\"line\">            v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;item.type === &#x27;input&#x27; || item.type === undefined&quot;</span></span><br><span class=\"line\">            v-model=<span class=\"string\">&quot;state.form[item.prop]&quot;</span></span><br><span class=\"line\">            :size=<span class=\"string\">&quot;item.size ? item.size : size&quot;</span></span><br><span class=\"line\">            :disabled=<span class=\"string\">&quot;item.disabled&quot;</span></span><br><span class=\"line\">            :placeholder=<span class=\"string\">&quot;item.placeholder&quot;</span></span><br><span class=\"line\">            :suffix-icon=<span class=\"string\">&quot;item.suffixIcon&quot;</span></span><br><span class=\"line\">            clearable</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">         &lt;/el-form-item&gt;</span><br><span class=\"line\">       &lt;/el-col&gt;</span><br><span class=\"line\">    &lt;/el-row&gt;</span><br><span class=\"line\">  &lt;/el-form&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span> setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, defineProps,watch, PropType &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Search, RefreshLeft &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">type elementItem = &#123;</span><br><span class=\"line\">  prop: string,</span><br><span class=\"line\">  label: string,</span><br><span class=\"line\">  type: string,</span><br><span class=\"line\">  size?: string,</span><br><span class=\"line\">  disabled?: boolean,</span><br><span class=\"line\">  placeholder?: string,</span><br><span class=\"line\">  suffixIcon?: string,</span><br><span class=\"line\">  filterable?: boolean,</span><br><span class=\"line\">  multiple?: boolean,</span><br><span class=\"line\">  style?: object,</span><br><span class=\"line\">  optionGroup?: boolean,</span><br><span class=\"line\">  options: <span class=\"built_in\">Array</span>&lt;any&gt;,</span><br><span class=\"line\">  layout?:object,</span><br><span class=\"line\">  labelWidth?: number | string,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> emits = defineEmits([<span class=\"string\">&#x27;search&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> props = defineProps(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// layout</span></span><br><span class=\"line\">    layout: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">        lg: &#123;</span><br><span class=\"line\">          span: <span class=\"number\">6</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        md: &#123;</span><br><span class=\"line\">          span: <span class=\"number\">8</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        sm: &#123;</span><br><span class=\"line\">          span: <span class=\"number\">12</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        xs: &#123;</span><br><span class=\"line\">          span: <span class=\"number\">24</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 表单label宽度</span></span><br><span class=\"line\">    labelWidth: &#123;</span><br><span class=\"line\">      type: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;auto&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 表单元素大小 默认 meidum</span></span><br><span class=\"line\">    size: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;default&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// validator: sizeValidator,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 表单元素</span></span><br><span class=\"line\">    elements: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span> <span class=\"keyword\">as</span> unknown <span class=\"keyword\">as</span> PropType&lt;[elementItem]&gt;,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否展示搜索、重置按钮</span></span><br><span class=\"line\">    hideBtns: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> form = ref()</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = reactive(&#123;</span><br><span class=\"line\">  form: &#123;&#125;,</span><br><span class=\"line\">  formatters: &#123;&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在定义接口时，入参如果不定义类型会报：<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parameter) <span class=\"built_in\">params</span>: <span class=\"keyword\">any</span></span><br><span class=\"line\"></span><br><span class=\"line\">参数“<span class=\"built_in\">params</span>”隐式具有“<span class=\"keyword\">any</span>”类型。ts(<span class=\"number\">7006</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439521acfbaa49338539156b9329e153~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>解决办法就是给入参定义接口类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> generalViewIn &#123;</span><br><span class=\"line\">  page: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  pagesize: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取概览列表数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGeneralView</span>(<span class=\"params\">params: generalViewIn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> http.get(Api.getGeneralView, params)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样params入参就不会标红了。</p>\n<ol start=\"3\">\n<li>对象使用变量索引时，会标红，报：</li>\n</ol>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素隐式具有 <span class=\"string\">&quot;any&quot;</span> 类型，因为类型为 <span class=\"string\">&quot;string&quot;</span> 的表达式不能用于索引类型 <span class=\"string\">&quot;&#123;&#125;&quot;</span>。\\在类型 <span class=\"string\">&quot;&#123;&#125;&quot;</span> 上找不到具有类型为 <span class=\"string\">&quot;string&quot;</span> 的参数的索引签名。<span class=\"function\"><span class=\"title\">ts</span>(<span class=\"number\">7053</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>解决办法：<br>最简单是方案是修改tsconfig.json配置：在”compilerOptions”下加入下面这句，就不报错了。还有其他方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>给reactive的变量赋值，会报：<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不能将类型“&#123; path: any; meta: any; &#125;<span class=\"selector-attr\">[]</span>”分配给类型“never<span class=\"selector-attr\">[]</span>”。\\</span><br><span class=\"line\">不能将类型“&#123; path: any; meta: any; &#125;”分配给类型“never”。ts(<span class=\"number\">2322</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/845f5d9a319247dbb9d25a55c44d84a8~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>解决办法：<br>在声明变量出就定义类型：</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93316f5ee5ac4b3f900cf41b2bea040d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>在遍历中，item会报错：</li>\n</ol>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/524c3332f3534028944f96225c5b2aac~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>解决办法： 给item定义类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> subChildren = children.filter(<span class=\"function\">(<span class=\"params\">item:any</span>) =&gt;</span> !item.meta?.hidden);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>从路由中获取参数，然后传递给接口<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; regionName=<span class=\"string\">&quot;&quot;</span>, regionId=<span class=\"string\">&#x27;&#x27;</span>,  status=<span class=\"string\">&quot;&quot;</span> &#125; = route.query</span><br><span class=\"line\"><span class=\"comment\">//接口声明</span></span><br><span class=\"line\">interface getHostListIn &#123;</span><br><span class=\"line\">  regionId: string,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getOptionList = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  getHostList(&#123;regionId&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n传给接口的入参使用从路由中获取的参数时会报错：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不能将类型“string | LocationQueryValue[]”分配给类型“string”。\\</span><br><span class=\"line\">不能将类型“LocationQueryValue[]”分配给类型“string”。ts(<span class=\"number\">2322</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3d814427b6f405897321486b2d351cb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>解决办法：<br>修改接口入参声明类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> regionName = route.query.regionName</span><br><span class=\"line\"><span class=\"keyword\">const</span> regionId = route.query.regionId</span><br><span class=\"line\"><span class=\"keyword\">const</span> status = route.query.status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口声明</span></span><br><span class=\"line\">interface getHostListIn &#123;</span><br><span class=\"line\">  regionId: string | LocationQueryValue[],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>Vue3项目中，使用TypeScript遇到的问题及解决方案。</p>\n<ol>\n<li>Vue3的template中使用v-for，提示错误：对象的类型为 “unknown”。ts(2571)</li>\n</ol>\n<p>解决方案：<br>给循环中item定义类型；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;el-form :model=<span class=\"string\">&quot;state.form&quot;</span> ref=<span class=\"string\">&quot;form&quot;</span>  :label-width=<span class=\"string\">&quot;labelWidth&quot;</span></span><br><span class=\"line\">    @submit.native.prevent</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &lt;el-row :gutter=<span class=\"string\">&quot;20&quot;</span>&gt;</span><br><span class=\"line\">      &lt;el-col v-bind=<span class=\"string\">&quot;item.layout||layout&quot;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item, index) in elements&quot;</span> :key=<span class=\"string\">&quot;index&quot;</span>&gt;</span><br><span class=\"line\">        &lt;el-form-item</span><br><span class=\"line\">          :prop=<span class=\"string\">&quot;item.prop&quot;</span></span><br><span class=\"line\">          :label=<span class=\"string\">&quot;item.label&quot;</span></span><br><span class=\"line\">          :label-width=<span class=\"string\">&quot;item.labelWidth ? (item.labelWidth + &#x27;px&#x27;) : &#x27;&#x27;&quot;</span></span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">          &lt;!-- el-input --&gt;</span><br><span class=\"line\">          &lt;el-input</span><br><span class=\"line\">            v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;item.type === &#x27;input&#x27; || item.type === undefined&quot;</span></span><br><span class=\"line\">            v-model=<span class=\"string\">&quot;state.form[item.prop]&quot;</span></span><br><span class=\"line\">            :size=<span class=\"string\">&quot;item.size ? item.size : size&quot;</span></span><br><span class=\"line\">            :disabled=<span class=\"string\">&quot;item.disabled&quot;</span></span><br><span class=\"line\">            :placeholder=<span class=\"string\">&quot;item.placeholder&quot;</span></span><br><span class=\"line\">            :suffix-icon=<span class=\"string\">&quot;item.suffixIcon&quot;</span></span><br><span class=\"line\">            clearable</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">         &lt;/el-form-item&gt;</span><br><span class=\"line\">       &lt;/el-col&gt;</span><br><span class=\"line\">    &lt;/el-row&gt;</span><br><span class=\"line\">  &lt;/el-form&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span> setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, defineProps,watch, PropType &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Search, RefreshLeft &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">type elementItem = &#123;</span><br><span class=\"line\">  prop: string,</span><br><span class=\"line\">  label: string,</span><br><span class=\"line\">  type: string,</span><br><span class=\"line\">  size?: string,</span><br><span class=\"line\">  disabled?: boolean,</span><br><span class=\"line\">  placeholder?: string,</span><br><span class=\"line\">  suffixIcon?: string,</span><br><span class=\"line\">  filterable?: boolean,</span><br><span class=\"line\">  multiple?: boolean,</span><br><span class=\"line\">  style?: object,</span><br><span class=\"line\">  optionGroup?: boolean,</span><br><span class=\"line\">  options: <span class=\"built_in\">Array</span>&lt;any&gt;,</span><br><span class=\"line\">  layout?:object,</span><br><span class=\"line\">  labelWidth?: number | string,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> emits = defineEmits([<span class=\"string\">&#x27;search&#x27;</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> props = defineProps(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// layout</span></span><br><span class=\"line\">    layout: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">        lg: &#123;</span><br><span class=\"line\">          span: <span class=\"number\">6</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        md: &#123;</span><br><span class=\"line\">          span: <span class=\"number\">8</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        sm: &#123;</span><br><span class=\"line\">          span: <span class=\"number\">12</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        xs: &#123;</span><br><span class=\"line\">          span: <span class=\"number\">24</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 表单label宽度</span></span><br><span class=\"line\">    labelWidth: &#123;</span><br><span class=\"line\">      type: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;auto&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 表单元素大小 默认 meidum</span></span><br><span class=\"line\">    size: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;default&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// validator: sizeValidator,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 表单元素</span></span><br><span class=\"line\">    elements: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span> <span class=\"keyword\">as</span> unknown <span class=\"keyword\">as</span> PropType&lt;[elementItem]&gt;,</span><br><span class=\"line\">      required: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 是否展示搜索、重置按钮</span></span><br><span class=\"line\">    hideBtns: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> form = ref()</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = reactive(&#123;</span><br><span class=\"line\">  form: &#123;&#125;,</span><br><span class=\"line\">  formatters: &#123;&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在定义接口时，入参如果不定义类型会报：<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parameter) <span class=\"built_in\">params</span>: <span class=\"keyword\">any</span></span><br><span class=\"line\"></span><br><span class=\"line\">参数“<span class=\"built_in\">params</span>”隐式具有“<span class=\"keyword\">any</span>”类型。ts(<span class=\"number\">7006</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439521acfbaa49338539156b9329e153~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>解决办法就是给入参定义接口类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> generalViewIn &#123;</span><br><span class=\"line\">  page: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">  pagesize: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//获取概览列表数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGeneralView</span>(<span class=\"params\">params: generalViewIn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> http.get(Api.getGeneralView, params)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样params入参就不会标红了。</p>\n<ol start=\"3\">\n<li>对象使用变量索引时，会标红，报：</li>\n</ol>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素隐式具有 <span class=\"string\">&quot;any&quot;</span> 类型，因为类型为 <span class=\"string\">&quot;string&quot;</span> 的表达式不能用于索引类型 <span class=\"string\">&quot;&#123;&#125;&quot;</span>。\\在类型 <span class=\"string\">&quot;&#123;&#125;&quot;</span> 上找不到具有类型为 <span class=\"string\">&quot;string&quot;</span> 的参数的索引签名。<span class=\"function\"><span class=\"title\">ts</span>(<span class=\"number\">7053</span>)</span></span><br></pre></td></tr></table></figure>\n\n<p>解决办法：<br>最简单是方案是修改tsconfig.json配置：在”compilerOptions”下加入下面这句，就不报错了。还有其他方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>给reactive的变量赋值，会报：<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不能将类型“&#123; path: any; meta: any; &#125;<span class=\"selector-attr\">[]</span>”分配给类型“never<span class=\"selector-attr\">[]</span>”。\\</span><br><span class=\"line\">不能将类型“&#123; path: any; meta: any; &#125;”分配给类型“never”。ts(<span class=\"number\">2322</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/845f5d9a319247dbb9d25a55c44d84a8~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>解决办法：<br>在声明变量出就定义类型：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93316f5ee5ac4b3f900cf41b2bea040d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>在遍历中，item会报错：</li>\n</ol>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/524c3332f3534028944f96225c5b2aac~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>解决办法： 给item定义类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> subChildren = children.filter(<span class=\"function\">(<span class=\"params\">item:any</span>) =&gt;</span> !item.meta?.hidden);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>从路由中获取参数，然后传递给接口<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; regionName=<span class=\"string\">&quot;&quot;</span>, regionId=<span class=\"string\">&#x27;&#x27;</span>,  status=<span class=\"string\">&quot;&quot;</span> &#125; = route.query</span><br><span class=\"line\"><span class=\"comment\">//接口声明</span></span><br><span class=\"line\">interface getHostListIn &#123;</span><br><span class=\"line\">  regionId: string,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getOptionList = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  getHostList(&#123;regionId&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n传给接口的入参使用从路由中获取的参数时会报错：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不能将类型“string | LocationQueryValue[]”分配给类型“string”。\\</span><br><span class=\"line\">不能将类型“LocationQueryValue[]”分配给类型“string”。ts(<span class=\"number\">2322</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3d814427b6f405897321486b2d351cb~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>解决办法：<br>修改接口入参声明类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//变量声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> regionName = route.query.regionName</span><br><span class=\"line\"><span class=\"keyword\">const</span> regionId = route.query.regionId</span><br><span class=\"line\"><span class=\"keyword\">const</span> status = route.query.status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口声明</span></span><br><span class=\"line\">interface getHostListIn &#123;</span><br><span class=\"line\">  regionId: string | LocationQueryValue[],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439521acfbaa49338539156b9329e153~tplv-k3u1fbpfcp-watermark.image","popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"Vue3项目中使用TypeScript一些报错问题","path":"posts/28547/","eyeCatchImage":"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439521acfbaa49338539156b9329e153~tplv-k3u1fbpfcp-watermark.image","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-23T01:20:12.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-23T01:20:12.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3842},{"title":"微前端（一）-父子应用","copyright":true,"comments":1,"abbrlink":45795,"date":"2021-09-06T13:45:04.000Z","_content":"\n背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。\n\n## 主应用\n\n主应用为基座，接入所有子应用\n\n<div align=center>\n<img src=\"micro-1.jpg\" width = 65%>\n</div>\n\n#### 配置\n\n注册所有子应用\n\n## 子应用\n\n#### 配置\n需要在入口暴露生命周期接口\n\n```\nlet instance = null;\n\nconst render = (props = {}) => {\n  const { container, routerBase } = props;\n  // eslint-disable-next-line\n  router.base =  window.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;\n  router.mode = 'history';\n  instance = new Vue({\n    render: (h) => h(App),\n    router,\n    store,\n  }).$mount(container ? container.querySelector('#app') : '#app');\n};\n\n// eslint-disable-next-line\nif (!window.__POWERED_BY_QIANKUN__) {\n  render();\n}\n\nexport async function bootstrap() {\n  console.log('[vue] vue app bootstraped');\n}\n\nexport async function mount(props) {\n  console.log('[vue] props from main framework', props);\n  render(props);\n}\n\nexport async function unmount() {\n  instance.$destroy();\n  instance.$el.innerHTML = '';\n  instance = null;\n}\n```\n\n\n\n\n","source":"_posts/微前端(一)-父子应用.md","raw":"---\ntitle: 微前端（一）-父子应用\ntags: micro\ncategories: 微前端\ncopyright: true\ncomments: true\nabbrlink: 45795\ndate: 2021-09-06 21:45:04\n---\n\n背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。\n\n## 主应用\n\n主应用为基座，接入所有子应用\n\n<div align=center>\n<img src=\"micro-1.jpg\" width = 65%>\n</div>\n\n#### 配置\n\n注册所有子应用\n\n## 子应用\n\n#### 配置\n需要在入口暴露生命周期接口\n\n```\nlet instance = null;\n\nconst render = (props = {}) => {\n  const { container, routerBase } = props;\n  // eslint-disable-next-line\n  router.base =  window.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;\n  router.mode = 'history';\n  instance = new Vue({\n    render: (h) => h(App),\n    router,\n    store,\n  }).$mount(container ? container.querySelector('#app') : '#app');\n};\n\n// eslint-disable-next-line\nif (!window.__POWERED_BY_QIANKUN__) {\n  render();\n}\n\nexport async function bootstrap() {\n  console.log('[vue] vue app bootstraped');\n}\n\nexport async function mount(props) {\n  console.log('[vue] props from main framework', props);\n  render(props);\n}\n\nexport async function unmount() {\n  instance.$destroy();\n  instance.$el.innerHTML = '';\n  instance = null;\n}\n```\n\n\n\n\n","slug":"微前端(一)-父子应用","published":1,"updated":"2022-07-13T01:47:21.987Z","layout":"post","photos":[],"link":"","_id":"clqdf8htv002v44t18g3p0a2x","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。</p>\n<h2 id=\"主应用\"><a href=\"#主应用\" class=\"headerlink\" title=\"主应用\"></a>主应用</h2><p>主应用为基座，接入所有子应用</p>\n<div align=\"center\">\n<img data-src=\"/posts/45795/micro-1.jpg\" width=\"65%\">\n</div>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>注册所有子应用</p>\n<h2 id=\"子应用\"><a href=\"#子应用\" class=\"headerlink\" title=\"子应用\"></a>子应用</h2><h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>需要在入口暴露生命周期接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\">(<span class=\"params\">props = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container, routerBase &#125; = props;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">  router.base =  <span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;</span><br><span class=\"line\">  router.mode = <span class=\"string\">&#x27;history&#x27;</span>;</span><br><span class=\"line\">  instance = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App),</span><br><span class=\"line\">    router,</span><br><span class=\"line\">    store,</span><br><span class=\"line\">  &#125;).$mount(container ? container.querySelector(<span class=\"string\">&#x27;#app&#x27;</span>) : <span class=\"string\">&#x27;#app&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class=\"line\">  render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[vue] vue app bootstraped&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mount</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[vue] props from main framework&#x27;</span>, props);</span><br><span class=\"line\">  render(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unmount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  instance.$destroy();</span><br><span class=\"line\">  instance.$el.innerHTML = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。</p>\n<h2 id=\"主应用\"><a href=\"#主应用\" class=\"headerlink\" title=\"主应用\"></a>主应用</h2><p>主应用为基座，接入所有子应用</p>\n<div align=\"center\">\n<img src=\"/posts/45795/micro-1.jpg\" width=\"65%\">\n</div>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>注册所有子应用</p>\n<h2 id=\"子应用\"><a href=\"#子应用\" class=\"headerlink\" title=\"子应用\"></a>子应用</h2><h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>需要在入口暴露生命周期接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\">(<span class=\"params\">props = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container, routerBase &#125; = props;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">  router.base =  <span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;</span><br><span class=\"line\">  router.mode = <span class=\"string\">&#x27;history&#x27;</span>;</span><br><span class=\"line\">  instance = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App),</span><br><span class=\"line\">    router,</span><br><span class=\"line\">    store,</span><br><span class=\"line\">  &#125;).$mount(container ? container.querySelector(<span class=\"string\">&#x27;#app&#x27;</span>) : <span class=\"string\">&#x27;#app&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class=\"line\">  render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[vue] vue app bootstraped&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mount</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[vue] props from main framework&#x27;</span>, props);</span><br><span class=\"line\">  render(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unmount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  instance.$destroy();</span><br><span class=\"line\">  instance.$el.innerHTML = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/posts/45795/micro-1.jpg","popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"微前端（一）-父子应用","path":"posts/45795/","eyeCatchImage":"/posts/45795/micro-1.jpg","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-09-06T13:45:04.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-09-06T13:45:04.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"微前端","tags":["micro"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":970},{"title":"web前端模块化(一)—前言","copyright":true,"comments":1,"abbrlink":8881,"date":"2021-03-07T11:47:12.000Z","_content":"\n### 什么是模块化\n\n将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。\n内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。\n\n### 模块化的进程\n1.全局function模式-把不同的功能封装成不同的全局函数\n\n2.命名空间模式-基于简单的对象封装,\n劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；\n```\nlet obj = {\n  data: '',\n  func1: () => {},\n  func2: () => () {},\n}\n\nobj.data = 'aaa';\nobj.func1();\n```\n3.匿名函数自执行方式（闭包）\n向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。\n\n\n```\n<script type=\"text/javascript>\n(function(win) {\n  function func1() {\n    // ...\n  }\n  function func2() {\n    // ...\n  }\n  // 向外暴露方法，es6的写法\n  win.myMethods = {func1, func2};\n})(window)\n</script>\n```\n\n4.匿名函数的模式增加：向入口传入依赖的模块\n```\n<script type=\"text/javascript>\n(function(a, b) {\n  b(a);\n})(window, function(window){\n  window.jQuery = jQuery;\n  function jQuery(){};\n})\n</script>\n```\n\n```\nconst var module1 = (function(m) {\n  m.add = (a, b) => {\n    return a+b;\n  }\n  return m;\n})(window.module1 || {})\n```\n劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）\n\n### 模块化的好处\n1. 避免命名冲突（减少命名空间污染）\n2. 更好的分离，按需加载\n3. 更高的复用性，更高的可维护性\n\n### 引入多个script后出现的问题\n\n引入多个script之后，会不可避免的出现引用交叉。\n- 请求过多\n- 依赖会乱掉，就所谓的依赖模糊\n- 难以维护，因为各种调用，依赖都交织在一起了。\n\n这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.\n","source":"_posts/模块化1.md","raw":"---\ntitle: web前端模块化(一)—前言\ntags: 工程化\ncategories: 前端工程化\ncopyright: true\ncomments: true\nabbrlink: 8881\ndate: 2021-03-07 19:47:12\n---\n\n### 什么是模块化\n\n将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。\n内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。\n\n### 模块化的进程\n1.全局function模式-把不同的功能封装成不同的全局函数\n\n2.命名空间模式-基于简单的对象封装,\n劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；\n```\nlet obj = {\n  data: '',\n  func1: () => {},\n  func2: () => () {},\n}\n\nobj.data = 'aaa';\nobj.func1();\n```\n3.匿名函数自执行方式（闭包）\n向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。\n\n\n```\n<script type=\"text/javascript>\n(function(win) {\n  function func1() {\n    // ...\n  }\n  function func2() {\n    // ...\n  }\n  // 向外暴露方法，es6的写法\n  win.myMethods = {func1, func2};\n})(window)\n</script>\n```\n\n4.匿名函数的模式增加：向入口传入依赖的模块\n```\n<script type=\"text/javascript>\n(function(a, b) {\n  b(a);\n})(window, function(window){\n  window.jQuery = jQuery;\n  function jQuery(){};\n})\n</script>\n```\n\n```\nconst var module1 = (function(m) {\n  m.add = (a, b) => {\n    return a+b;\n  }\n  return m;\n})(window.module1 || {})\n```\n劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）\n\n### 模块化的好处\n1. 避免命名冲突（减少命名空间污染）\n2. 更好的分离，按需加载\n3. 更高的复用性，更高的可维护性\n\n### 引入多个script后出现的问题\n\n引入多个script之后，会不可避免的出现引用交叉。\n- 请求过多\n- 依赖会乱掉，就所谓的依赖模糊\n- 难以维护，因为各种调用，依赖都交织在一起了。\n\n这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.\n","slug":"模块化1","published":1,"updated":"2022-07-13T01:47:21.997Z","layout":"post","photos":[],"link":"","_id":"clqdf8htx003044t1f6o1a8ne","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"什么是模块化\"><a href=\"#什么是模块化\" class=\"headerlink\" title=\"什么是模块化\"></a>什么是模块化</h3><p>将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。<br>内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。</p>\n<h3 id=\"模块化的进程\"><a href=\"#模块化的进程\" class=\"headerlink\" title=\"模块化的进程\"></a>模块化的进程</h3><p>1.全局function模式-把不同的功能封装成不同的全局函数</p>\n<p>2.命名空间模式-基于简单的对象封装,<br>劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  data: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  fu<span class=\"symbol\">nc1</span>: <span class=\"comment\">()</span> =&gt; &#123;&#125;,</span><br><span class=\"line\">  fu<span class=\"symbol\">nc2</span>: <span class=\"comment\">()</span> =&gt; <span class=\"comment\">()</span> &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.data = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">obj.fu<span class=\"symbol\">nc1</span><span class=\"comment\">()</span>;</span><br></pre></td></tr></table></figure>\n<p>3.匿名函数自执行方式（闭包）<br>向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">type</span>=&quot;text/javascript&gt;</span><br><span class=\"line\">(function(<span class=\"keyword\">win</span>) &#123;</span><br><span class=\"line\">  function func1() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function func2() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 向外暴露方法，es6的写法</span></span><br><span class=\"line\">  <span class=\"keyword\">win</span>.myMethods = &#123;func1, func2&#125;;</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">window</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>4.匿名函数的模式增加：向入口传入依赖的模块</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">type</span>=&quot;text/javascript&gt;</span><br><span class=\"line\">(function(a, b) &#123;</span><br><span class=\"line\">  b(a);</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">window</span>, function(<span class=\"keyword\">window</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">window</span>.jQuery = jQuery;</span><br><span class=\"line\">  function jQuery()&#123;&#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">  m.add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>.module1 || &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）</p>\n<h3 id=\"模块化的好处\"><a href=\"#模块化的好处\" class=\"headerlink\" title=\"模块化的好处\"></a>模块化的好处</h3><ol>\n<li>避免命名冲突（减少命名空间污染）</li>\n<li>更好的分离，按需加载</li>\n<li>更高的复用性，更高的可维护性</li>\n</ol>\n<h3 id=\"引入多个script后出现的问题\"><a href=\"#引入多个script后出现的问题\" class=\"headerlink\" title=\"引入多个script后出现的问题\"></a>引入多个script后出现的问题</h3><p>引入多个script之后，会不可避免的出现引用交叉。</p>\n<ul>\n<li>请求过多</li>\n<li>依赖会乱掉，就所谓的依赖模糊</li>\n<li>难以维护，因为各种调用，依赖都交织在一起了。</li>\n</ul>\n<p>这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"什么是模块化\"><a href=\"#什么是模块化\" class=\"headerlink\" title=\"什么是模块化\"></a>什么是模块化</h3><p>将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。<br>内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。</p>\n<h3 id=\"模块化的进程\"><a href=\"#模块化的进程\" class=\"headerlink\" title=\"模块化的进程\"></a>模块化的进程</h3><p>1.全局function模式-把不同的功能封装成不同的全局函数</p>\n<p>2.命名空间模式-基于简单的对象封装,<br>劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  data: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  fu<span class=\"symbol\">nc1</span>: <span class=\"comment\">()</span> =&gt; &#123;&#125;,</span><br><span class=\"line\">  fu<span class=\"symbol\">nc2</span>: <span class=\"comment\">()</span> =&gt; <span class=\"comment\">()</span> &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.data = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">obj.fu<span class=\"symbol\">nc1</span><span class=\"comment\">()</span>;</span><br></pre></td></tr></table></figure>\n<p>3.匿名函数自执行方式（闭包）<br>向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">type</span>=&quot;text/javascript&gt;</span><br><span class=\"line\">(function(<span class=\"keyword\">win</span>) &#123;</span><br><span class=\"line\">  function func1() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function func2() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 向外暴露方法，es6的写法</span></span><br><span class=\"line\">  <span class=\"keyword\">win</span>.myMethods = &#123;func1, func2&#125;;</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">window</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>4.匿名函数的模式增加：向入口传入依赖的模块</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">type</span>=&quot;text/javascript&gt;</span><br><span class=\"line\">(function(a, b) &#123;</span><br><span class=\"line\">  b(a);</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">window</span>, function(<span class=\"keyword\">window</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">window</span>.jQuery = jQuery;</span><br><span class=\"line\">  function jQuery()&#123;&#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">  m.add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>.module1 || &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）</p>\n<h3 id=\"模块化的好处\"><a href=\"#模块化的好处\" class=\"headerlink\" title=\"模块化的好处\"></a>模块化的好处</h3><ol>\n<li>避免命名冲突（减少命名空间污染）</li>\n<li>更好的分离，按需加载</li>\n<li>更高的复用性，更高的可维护性</li>\n</ol>\n<h3 id=\"引入多个script后出现的问题\"><a href=\"#引入多个script后出现的问题\" class=\"headerlink\" title=\"引入多个script后出现的问题\"></a>引入多个script后出现的问题</h3><p>引入多个script之后，会不可避免的出现引用交叉。</p>\n<ul>\n<li>请求过多</li>\n<li>依赖会乱掉，就所谓的依赖模糊</li>\n<li>难以维护，因为各种调用，依赖都交织在一起了。</li>\n</ul>\n<p>这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:21 GMT+0800 (中国标准时间)","title":"web前端模块化(一)—前言","path":"posts/8881/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-03-07T11:47:12.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-03-07T11:47:12.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"前端工程化","tags":["工程化"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1178},{"title":"模块化（二）","copyright":true,"comments":1,"abbrlink":21747,"date":"2021-03-14T03:56:30.000Z","_content":"\n### CommonJS\n\n每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。\nnode和webpack都对commonjs原生支持。\n\n核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.\n\n浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。\n\ncommonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。\n\n```\n//index.js\nvar module = require('module.js);\nmodule.aa('hello');\n\n// module.js\nmodule.exports = {\n  aa: function () {\n    console.log(str);\n  }\n}\n```\n\n### AMD\n异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。\n\nAMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块\n\n```\n// main.js\nrequire(['jQuire', 'math'], function($, math) {\n  // ...\n})\n\n// math,js\ndefine(function() {\n  // ...\n})\n```\n\n### CMD\nCMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。\n\n产物seaJS，跟require JS使用有些类似。\n\nCMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块\n\n```\n<script src=\"./sea.js\"></script>\n\n<script>\n// index.html\nseajs.use('main.js');\n\n// main.js\ndefine(function(require, exports,module) {\n  var module1 = require('module1.js');\n  console.log(module1);\n})\n\n// module1.js\ndefine (function(require,exports, module) {\n  var arr = [1,2,3];\n  exports.module1 = arr;\n})\n```\n\n### ES6\n自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。\n\n使用import关键字引入模块，通过export关键字导出模块\n\n\n总结：\nCommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。","source":"_posts/模块化2.md","raw":"---\ntitle: 模块化（二）\ntags: 工程化\ncategories: 前端工程化\ncopyright: true\ncomments: true\nabbrlink: 21747\ndate: 2021-03-14 11:56:30\n---\n\n### CommonJS\n\n每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。\nnode和webpack都对commonjs原生支持。\n\n核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.\n\n浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。\n\ncommonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。\n\n```\n//index.js\nvar module = require('module.js);\nmodule.aa('hello');\n\n// module.js\nmodule.exports = {\n  aa: function () {\n    console.log(str);\n  }\n}\n```\n\n### AMD\n异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。\n\nAMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块\n\n```\n// main.js\nrequire(['jQuire', 'math'], function($, math) {\n  // ...\n})\n\n// math,js\ndefine(function() {\n  // ...\n})\n```\n\n### CMD\nCMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。\n\n产物seaJS，跟require JS使用有些类似。\n\nCMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块\n\n```\n<script src=\"./sea.js\"></script>\n\n<script>\n// index.html\nseajs.use('main.js');\n\n// main.js\ndefine(function(require, exports,module) {\n  var module1 = require('module1.js');\n  console.log(module1);\n})\n\n// module1.js\ndefine (function(require,exports, module) {\n  var arr = [1,2,3];\n  exports.module1 = arr;\n})\n```\n\n### ES6\n自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。\n\n使用import关键字引入模块，通过export关键字导出模块\n\n\n总结：\nCommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。","slug":"模块化2","published":1,"updated":"2022-07-13T01:47:22.001Z","layout":"post","photos":[],"link":"","_id":"clqdf8hty003244t11g57fy8l","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。<br>node和webpack都对commonjs原生支持。</p>\n<p>核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.</p>\n<p>浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。</p>\n<p>commonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。</p>\n<figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\">var <span class=\"function\"><span class=\"keyword\">module</span> =</span> require(&#x27;<span class=\"keyword\">module</span>.js);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.aa(&#x27;hello&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = &#123;</span><br><span class=\"line\">  aa: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> &#123;</span></span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"built_in\">str</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p>异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。</p>\n<p>AMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> main.js</span><br><span class=\"line\">require([<span class=\"string\">&#x27;jQuire&#x27;</span>, <span class=\"string\">&#x27;math&#x27;</span>], <span class=\"keyword\">function</span>($, math) &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> ...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> math,js</span><br><span class=\"line\">define(<span class=\"keyword\">function</span>() &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。</p>\n<p>产物seaJS，跟require JS使用有些类似。</p>\n<p>CMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./sea.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// index.html</span></span></span><br><span class=\"line\"><span class=\"javascript\">seajs.use(<span class=\"string\">&#x27;main.js&#x27;</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// main.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>,<span class=\"built_in\">module</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> module1 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;module1.js&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(module1);</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// module1.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">define (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>,<span class=\"built_in\">exports</span>, <span class=\"built_in\">module</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">exports</span>.module1 = arr;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><p>自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。</p>\n<p>使用import关键字引入模块，通过export关键字导出模块</p>\n<p>总结：<br>CommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。<br>node和webpack都对commonjs原生支持。</p>\n<p>核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.</p>\n<p>浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。</p>\n<p>commonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。</p>\n<figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\">var <span class=\"function\"><span class=\"keyword\">module</span> =</span> require(&#x27;<span class=\"keyword\">module</span>.js);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.aa(&#x27;hello&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = &#123;</span><br><span class=\"line\">  aa: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> &#123;</span></span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"built_in\">str</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p>异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。</p>\n<p>AMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> main.js</span><br><span class=\"line\">require([<span class=\"string\">&#x27;jQuire&#x27;</span>, <span class=\"string\">&#x27;math&#x27;</span>], <span class=\"keyword\">function</span>($, math) &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> ...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> math,js</span><br><span class=\"line\">define(<span class=\"keyword\">function</span>() &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。</p>\n<p>产物seaJS，跟require JS使用有些类似。</p>\n<p>CMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./sea.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// index.html</span></span></span><br><span class=\"line\"><span class=\"javascript\">seajs.use(<span class=\"string\">&#x27;main.js&#x27;</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// main.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>,<span class=\"built_in\">module</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> module1 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;module1.js&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(module1);</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// module1.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">define (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>,<span class=\"built_in\">exports</span>, <span class=\"built_in\">module</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">exports</span>.module1 = arr;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><p>自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。</p>\n<p>使用import关键字引入模块，通过export关键字导出模块</p>\n<p>总结：<br>CommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:22 GMT+0800 (中国标准时间)","title":"模块化（二）","path":"posts/21747/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-03-14T03:56:30.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-03-14T03:56:30.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"前端工程化","tags":["工程化"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1361},{"title":"0-1搭建业务组件库一","copyright":true,"comments":1,"abbrlink":24916,"date":"2022-10-08T07:42:47.000Z","_content":"\n在完成了一个项目，去做另一个项目时，会用到重复的组件，我们可以去打开上一个工程，把组件代码拷过来，再重新调整数据，这样会很麻烦，随着项目的越来越多，也不好定位哪个项目中使用了可复用的组件，所以业务组件库就发挥了它的优势，直接安装好后，按需引入，不用再手搬代码。本篇文章会讲述如何从 0-1 搭建自己的组件库。\n\n技术栈：\n\n- Vue3\n- TypeScript\n- pnpm\n\n### 1 环境准备\n\n在 cmd 终端安装 pnpm\n\n```js\nnpm install pnpm -g\n```\n\n创建工程目录：vue3-components。\n\n用 vscode 打开工程目录，在 vscode 终端执行：\n\n```js\npnpm init\n```\n\n根目录新建.npmrc 文件，写入下面的语句，作用是与项目不直接相关的不会安装在 node modules 下：\n\n```js\nshamefully-hoist = true\n```\n\n在根目录安装依赖：\n\n```js\npnpm install vue@next typescript -D\n```\n\n配置 tsconfig.json:\n\n```js\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"declaration\": false,\n    \"noImplicitAny\": false,\n    \"removeComments\":true,\n    \"esModuleInterop\": true,\n    \"moduleResolution\": \"node\",\n    \"jsx\": \"preserve\",\n    \"noLib\": false,\n    \"target\": \"es2018\",\n    \"sourceMap\": true,\n    \"lib\": [\"esnext\", \"DOM\"],\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true,\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"dist/**\",\n    \"**/__tests__\",\n  ]\n}\n```\n\n根目录新建 pnpm-workspace.yaml 文件，写入：\n\n```js\npackages:\n  - \"packages/**\" # 存放编写的组件\n  - play # 使用组件的地方\n```\n\n### 2 项目创建\n\n在根目录新建 paly 目录，进入 play，执行:`pnpm init`，\n修改 package.json 文件配置：\n\n```js\n{\n  \"name\": \"@vue3-components/play\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"liuhp\",\n  \"license\": \"ISC\"\n}\n```\n\n在 play 目录下安装依赖：\n\n```\npnpm install vite @vitejs/plugin-vue -D\n```\n\n在 play 目录下新建 vite.config.ts, 写入：\n\n```js\nimport { defineConfig } from \"vite\"\nimport vue from \"@vitejs/plugin-vue\"\n\nexport default defineConfig({\n  plugins: [vue()],\n})\n```\n\n新建 index.html,写入：\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n\n<body>\n  <div id=\"app\"></div>\n  <script src=\"/main.ts\" type=\"module\"></script>\n</body>\n</html>\n```\n\n新建 app.vue, 写入：\n\n```js\n<template>\n  <div>测试</div>\n</template>\n```\n\n新建 main.js, 写入：\n\n```js\nimport { createApp } from \"vue\"\nimport App from \"./app.vue\"\n\nconst app = createApp(App)\napp.mount(\"#app\")\n```\n\nmain.ts 此时会提示：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/586e502f911440868c8781bebd87737f~tplv-k3u1fbpfcp-watermark.image?)\n\n所以我们在 vue3-components 根目录下新建`typings`文件夹，在 typings 下新建`vue-shim.d.ts`文件，写入：\n\n```js\ndeclare module \"*.vue\" {\n  import type { DefineComponent } from \"vue\"\n  const component: DefineComponent<{}, {}, any>\n  export default component\n}\n```\n\n此时，main.ts 就不会报错了。\n修改 package.json 里 script 的命令：\n\n```js\n\"scripts\": {\n    \"dev\": \"vite\"\n  },\n```\n\n然后就可以在 play 目录下运行`npm run dev`, 为了能够在 vue3-components 根目录下直接运行 play 项目，需要修改 vue3-components 根目录下的 package.json 里 script 的命令：\n\n```js\n\"scripts\": {\n   \"dev\": \"pnpm -C play dev\"\n },\n```\n\n就可以在 vue3-components 根目录下直接运行`npm run dev`了。\n\n### 3 封装组件\n\n#### 3.1 创建三个文件夹\n\npackages 下建立 3 个文件夹：\n\n- components：存放封装的组件；\n- utils: 存放公共方法；\n- theme-chalk: 存放公共样式；\n\n这三个文件夹下都要执行`pnpm init`，为 package.json 中的 name 起好名字（后面安装需要用这个名字），都是独立包，可以独立发布。\n\n然后在 vue3-components 根目录下安装这三个包，例如：`pnpm install @vue3-components/components -w` -w 是安装在根目录下，安装好后根目录下的 package.json 如下：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/020e465feb504bafb99a2eb4bf271d50~tplv-k3u1fbpfcp-watermark.image?)\n\n#### 3.2 封装组件：\n\n在 packages\\components\\下新建组件文件夹，这里以 v-form 为例：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b94efbb36d7d45e5abd70f1fffe4c5aa~tplv-k3u1fbpfcp-watermark.image?)\n在`v-form.vue`和`v-form.ts`中封装好组件，也可以先随便写点，方便测试，`README.md`中，写好参数说明。index.ts 中：\n\n```js\nimport vform from \"./src/v-form.vue\"\nimport { withInstall } from \"@vue3-components/utils/with-install\"\n\nconst VForm = withInstall(vform)\n\nexport default VForm\n```\n\npackages\\utils\\with-install.ts:\n\n```js\nimport type { App, Plugin } from \"vue\" // 只导入类型，不是值\n\nexport type SFCWithInstall<T> = T & Plugin\n\nexport const withInstall = <T>(comp: T) => {\n  (comp as SFCWithInstall<T>).install = function (app: App) {\n    app.component((comp as any).name, comp)\n  }\n  return comp as SFCWithInstall<T>\n}\n\n```\n\n### 验证封装组件是否生效\n\nplay\\main.ts 全局引入组件:\n\n```js\nimport { createApp } from \"vue\"\nimport App from \"./app.vue\"\nimport ElementPlus from \"element-plus\"\nimport \"element-plus/dist/index.css\"\n\nimport VForm from \"@vue3-components/components/v-form\"\n\nconst app = createApp(App)\napp.use(ElementPlus)\napp.use(VForm)\napp.mount(\"#app\")\n```\n\nplay\\app.vue 中使用组件：\n\n```js\n<template>\n  <div>测试</div>\n  <v-form :elements=\"forms\" @search=\"search\"></v-form>\n</template>\n<script lang=\"ts\" setup>\nconst forms = [\n  {\n    label: \"角色标识\",\n    prop: \"roleCode\",\n    placeholder: \"角色标识\",\n  },\n  {\n    label: \"角色名称\",\n    prop: \"roleName\",\n    placeholder: \"分组名称\",\n  },\n  {\n    label: \"产品\",\n    prop: \"productCode\",\n    placeholder: \"产品\",\n    type: \"select\",\n    optionGroup: true,\n    options: [],\n    style: \"width:100%;\",\n  },\n  {\n    label: \"创建时间\",\n    prop: \"create_at_start,create_at_end\",\n    type: \"datetimerange\",\n    defaultValue: [],\n    startPlaceholder: \"选择开始时间\",\n    endPlaceholder: \"选择结束时间\",\n    valueFormat: \"yyyy-MM-dd HH:mm:ss\",\n    layout: {\n      lg: {\n        span: 8,\n      },\n      md: {\n        span: 12,\n      },\n      sm: {\n        span: 24,\n      },\n      xs: {\n        span: 24,\n      },\n    },\n  },\n]\n\nconst search = (params) => {\n  console.log(params)\n}\n</script>\n\n```\n\n至此，组件封装完成，接下来需要解决的问题是如何抽离公共样式，随着组件库中组件越来越多，一些重复的样式需要抽离出来，抽离完公共样式后，再解决打包和发布问题，发布后才能在其他项目中安装使用。\n","source":"_posts/搭建组件库一.md","raw":"---\ntitle: 0-1搭建业务组件库一\ntags: Vue3\ncategories: Vue3\ncopyright: true\ncomments: true\nabbrlink: 24916\ndate: 2022-10-08 15:42:47\n---\n\n在完成了一个项目，去做另一个项目时，会用到重复的组件，我们可以去打开上一个工程，把组件代码拷过来，再重新调整数据，这样会很麻烦，随着项目的越来越多，也不好定位哪个项目中使用了可复用的组件，所以业务组件库就发挥了它的优势，直接安装好后，按需引入，不用再手搬代码。本篇文章会讲述如何从 0-1 搭建自己的组件库。\n\n技术栈：\n\n- Vue3\n- TypeScript\n- pnpm\n\n### 1 环境准备\n\n在 cmd 终端安装 pnpm\n\n```js\nnpm install pnpm -g\n```\n\n创建工程目录：vue3-components。\n\n用 vscode 打开工程目录，在 vscode 终端执行：\n\n```js\npnpm init\n```\n\n根目录新建.npmrc 文件，写入下面的语句，作用是与项目不直接相关的不会安装在 node modules 下：\n\n```js\nshamefully-hoist = true\n```\n\n在根目录安装依赖：\n\n```js\npnpm install vue@next typescript -D\n```\n\n配置 tsconfig.json:\n\n```js\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"declaration\": false,\n    \"noImplicitAny\": false,\n    \"removeComments\":true,\n    \"esModuleInterop\": true,\n    \"moduleResolution\": \"node\",\n    \"jsx\": \"preserve\",\n    \"noLib\": false,\n    \"target\": \"es2018\",\n    \"sourceMap\": true,\n    \"lib\": [\"esnext\", \"DOM\"],\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true,\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"dist/**\",\n    \"**/__tests__\",\n  ]\n}\n```\n\n根目录新建 pnpm-workspace.yaml 文件，写入：\n\n```js\npackages:\n  - \"packages/**\" # 存放编写的组件\n  - play # 使用组件的地方\n```\n\n### 2 项目创建\n\n在根目录新建 paly 目录，进入 play，执行:`pnpm init`，\n修改 package.json 文件配置：\n\n```js\n{\n  \"name\": \"@vue3-components/play\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"liuhp\",\n  \"license\": \"ISC\"\n}\n```\n\n在 play 目录下安装依赖：\n\n```\npnpm install vite @vitejs/plugin-vue -D\n```\n\n在 play 目录下新建 vite.config.ts, 写入：\n\n```js\nimport { defineConfig } from \"vite\"\nimport vue from \"@vitejs/plugin-vue\"\n\nexport default defineConfig({\n  plugins: [vue()],\n})\n```\n\n新建 index.html,写入：\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n\n<body>\n  <div id=\"app\"></div>\n  <script src=\"/main.ts\" type=\"module\"></script>\n</body>\n</html>\n```\n\n新建 app.vue, 写入：\n\n```js\n<template>\n  <div>测试</div>\n</template>\n```\n\n新建 main.js, 写入：\n\n```js\nimport { createApp } from \"vue\"\nimport App from \"./app.vue\"\n\nconst app = createApp(App)\napp.mount(\"#app\")\n```\n\nmain.ts 此时会提示：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/586e502f911440868c8781bebd87737f~tplv-k3u1fbpfcp-watermark.image?)\n\n所以我们在 vue3-components 根目录下新建`typings`文件夹，在 typings 下新建`vue-shim.d.ts`文件，写入：\n\n```js\ndeclare module \"*.vue\" {\n  import type { DefineComponent } from \"vue\"\n  const component: DefineComponent<{}, {}, any>\n  export default component\n}\n```\n\n此时，main.ts 就不会报错了。\n修改 package.json 里 script 的命令：\n\n```js\n\"scripts\": {\n    \"dev\": \"vite\"\n  },\n```\n\n然后就可以在 play 目录下运行`npm run dev`, 为了能够在 vue3-components 根目录下直接运行 play 项目，需要修改 vue3-components 根目录下的 package.json 里 script 的命令：\n\n```js\n\"scripts\": {\n   \"dev\": \"pnpm -C play dev\"\n },\n```\n\n就可以在 vue3-components 根目录下直接运行`npm run dev`了。\n\n### 3 封装组件\n\n#### 3.1 创建三个文件夹\n\npackages 下建立 3 个文件夹：\n\n- components：存放封装的组件；\n- utils: 存放公共方法；\n- theme-chalk: 存放公共样式；\n\n这三个文件夹下都要执行`pnpm init`，为 package.json 中的 name 起好名字（后面安装需要用这个名字），都是独立包，可以独立发布。\n\n然后在 vue3-components 根目录下安装这三个包，例如：`pnpm install @vue3-components/components -w` -w 是安装在根目录下，安装好后根目录下的 package.json 如下：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/020e465feb504bafb99a2eb4bf271d50~tplv-k3u1fbpfcp-watermark.image?)\n\n#### 3.2 封装组件：\n\n在 packages\\components\\下新建组件文件夹，这里以 v-form 为例：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b94efbb36d7d45e5abd70f1fffe4c5aa~tplv-k3u1fbpfcp-watermark.image?)\n在`v-form.vue`和`v-form.ts`中封装好组件，也可以先随便写点，方便测试，`README.md`中，写好参数说明。index.ts 中：\n\n```js\nimport vform from \"./src/v-form.vue\"\nimport { withInstall } from \"@vue3-components/utils/with-install\"\n\nconst VForm = withInstall(vform)\n\nexport default VForm\n```\n\npackages\\utils\\with-install.ts:\n\n```js\nimport type { App, Plugin } from \"vue\" // 只导入类型，不是值\n\nexport type SFCWithInstall<T> = T & Plugin\n\nexport const withInstall = <T>(comp: T) => {\n  (comp as SFCWithInstall<T>).install = function (app: App) {\n    app.component((comp as any).name, comp)\n  }\n  return comp as SFCWithInstall<T>\n}\n\n```\n\n### 验证封装组件是否生效\n\nplay\\main.ts 全局引入组件:\n\n```js\nimport { createApp } from \"vue\"\nimport App from \"./app.vue\"\nimport ElementPlus from \"element-plus\"\nimport \"element-plus/dist/index.css\"\n\nimport VForm from \"@vue3-components/components/v-form\"\n\nconst app = createApp(App)\napp.use(ElementPlus)\napp.use(VForm)\napp.mount(\"#app\")\n```\n\nplay\\app.vue 中使用组件：\n\n```js\n<template>\n  <div>测试</div>\n  <v-form :elements=\"forms\" @search=\"search\"></v-form>\n</template>\n<script lang=\"ts\" setup>\nconst forms = [\n  {\n    label: \"角色标识\",\n    prop: \"roleCode\",\n    placeholder: \"角色标识\",\n  },\n  {\n    label: \"角色名称\",\n    prop: \"roleName\",\n    placeholder: \"分组名称\",\n  },\n  {\n    label: \"产品\",\n    prop: \"productCode\",\n    placeholder: \"产品\",\n    type: \"select\",\n    optionGroup: true,\n    options: [],\n    style: \"width:100%;\",\n  },\n  {\n    label: \"创建时间\",\n    prop: \"create_at_start,create_at_end\",\n    type: \"datetimerange\",\n    defaultValue: [],\n    startPlaceholder: \"选择开始时间\",\n    endPlaceholder: \"选择结束时间\",\n    valueFormat: \"yyyy-MM-dd HH:mm:ss\",\n    layout: {\n      lg: {\n        span: 8,\n      },\n      md: {\n        span: 12,\n      },\n      sm: {\n        span: 24,\n      },\n      xs: {\n        span: 24,\n      },\n    },\n  },\n]\n\nconst search = (params) => {\n  console.log(params)\n}\n</script>\n\n```\n\n至此，组件封装完成，接下来需要解决的问题是如何抽离公共样式，随着组件库中组件越来越多，一些重复的样式需要抽离出来，抽离完公共样式后，再解决打包和发布问题，发布后才能在其他项目中安装使用。\n","slug":"搭建组件库一","published":1,"updated":"2023-12-20T06:57:18.999Z","_id":"clqdf8hu5003644t18xdrflrz","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>在完成了一个项目，去做另一个项目时，会用到重复的组件，我们可以去打开上一个工程，把组件代码拷过来，再重新调整数据，这样会很麻烦，随着项目的越来越多，也不好定位哪个项目中使用了可复用的组件，所以业务组件库就发挥了它的优势，直接安装好后，按需引入，不用再手搬代码。本篇文章会讲述如何从 0-1 搭建自己的组件库。</p>\n<p>技术栈：</p>\n<ul>\n<li>Vue3</li>\n<li>TypeScript</li>\n<li>pnpm</li>\n</ul>\n<h3 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1 环境准备\"></a>1 环境准备</h3><p>在 cmd 终端安装 pnpm</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pnpm -g</span><br></pre></td></tr></table></figure>\n\n<p>创建工程目录：vue3-components。</p>\n<p>用 vscode 打开工程目录，在 vscode 终端执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm init</span><br></pre></td></tr></table></figure>\n\n<p>根目录新建.npmrc 文件，写入下面的语句，作用是与项目不直接相关的不会安装在 node modules 下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shamefully-hoist = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>在根目录安装依赖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install vue@next typescript -D</span><br></pre></td></tr></table></figure>\n\n<p>配置 tsconfig.json:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;declaration&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;noImplicitAny&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;removeComments&quot;</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;esModuleInterop&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jsx&quot;</span>: <span class=\"string\">&quot;preserve&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;noLib&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;es2018&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lib&quot;</span>: [<span class=\"string\">&quot;esnext&quot;</span>, <span class=\"string\">&quot;DOM&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;allowSyntheticDefaultImports&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;experimentalDecorators&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;resolveJsonModule&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;skipLibCheck&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;exclude&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;node_modules&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;dist/**&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;**/__tests__&quot;</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根目录新建 pnpm-workspace.yaml 文件，写入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packages:</span><br><span class=\"line\">  - &quot;packages/**&quot; # 存放编写的组件</span><br><span class=\"line\">  - play # 使用组件的地方</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-项目创建\"><a href=\"#2-项目创建\" class=\"headerlink\" title=\"2 项目创建\"></a>2 项目创建</h3><p>在根目录新建 paly 目录，进入 play，执行:<code>pnpm init</code>，<br>修改 package.json 文件配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;@vue3-components/play&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;private&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;keywords&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;liuhp&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 play 目录下安装依赖：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install vite <span class=\"meta\">@vitejs</span>/plugin-vue -D</span><br></pre></td></tr></table></figure>\n\n<p>在 play 目录下新建 vite.config.ts, 写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  plugins: [vue()],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建 index.html,写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;script src=<span class=\"string\">&quot;/main.ts&quot;</span> type=<span class=\"string\">&quot;module&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建 app.vue, 写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;测试&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建 main.js, 写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.vue&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App)</span><br><span class=\"line\">app.mount(<span class=\"string\">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>main.ts 此时会提示：</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/586e502f911440868c8781bebd87737f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>所以我们在 vue3-components 根目录下新建<code>typings</code>文件夹，在 typings 下新建<code>vue-shim.d.ts</code>文件，写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&quot;*.vue&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> type &#123; DefineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, any&gt;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，main.ts 就不会报错了。<br>修改 package.json 里 script 的命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;vite&quot;</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在 play 目录下运行<code>npm run dev</code>, 为了能够在 vue3-components 根目录下直接运行 play 项目，需要修改 vue3-components 根目录下的 package.json 里 script 的命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;pnpm -C play dev&quot;</span></span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>就可以在 vue3-components 根目录下直接运行<code>npm run dev</code>了。</p>\n<h3 id=\"3-封装组件\"><a href=\"#3-封装组件\" class=\"headerlink\" title=\"3 封装组件\"></a>3 封装组件</h3><h4 id=\"3-1-创建三个文件夹\"><a href=\"#3-1-创建三个文件夹\" class=\"headerlink\" title=\"3.1 创建三个文件夹\"></a>3.1 创建三个文件夹</h4><p>packages 下建立 3 个文件夹：</p>\n<ul>\n<li>components：存放封装的组件；</li>\n<li>utils: 存放公共方法；</li>\n<li>theme-chalk: 存放公共样式；</li>\n</ul>\n<p>这三个文件夹下都要执行<code>pnpm init</code>，为 package.json 中的 name 起好名字（后面安装需要用这个名字），都是独立包，可以独立发布。</p>\n<p>然后在 vue3-components 根目录下安装这三个包，例如：<code>pnpm install @vue3-components/components -w</code> -w 是安装在根目录下，安装好后根目录下的 package.json 如下：</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/020e465feb504bafb99a2eb4bf271d50~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h4 id=\"3-2-封装组件：\"><a href=\"#3-2-封装组件：\" class=\"headerlink\" title=\"3.2 封装组件：\"></a>3.2 封装组件：</h4><p>在 packages\\components\\下新建组件文件夹，这里以 v-form 为例：</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b94efbb36d7d45e5abd70f1fffe4c5aa~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>在<code>v-form.vue</code>和<code>v-form.ts</code>中封装好组件，也可以先随便写点，方便测试，<code>README.md</code>中，写好参数说明。index.ts 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> vform <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/v-form.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withInstall &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue3-components/utils/with-install&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> VForm = withInstall(vform)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> VForm</span><br></pre></td></tr></table></figure>\n\n<p>packages\\utils\\with-install.ts:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> type &#123; App, Plugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span> <span class=\"comment\">// 只导入类型，不是值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> type SFCWithInstall&lt;T&gt; = T &amp; Plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> withInstall = &lt;T&gt;<span class=\"function\">(<span class=\"params\">comp: T</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  (comp <span class=\"keyword\">as</span> SFCWithInstall&lt;T&gt;).install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">app: App</span>) </span>&#123;</span><br><span class=\"line\">    app.component((comp <span class=\"keyword\">as</span> any).name, comp)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> comp <span class=\"keyword\">as</span> SFCWithInstall&lt;T&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证封装组件是否生效\"><a href=\"#验证封装组件是否生效\" class=\"headerlink\" title=\"验证封装组件是否生效\"></a>验证封装组件是否生效</h3><p>play\\main.ts 全局引入组件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementPlus <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;element-plus/dist/index.css&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> VForm <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue3-components/components/v-form&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App)</span><br><span class=\"line\">app.use(ElementPlus)</span><br><span class=\"line\">app.use(VForm)</span><br><span class=\"line\">app.mount(<span class=\"string\">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>play\\app.vue 中使用组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;测试&lt;/div&gt;</span><br><span class=\"line\">  &lt;v-form :elements=<span class=\"string\">&quot;forms&quot;</span> @search=<span class=\"string\">&quot;search&quot;</span>&gt;&lt;/v-form&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span> setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">const</span> forms = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">&quot;角色标识&quot;</span>,</span><br><span class=\"line\">    prop: <span class=\"string\">&quot;roleCode&quot;</span>,</span><br><span class=\"line\">    placeholder: <span class=\"string\">&quot;角色标识&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">&quot;角色名称&quot;</span>,</span><br><span class=\"line\">    prop: <span class=\"string\">&quot;roleName&quot;</span>,</span><br><span class=\"line\">    placeholder: <span class=\"string\">&quot;分组名称&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">&quot;产品&quot;</span>,</span><br><span class=\"line\">    prop: <span class=\"string\">&quot;productCode&quot;</span>,</span><br><span class=\"line\">    placeholder: <span class=\"string\">&quot;产品&quot;</span>,</span><br><span class=\"line\">    type: <span class=\"string\">&quot;select&quot;</span>,</span><br><span class=\"line\">    optionGroup: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    options: [],</span><br><span class=\"line\">    style: <span class=\"string\">&quot;width:100%;&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">&quot;创建时间&quot;</span>,</span><br><span class=\"line\">    prop: <span class=\"string\">&quot;create_at_start,create_at_end&quot;</span>,</span><br><span class=\"line\">    type: <span class=\"string\">&quot;datetimerange&quot;</span>,</span><br><span class=\"line\">    defaultValue: [],</span><br><span class=\"line\">    startPlaceholder: <span class=\"string\">&quot;选择开始时间&quot;</span>,</span><br><span class=\"line\">    endPlaceholder: <span class=\"string\">&quot;选择结束时间&quot;</span>,</span><br><span class=\"line\">    valueFormat: <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,</span><br><span class=\"line\">    layout: &#123;</span><br><span class=\"line\">      lg: &#123;</span><br><span class=\"line\">        span: <span class=\"number\">8</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      md: &#123;</span><br><span class=\"line\">        span: <span class=\"number\">12</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sm: &#123;</span><br><span class=\"line\">        span: <span class=\"number\">24</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      xs: &#123;</span><br><span class=\"line\">        span: <span class=\"number\">24</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> search = <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>至此，组件封装完成，接下来需要解决的问题是如何抽离公共样式，随着组件库中组件越来越多，一些重复的样式需要抽离出来，抽离完公共样式后，再解决打包和发布问题，发布后才能在其他项目中安装使用。</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>在完成了一个项目，去做另一个项目时，会用到重复的组件，我们可以去打开上一个工程，把组件代码拷过来，再重新调整数据，这样会很麻烦，随着项目的越来越多，也不好定位哪个项目中使用了可复用的组件，所以业务组件库就发挥了它的优势，直接安装好后，按需引入，不用再手搬代码。本篇文章会讲述如何从 0-1 搭建自己的组件库。</p>\n<p>技术栈：</p>\n<ul>\n<li>Vue3</li>\n<li>TypeScript</li>\n<li>pnpm</li>\n</ul>\n<h3 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1 环境准备\"></a>1 环境准备</h3><p>在 cmd 终端安装 pnpm</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pnpm -g</span><br></pre></td></tr></table></figure>\n\n<p>创建工程目录：vue3-components。</p>\n<p>用 vscode 打开工程目录，在 vscode 终端执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm init</span><br></pre></td></tr></table></figure>\n\n<p>根目录新建.npmrc 文件，写入下面的语句，作用是与项目不直接相关的不会安装在 node modules 下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shamefully-hoist = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>在根目录安装依赖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install vue@next typescript -D</span><br></pre></td></tr></table></figure>\n\n<p>配置 tsconfig.json:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;declaration&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;noImplicitAny&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;removeComments&quot;</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;esModuleInterop&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jsx&quot;</span>: <span class=\"string\">&quot;preserve&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;noLib&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;es2018&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lib&quot;</span>: [<span class=\"string\">&quot;esnext&quot;</span>, <span class=\"string\">&quot;DOM&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;allowSyntheticDefaultImports&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;experimentalDecorators&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;resolveJsonModule&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;skipLibCheck&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;exclude&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;node_modules&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;dist/**&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;**/__tests__&quot;</span>,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根目录新建 pnpm-workspace.yaml 文件，写入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packages:</span><br><span class=\"line\">  - &quot;packages/**&quot; # 存放编写的组件</span><br><span class=\"line\">  - play # 使用组件的地方</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-项目创建\"><a href=\"#2-项目创建\" class=\"headerlink\" title=\"2 项目创建\"></a>2 项目创建</h3><p>在根目录新建 paly 目录，进入 play，执行:<code>pnpm init</code>，<br>修改 package.json 文件配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;@vue3-components/play&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;private&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;keywords&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;liuhp&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 play 目录下安装依赖：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install vite <span class=\"meta\">@vitejs</span>/plugin-vue -D</span><br></pre></td></tr></table></figure>\n\n<p>在 play 目录下新建 vite.config.ts, 写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> defineConfig(&#123;</span><br><span class=\"line\">  plugins: [vue()],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建 index.html,写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;script src=<span class=\"string\">&quot;/main.ts&quot;</span> type=<span class=\"string\">&quot;module&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建 app.vue, 写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;测试&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建 main.js, 写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.vue&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App)</span><br><span class=\"line\">app.mount(<span class=\"string\">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>main.ts 此时会提示：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/586e502f911440868c8781bebd87737f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>所以我们在 vue3-components 根目录下新建<code>typings</code>文件夹，在 typings 下新建<code>vue-shim.d.ts</code>文件，写入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"built_in\">module</span> <span class=\"string\">&quot;*.vue&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> type &#123; DefineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, any&gt;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，main.ts 就不会报错了。<br>修改 package.json 里 script 的命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;vite&quot;</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在 play 目录下运行<code>npm run dev</code>, 为了能够在 vue3-components 根目录下直接运行 play 项目，需要修改 vue3-components 根目录下的 package.json 里 script 的命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;pnpm -C play dev&quot;</span></span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>就可以在 vue3-components 根目录下直接运行<code>npm run dev</code>了。</p>\n<h3 id=\"3-封装组件\"><a href=\"#3-封装组件\" class=\"headerlink\" title=\"3 封装组件\"></a>3 封装组件</h3><h4 id=\"3-1-创建三个文件夹\"><a href=\"#3-1-创建三个文件夹\" class=\"headerlink\" title=\"3.1 创建三个文件夹\"></a>3.1 创建三个文件夹</h4><p>packages 下建立 3 个文件夹：</p>\n<ul>\n<li>components：存放封装的组件；</li>\n<li>utils: 存放公共方法；</li>\n<li>theme-chalk: 存放公共样式；</li>\n</ul>\n<p>这三个文件夹下都要执行<code>pnpm init</code>，为 package.json 中的 name 起好名字（后面安装需要用这个名字），都是独立包，可以独立发布。</p>\n<p>然后在 vue3-components 根目录下安装这三个包，例如：<code>pnpm install @vue3-components/components -w</code> -w 是安装在根目录下，安装好后根目录下的 package.json 如下：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/020e465feb504bafb99a2eb4bf271d50~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h4 id=\"3-2-封装组件：\"><a href=\"#3-2-封装组件：\" class=\"headerlink\" title=\"3.2 封装组件：\"></a>3.2 封装组件：</h4><p>在 packages\\components\\下新建组件文件夹，这里以 v-form 为例：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b94efbb36d7d45e5abd70f1fffe4c5aa~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>在<code>v-form.vue</code>和<code>v-form.ts</code>中封装好组件，也可以先随便写点，方便测试，<code>README.md</code>中，写好参数说明。index.ts 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> vform <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/v-form.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withInstall &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue3-components/utils/with-install&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> VForm = withInstall(vform)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> VForm</span><br></pre></td></tr></table></figure>\n\n<p>packages\\utils\\with-install.ts:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> type &#123; App, Plugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span> <span class=\"comment\">// 只导入类型，不是值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> type SFCWithInstall&lt;T&gt; = T &amp; Plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> withInstall = &lt;T&gt;<span class=\"function\">(<span class=\"params\">comp: T</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  (comp <span class=\"keyword\">as</span> SFCWithInstall&lt;T&gt;).install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">app: App</span>) </span>&#123;</span><br><span class=\"line\">    app.component((comp <span class=\"keyword\">as</span> any).name, comp)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> comp <span class=\"keyword\">as</span> SFCWithInstall&lt;T&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证封装组件是否生效\"><a href=\"#验证封装组件是否生效\" class=\"headerlink\" title=\"验证封装组件是否生效\"></a>验证封装组件是否生效</h3><p>play\\main.ts 全局引入组件:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementPlus <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;element-plus/dist/index.css&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> VForm <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue3-components/components/v-form&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App)</span><br><span class=\"line\">app.use(ElementPlus)</span><br><span class=\"line\">app.use(VForm)</span><br><span class=\"line\">app.mount(<span class=\"string\">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>play\\app.vue 中使用组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;测试&lt;/div&gt;</span><br><span class=\"line\">  &lt;v-form :elements=<span class=\"string\">&quot;forms&quot;</span> @search=<span class=\"string\">&quot;search&quot;</span>&gt;&lt;/v-form&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span> setup&gt;</span><br><span class=\"line\"><span class=\"keyword\">const</span> forms = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">&quot;角色标识&quot;</span>,</span><br><span class=\"line\">    prop: <span class=\"string\">&quot;roleCode&quot;</span>,</span><br><span class=\"line\">    placeholder: <span class=\"string\">&quot;角色标识&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">&quot;角色名称&quot;</span>,</span><br><span class=\"line\">    prop: <span class=\"string\">&quot;roleName&quot;</span>,</span><br><span class=\"line\">    placeholder: <span class=\"string\">&quot;分组名称&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">&quot;产品&quot;</span>,</span><br><span class=\"line\">    prop: <span class=\"string\">&quot;productCode&quot;</span>,</span><br><span class=\"line\">    placeholder: <span class=\"string\">&quot;产品&quot;</span>,</span><br><span class=\"line\">    type: <span class=\"string\">&quot;select&quot;</span>,</span><br><span class=\"line\">    optionGroup: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    options: [],</span><br><span class=\"line\">    style: <span class=\"string\">&quot;width:100%;&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">&quot;创建时间&quot;</span>,</span><br><span class=\"line\">    prop: <span class=\"string\">&quot;create_at_start,create_at_end&quot;</span>,</span><br><span class=\"line\">    type: <span class=\"string\">&quot;datetimerange&quot;</span>,</span><br><span class=\"line\">    defaultValue: [],</span><br><span class=\"line\">    startPlaceholder: <span class=\"string\">&quot;选择开始时间&quot;</span>,</span><br><span class=\"line\">    endPlaceholder: <span class=\"string\">&quot;选择结束时间&quot;</span>,</span><br><span class=\"line\">    valueFormat: <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,</span><br><span class=\"line\">    layout: &#123;</span><br><span class=\"line\">      lg: &#123;</span><br><span class=\"line\">        span: <span class=\"number\">8</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      md: &#123;</span><br><span class=\"line\">        span: <span class=\"number\">12</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sm: &#123;</span><br><span class=\"line\">        span: <span class=\"number\">24</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      xs: &#123;</span><br><span class=\"line\">        span: <span class=\"number\">24</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> search = <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>至此，组件封装完成，接下来需要解决的问题是如何抽离公共样式，随着组件库中组件越来越多，一些重复的样式需要抽离出来，抽离完公共样式后，再解决打包和发布问题，发布后才能在其他项目中安装使用。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/586e502f911440868c8781bebd87737f~tplv-k3u1fbpfcp-watermark.image","popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:18 GMT+0800 (中国标准时间)","title":"0-1搭建业务组件库一","path":"posts/24916/","eyeCatchImage":"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/586e502f911440868c8781bebd87737f~tplv-k3u1fbpfcp-watermark.image","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-10-08T07:42:47.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-10-08T07:42:47.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue3","tags":["Vue3"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5669},{"title":"组件通信","copyright":true,"comments":1,"abbrlink":42732,"date":"2022-04-13T02:28:11.000Z","_content":"\n### 父子组件通信\n- 通过 props 传递\n- 通过 $emit 触发自定义事件\n- 使用 ref\n\n### 祖先子孙组件通信\n\n- provide 与 inject\n- $attrs和 $listeners\n\n### 兄弟组件\n- EventBus\n- $parent 或$root\n\n### 复杂关系的组件\nVuex","source":"_posts/组件通信.md","raw":"---\ntitle: 组件通信\ntags: Vue\ncategories: Vue\ncopyright: true\ncomments: true\nabbrlink: 42732\ndate: 2022-04-13 10:28:11\n---\n\n### 父子组件通信\n- 通过 props 传递\n- 通过 $emit 触发自定义事件\n- 使用 ref\n\n### 祖先子孙组件通信\n\n- provide 与 inject\n- $attrs和 $listeners\n\n### 兄弟组件\n- EventBus\n- $parent 或$root\n\n### 复杂关系的组件\nVuex","slug":"组件通信","published":1,"updated":"2022-07-13T01:47:22.004Z","layout":"post","photos":[],"link":"","_id":"clqdf8hu6003944t12yvhcp4q","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><ul>\n<li>通过 props 传递</li>\n<li>通过 $emit 触发自定义事件</li>\n<li>使用 ref</li>\n</ul>\n<h3 id=\"祖先子孙组件通信\"><a href=\"#祖先子孙组件通信\" class=\"headerlink\" title=\"祖先子孙组件通信\"></a>祖先子孙组件通信</h3><ul>\n<li>provide 与 inject</li>\n<li>$attrs和 $listeners</li>\n</ul>\n<h3 id=\"兄弟组件\"><a href=\"#兄弟组件\" class=\"headerlink\" title=\"兄弟组件\"></a>兄弟组件</h3><ul>\n<li>EventBus</li>\n<li>$parent 或$root</li>\n</ul>\n<h3 id=\"复杂关系的组件\"><a href=\"#复杂关系的组件\" class=\"headerlink\" title=\"复杂关系的组件\"></a>复杂关系的组件</h3><p>Vuex</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><ul>\n<li>通过 props 传递</li>\n<li>通过 $emit 触发自定义事件</li>\n<li>使用 ref</li>\n</ul>\n<h3 id=\"祖先子孙组件通信\"><a href=\"#祖先子孙组件通信\" class=\"headerlink\" title=\"祖先子孙组件通信\"></a>祖先子孙组件通信</h3><ul>\n<li>provide 与 inject</li>\n<li>$attrs和 $listeners</li>\n</ul>\n<h3 id=\"兄弟组件\"><a href=\"#兄弟组件\" class=\"headerlink\" title=\"兄弟组件\"></a>兄弟组件</h3><ul>\n<li>EventBus</li>\n<li>$parent 或$root</li>\n</ul>\n<h3 id=\"复杂关系的组件\"><a href=\"#复杂关系的组件\" class=\"headerlink\" title=\"复杂关系的组件\"></a>复杂关系的组件</h3><p>Vuex</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:22 GMT+0800 (中国标准时间)","title":"组件通信","path":"posts/42732/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-04-13T02:28:11.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-04-13T02:28:11.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Vue","tags":["Vue"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":109},{"title":"JS节流和防抖","copyright":true,"comments":1,"abbrlink":42062,"date":"2022-03-31T04:37:24.000Z","_content":"\n节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效\n防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时\n### 节流\n```javascript \n// 时间戳\nfunction throttled1(fn, delay = 500) {\n    let oldtime = Date.now()\n    return function (...args) {\n        let newtime = Date.now()\n        if (newtime - oldtime >= delay) {\n            fn.apply(null, args)\n            oldtime = Date.now()\n        }\n    }\n}\n\n// 定时器\nfunction throttled2(fn, delay = 500) {\n    let timer = null\n    return function (...args) {\n        if (!timer) {\n            timer = setTimeout(() => {\n                fn.apply(this, args)\n                timer = null\n            }, delay);\n        }\n    }\n}\n\n// 时间戳与定时器结合更加准确\nfunction throttled3(fn, delay) {\n  let timer = null\n  let startTime = Date.now()\n  return function(){\n    let context = this\n    let args = arguments\n    let curentTime = Date.now()\n    let remainTime = delay - (curentTime - startTime)\n    clearTimeout(timer)\n    if (remainTime <= 0) {\n      fn.apply(context, args)\n      startTime = Date.now()\n    } else (\n      timer = setTimeout(fn, remainTime)\n    )\n  }\n}\n```\n\n### 防抖\n\n```javascript\n// 简单版本\nfunction debounce(fn, wait) {\n  let timer\n  \n  return function() {\n    let context = this\n    let args = arguments\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      fn.apply(context, args)\n    }, wait)\n  }\n}\n\n// 防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：\nfunction debounce(func, wait, immediate) {\n\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout); // timeout 不为null\n        if (immediate) {\n            let callNow = !timeout; // 第一次会立即执行，以后只有事件执行后才会再次触发\n            timeout = setTimeout(function () {\n                timeout = null;\n            }, wait)\n            if (callNow) {\n                func.apply(context, args)\n            }\n        }\n        else {\n            timeout = setTimeout(function () {\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n\n```\n\n\n### 适用场景\n1. 防抖在连续的事件，只需触发一次回调的场景有：\n\n- 搜索框搜索输入。只需用户最后一次输入完，再发送请求\n- 手机号、邮箱验证输入检测\n- 窗口大小resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。\n\n2. 节流在间隔一段时间执行一次回调的场景有：\n\n- 滚动加载，加载更多或滚到底部监听\n- 搜索框，搜索联想功能","source":"_posts/节流防抖.md","raw":"---\ntitle: JS节流和防抖\ntags:\n  - JavaScript\n  - 面试\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 42062\ndate: 2022-03-31 12:37:24\n---\n\n节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效\n防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时\n### 节流\n```javascript \n// 时间戳\nfunction throttled1(fn, delay = 500) {\n    let oldtime = Date.now()\n    return function (...args) {\n        let newtime = Date.now()\n        if (newtime - oldtime >= delay) {\n            fn.apply(null, args)\n            oldtime = Date.now()\n        }\n    }\n}\n\n// 定时器\nfunction throttled2(fn, delay = 500) {\n    let timer = null\n    return function (...args) {\n        if (!timer) {\n            timer = setTimeout(() => {\n                fn.apply(this, args)\n                timer = null\n            }, delay);\n        }\n    }\n}\n\n// 时间戳与定时器结合更加准确\nfunction throttled3(fn, delay) {\n  let timer = null\n  let startTime = Date.now()\n  return function(){\n    let context = this\n    let args = arguments\n    let curentTime = Date.now()\n    let remainTime = delay - (curentTime - startTime)\n    clearTimeout(timer)\n    if (remainTime <= 0) {\n      fn.apply(context, args)\n      startTime = Date.now()\n    } else (\n      timer = setTimeout(fn, remainTime)\n    )\n  }\n}\n```\n\n### 防抖\n\n```javascript\n// 简单版本\nfunction debounce(fn, wait) {\n  let timer\n  \n  return function() {\n    let context = this\n    let args = arguments\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      fn.apply(context, args)\n    }, wait)\n  }\n}\n\n// 防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：\nfunction debounce(func, wait, immediate) {\n\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout); // timeout 不为null\n        if (immediate) {\n            let callNow = !timeout; // 第一次会立即执行，以后只有事件执行后才会再次触发\n            timeout = setTimeout(function () {\n                timeout = null;\n            }, wait)\n            if (callNow) {\n                func.apply(context, args)\n            }\n        }\n        else {\n            timeout = setTimeout(function () {\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n\n```\n\n\n### 适用场景\n1. 防抖在连续的事件，只需触发一次回调的场景有：\n\n- 搜索框搜索输入。只需用户最后一次输入完，再发送请求\n- 手机号、邮箱验证输入检测\n- 窗口大小resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。\n\n2. 节流在间隔一段时间执行一次回调的场景有：\n\n- 滚动加载，加载更多或滚到底部监听\n- 搜索框，搜索联想功能","slug":"节流防抖","published":1,"updated":"2022-07-13T01:47:22.012Z","layout":"post","photos":[],"link":"","_id":"clqdf8hu7003e44t14cwv56u0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间戳</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled1</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldtime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newtime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"literal\">null</span>, args)</span><br><span class=\"line\">            oldtime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled2</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fn.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 时间戳与定时器结合更加准确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled3</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> startTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> curentTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remainTime = delay - (curentTime - startTime)</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remainTime &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      fn.apply(context, args)</span><br><span class=\"line\">      startTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> (</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(fn, remainTime)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单版本</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(context, args)</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout); <span class=\"comment\">// timeout 不为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> callNow = !timeout; <span class=\"comment\">// 第一次会立即执行，以后只有事件执行后才会再次触发</span></span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ol>\n<li>防抖在连续的事件，只需触发一次回调的场景有：</li>\n</ol>\n<ul>\n<li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li>\n<li>手机号、邮箱验证输入检测</li>\n<li>窗口大小resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li>\n</ul>\n<ol start=\"2\">\n<li>节流在间隔一段时间执行一次回调的场景有：</li>\n</ol>\n<ul>\n<li>滚动加载，加载更多或滚到底部监听</li>\n<li>搜索框，搜索联想功能</li>\n</ul>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 时间戳</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled1</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldtime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newtime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class=\"line\">            fn.apply(<span class=\"literal\">null</span>, args)</span><br><span class=\"line\">            oldtime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled2</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fn.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 时间戳与定时器结合更加准确</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttled3</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> startTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> curentTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remainTime = delay - (curentTime - startTime)</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remainTime &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      fn.apply(context, args)</span><br><span class=\"line\">      startTime = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> (</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(fn, remainTime)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单版本</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(context, args)</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout); <span class=\"comment\">// timeout 不为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> callNow = !timeout; <span class=\"comment\">// 第一次会立即执行，以后只有事件执行后才会再次触发</span></span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                func.apply(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ol>\n<li>防抖在连续的事件，只需触发一次回调的场景有：</li>\n</ol>\n<ul>\n<li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li>\n<li>手机号、邮箱验证输入检测</li>\n<li>窗口大小resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li>\n</ul>\n<ol start=\"2\">\n<li>节流在间隔一段时间执行一次回调的场景有：</li>\n</ol>\n<ul>\n<li>滚动加载，加载更多或滚到底部监听</li>\n<li>搜索框，搜索联想功能</li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:22 GMT+0800 (中国标准时间)","title":"JS节流和防抖","path":"posts/42062/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-03-31T04:37:24.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-03-31T04:37:24.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JavaScript","面试"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1759},{"title":"高刷屏对requestAnimationFrame和setTimeout的影响","copyright":true,"comments":1,"abbrlink":59071,"date":"2021-10-23T03:48:09.000Z","_content":"\n背景：\nsetInterval和setTimeout实现的定时器在鸿蒙系统上会出现掉帧卡顿现象，比如倒计时中，10，9间隔长，8，7间隔又很短。\n\n解决办法：用requestAnimationFrame实现定时功能。\n\n### 高刷屏对setTimeout的影响\n在低端机中，用setTimeout实现的动画可能会出现丢帧卡顿现象主要原因有以下两点：\n1. setTimeout回调执行时间不确定。因为setTimeout的回调会放在异步队列中，当主线程的任务执行完成后，才会检查异步队列中是否有要执行的任务，所以setTimeout执行的时间会比设定时间稍晚一些。\n2. 刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。\n以上两种情况会是setTimeout的执行步调和屏幕刷新时间步调不一致，从而引起丢帧卡顿现象。\n\n而在高刷屏下，因为屏幕刷新率更高，setTimeout执行的结果会很快被渲染在屏幕上，感觉会更丝滑，所以丢帧卡顿现象会削弱。\n\n### 高刷屏对requestAnimationFrame的影响\nrequestAnimationFrame在屏幕刷新的时候执行，所以和屏幕刷新步调一致，用它实现的动画就会更丝滑，不会卡顿。\n\n但感觉会耗性能一些，因为一分钟屏幕刷新多少次函数就执行多少次。\n\n\n高刷屏下： \n1. PC端：经查阅使用了165hz的显示器，但通过requestAnimationFrame 计算出来的FPS依然只有30-60fps，这只是偶现，刷新率和 requestAnimationFrame 存在不同步问题；谷歌浏览器是支持高刷屏的。\n2. 移动端：微信固定写死60Hz,其他app也不支持高刷，只有少数游戏app支持；\n","source":"_posts/高刷屏对requestAnimationFrame和setTimeout的影响.md","raw":"---\ntitle: 高刷屏对requestAnimationFrame和setTimeout的影响\ntags: JavaScript\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 59071\ndate: 2021-10-23 11:48:09\n---\n\n背景：\nsetInterval和setTimeout实现的定时器在鸿蒙系统上会出现掉帧卡顿现象，比如倒计时中，10，9间隔长，8，7间隔又很短。\n\n解决办法：用requestAnimationFrame实现定时功能。\n\n### 高刷屏对setTimeout的影响\n在低端机中，用setTimeout实现的动画可能会出现丢帧卡顿现象主要原因有以下两点：\n1. setTimeout回调执行时间不确定。因为setTimeout的回调会放在异步队列中，当主线程的任务执行完成后，才会检查异步队列中是否有要执行的任务，所以setTimeout执行的时间会比设定时间稍晚一些。\n2. 刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。\n以上两种情况会是setTimeout的执行步调和屏幕刷新时间步调不一致，从而引起丢帧卡顿现象。\n\n而在高刷屏下，因为屏幕刷新率更高，setTimeout执行的结果会很快被渲染在屏幕上，感觉会更丝滑，所以丢帧卡顿现象会削弱。\n\n### 高刷屏对requestAnimationFrame的影响\nrequestAnimationFrame在屏幕刷新的时候执行，所以和屏幕刷新步调一致，用它实现的动画就会更丝滑，不会卡顿。\n\n但感觉会耗性能一些，因为一分钟屏幕刷新多少次函数就执行多少次。\n\n\n高刷屏下： \n1. PC端：经查阅使用了165hz的显示器，但通过requestAnimationFrame 计算出来的FPS依然只有30-60fps，这只是偶现，刷新率和 requestAnimationFrame 存在不同步问题；谷歌浏览器是支持高刷屏的。\n2. 移动端：微信固定写死60Hz,其他app也不支持高刷，只有少数游戏app支持；\n","slug":"高刷屏对requestAnimationFrame和setTimeout的影响","published":1,"updated":"2022-07-13T01:47:22.014Z","layout":"post","photos":[],"link":"","_id":"clqdf8huo004o44t1201c5obj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>背景：<br>setInterval和setTimeout实现的定时器在鸿蒙系统上会出现掉帧卡顿现象，比如倒计时中，10，9间隔长，8，7间隔又很短。</p>\n<p>解决办法：用requestAnimationFrame实现定时功能。</p>\n<h3 id=\"高刷屏对setTimeout的影响\"><a href=\"#高刷屏对setTimeout的影响\" class=\"headerlink\" title=\"高刷屏对setTimeout的影响\"></a>高刷屏对setTimeout的影响</h3><p>在低端机中，用setTimeout实现的动画可能会出现丢帧卡顿现象主要原因有以下两点：</p>\n<ol>\n<li>setTimeout回调执行时间不确定。因为setTimeout的回调会放在异步队列中，当主线程的任务执行完成后，才会检查异步队列中是否有要执行的任务，所以setTimeout执行的时间会比设定时间稍晚一些。</li>\n<li>刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。<br>以上两种情况会是setTimeout的执行步调和屏幕刷新时间步调不一致，从而引起丢帧卡顿现象。</li>\n</ol>\n<p>而在高刷屏下，因为屏幕刷新率更高，setTimeout执行的结果会很快被渲染在屏幕上，感觉会更丝滑，所以丢帧卡顿现象会削弱。</p>\n<h3 id=\"高刷屏对requestAnimationFrame的影响\"><a href=\"#高刷屏对requestAnimationFrame的影响\" class=\"headerlink\" title=\"高刷屏对requestAnimationFrame的影响\"></a>高刷屏对requestAnimationFrame的影响</h3><p>requestAnimationFrame在屏幕刷新的时候执行，所以和屏幕刷新步调一致，用它实现的动画就会更丝滑，不会卡顿。</p>\n<p>但感觉会耗性能一些，因为一分钟屏幕刷新多少次函数就执行多少次。</p>\n<p>高刷屏下： </p>\n<ol>\n<li>PC端：经查阅使用了165hz的显示器，但通过requestAnimationFrame 计算出来的FPS依然只有30-60fps，这只是偶现，刷新率和 requestAnimationFrame 存在不同步问题；谷歌浏览器是支持高刷屏的。</li>\n<li>移动端：微信固定写死60Hz,其他app也不支持高刷，只有少数游戏app支持；</li>\n</ol>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<p>背景：<br>setInterval和setTimeout实现的定时器在鸿蒙系统上会出现掉帧卡顿现象，比如倒计时中，10，9间隔长，8，7间隔又很短。</p>\n<p>解决办法：用requestAnimationFrame实现定时功能。</p>\n<h3 id=\"高刷屏对setTimeout的影响\"><a href=\"#高刷屏对setTimeout的影响\" class=\"headerlink\" title=\"高刷屏对setTimeout的影响\"></a>高刷屏对setTimeout的影响</h3><p>在低端机中，用setTimeout实现的动画可能会出现丢帧卡顿现象主要原因有以下两点：</p>\n<ol>\n<li>setTimeout回调执行时间不确定。因为setTimeout的回调会放在异步队列中，当主线程的任务执行完成后，才会检查异步队列中是否有要执行的任务，所以setTimeout执行的时间会比设定时间稍晚一些。</li>\n<li>刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。<br>以上两种情况会是setTimeout的执行步调和屏幕刷新时间步调不一致，从而引起丢帧卡顿现象。</li>\n</ol>\n<p>而在高刷屏下，因为屏幕刷新率更高，setTimeout执行的结果会很快被渲染在屏幕上，感觉会更丝滑，所以丢帧卡顿现象会削弱。</p>\n<h3 id=\"高刷屏对requestAnimationFrame的影响\"><a href=\"#高刷屏对requestAnimationFrame的影响\" class=\"headerlink\" title=\"高刷屏对requestAnimationFrame的影响\"></a>高刷屏对requestAnimationFrame的影响</h3><p>requestAnimationFrame在屏幕刷新的时候执行，所以和屏幕刷新步调一致，用它实现的动画就会更丝滑，不会卡顿。</p>\n<p>但感觉会耗性能一些，因为一分钟屏幕刷新多少次函数就执行多少次。</p>\n<p>高刷屏下： </p>\n<ol>\n<li>PC端：经查阅使用了165hz的显示器，但通过requestAnimationFrame 计算出来的FPS依然只有30-60fps，这只是偶现，刷新率和 requestAnimationFrame 存在不同步问题；谷歌浏览器是支持高刷屏的。</li>\n<li>移动端：微信固定写死60Hz,其他app也不支持高刷，只有少数游戏app支持；</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:22 GMT+0800 (中国标准时间)","title":"高刷屏对requestAnimationFrame和setTimeout的影响","path":"posts/59071/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-10-23T03:48:09.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-10-23T03:48:09.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JavaScript"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":741},{"title":"继承的6种方式","copyright":true,"comments":1,"abbrlink":22769,"date":"2022-04-18T09:29:15.000Z","_content":"\n### 原型、构造函数、实例对象的关系\n\n构造函数能够生成实例对象，实例对象拥有构造函数里的属性和方法，并继承构造函数原型上的属性及方法。\n\n<div align=center>\n  <img src=\"1.jpeg\" width = 65%>\n</div>\n\n### 继承方式\n#### 原型链继承\n子类原型等于父类构造函数的实例\n\n特点：\n子类实例能够继成父类及父类原型中属性和方法\n\n问题：\n1. 如果父类构造函数中有引用类型的属性，会导致通过子类创建的所有实例都共享该属性，其中一个实例修改了这个引用值，其他实例的这个属性都会同步变化，造成数据污染。\n2. 子类构造函数无法向父类构造函数传值\n\n\n```javascript\n// 声明父类构造函数\nfunction Super(){\n  this.name = 'super'\n  this.arr = [1,2,3]\n}\n// 声明父类原型属性\nSuper.prototype.getName = function(){\n  console.log(this.name)\n}\n\n// 子类构造函数\nfunction Sub(){\n  this.age = 18\n}\n// 子类原型指向父类实例\nSub.prototype = new Super()\n\nconst sub1 = new Sub()\nconst sub2 = new Sub()\n// 修改sub1的引用值会影响sub2的引用值\nsub.arr.push(4)\nconsole.log(sub1.name, sub1.arr) // super [ 1, 2, 3, 4 ]\nconsole.log(sub2.name, sub2.arr) // super [ 1, 2, 3, 4 ]\n```\n#### 借用构造函数继承\n使用call或者apply在子类构造函数中调用父类构造函数\n\n特点：子类构造函数能够向父类构造函数中传值，继承了父类构造函数的属性和方法，但无法继承父类原型上的属性和方法\n\n问题：\n1. 只能在子类构造函数中定义方法，因此不能重用函数\n2. 子类不能访问父类原型上定义的方法\n\n```javascript\n// 声明父类构造函数\nfunction Super(name){\n  this.name = name\n}\n// 声明父类原型属性\nSuper.prototype.getName = function(){\n  console.log(this.name)\n}\n\n// 子类构造函数\nfunction Sub(name){\n  Super.call(this, name)\n  this.age = 18\n}\n\nconst sub1 = new Sub('lili')\nconsole.log(sub1.name, sub1.age)\n\n```\n\n#### 组合继承（伪经典继承）\n\n特点：解决了上述两种的缺陷；\n\n问题：父类构造函数会执行两次\n\n```javascript\n// 声明父类构造函数\nfunction Super(name){\n  this.name = name\n  this.arr = [1,2,3]\n}\n// 声明父类原型属性\nSuper.prototype.getName = function(){\n  console.log(this.name)\n}\n\n// 子类构造函数\nfunction Sub(name){\n  Super.call(this, name)\n  this.age = 18\n}\n\nSub.prototype = new Super()\n\nconst sub1 = new Sub('sub1')\nconst sub2 = new Sub('sub2')\n// 修改sub1实例的引用值，不会影响到sub2\nsub1.arr.push(4)\n\nconsole.log(sub1.name, sub1.arr) // sub1 [ 1, 2, 3, 4 ]\nconsole.log(sub2.name, sub2.arr) // sub2 [ 1, 2, 3 ]\n\n```\n\n#### 原型式继承\n本质是进行了浅拷贝，与原型链相似，引用值会被共享\n\n```javascript\n// 核心函数：创建临时的构造函数，传入的对象作为临时构造函数的原型，然后返回这个临时构造函数的实例\nfunction objectCreate(fatherPrototype){\n  function Fun(){}\n  Fun.prototype = prototype // 浅拷贝\n  return new Fun()\n}\n\nconst person = {\n  name: 'person',\n  arr: [1,2,3]\n}\n\nconst son1  = objectCreate(person)\nson1.name = 'son1'\nson1.arr.push(4)\n\nconst son2  = objectCreate(person)\nson2.name = 'son2'\nson2.arr.push(5)\n\nconsole.log(son1.name, son1.arr) //son1 [ 1, 2, 3, 4, 5 ]\nconsole.log(son2.name, son2.arr) //son2 [ 1, 2, 3, 4, 5 ]\n```\n#### 寄生式继承\n背后思路类似于寄生构造函数和工厂模式：先创造一个实现继承的构造函数，然后再增强对象（给继承后的对象添加方法），再将这个对象返回。\n\n特点：类似借用构造函数，函数不能重用\n\n```javascript\nfunction objectCreate(fatherPrototype){\n  function Fun(){}\n  Fun.prototype = fatherPrototype // 浅拷贝\n  return new Fun()\n}\n\nfunction createAnother(fatherPrototype){\n  let cloneObj = objectCreate(fatherPrototype)  // 通过调用函数创建新对象\n  cloneObj.sayHi = function(){ // 增强对象，类似于给对象扩展功能，添加方法\n    console.log('hi')\n  }\n  return cloneObj\n}\n\nconst person = {\n  name: 'person',\n  arr: [1,2,3]\n}\n\nconst son1  = createAnother(person)\nson1.sayHi() // hi\n```\n#### 寄生式组合继承\n\n取原型的副本（寄生式继承）赋值给子类原型。算引用类型继承的最佳模式，但有点复杂。\n\n```javascript\nfunction objectCreate(fatherPrototype){\n  function Fun(){}\n  Fun.prototype = fatherPrototype // 浅拷贝\n  return new Fun()\n}\n\nfunction inheritPrototype(subType, superType){\n  let prototype = objectCreate(superType) // 创建对象\n  prototype.consructor = subType // 增强对象\n  subType.prototype = prototype\n}\nfunction Super(name){\n  this.name = name\n  this.arr = [1,2,3]\n}\n// 声明父类原型属性\nSuper.prototype.getName = function(){\n  console.log(this.name)\n}\n\n// 子类构造函数\nfunction Sub(name){\n  Super.call(this, name)\n  this.age = 18\n}\n\ninheritPrototype(Sub, Super)\n\nSub.prototype.sayHi = function(){\n  console.log('hi')\n}\n\n\nconst son1  = new Sub()\nson1.name = 'son1'\nson1.arr.push(4)\n\nconst son2  = new Sub()\nson2.name = 'son2'\nson2.arr.push(5)\n\nconsole.log(son1.name, son1.arr) //Super [ 1, 2, 3, 4 ]\nconsole.log(son2.name, son2.arr) //Super [ 1, 2, 3, 5 ]\n```\n\n得多看几遍，多理解几遍~\n\n\n\n\n\n\n\n\n","source":"_posts/继承.md","raw":"---\ntitle: 继承的6种方式\ntags: JavaScript\ncategories: JavaScript\ncopyright: true\ncomments: true\nabbrlink: 22769\ndate: 2022-04-18 17:29:15\n---\n\n### 原型、构造函数、实例对象的关系\n\n构造函数能够生成实例对象，实例对象拥有构造函数里的属性和方法，并继承构造函数原型上的属性及方法。\n\n<div align=center>\n  <img src=\"1.jpeg\" width = 65%>\n</div>\n\n### 继承方式\n#### 原型链继承\n子类原型等于父类构造函数的实例\n\n特点：\n子类实例能够继成父类及父类原型中属性和方法\n\n问题：\n1. 如果父类构造函数中有引用类型的属性，会导致通过子类创建的所有实例都共享该属性，其中一个实例修改了这个引用值，其他实例的这个属性都会同步变化，造成数据污染。\n2. 子类构造函数无法向父类构造函数传值\n\n\n```javascript\n// 声明父类构造函数\nfunction Super(){\n  this.name = 'super'\n  this.arr = [1,2,3]\n}\n// 声明父类原型属性\nSuper.prototype.getName = function(){\n  console.log(this.name)\n}\n\n// 子类构造函数\nfunction Sub(){\n  this.age = 18\n}\n// 子类原型指向父类实例\nSub.prototype = new Super()\n\nconst sub1 = new Sub()\nconst sub2 = new Sub()\n// 修改sub1的引用值会影响sub2的引用值\nsub.arr.push(4)\nconsole.log(sub1.name, sub1.arr) // super [ 1, 2, 3, 4 ]\nconsole.log(sub2.name, sub2.arr) // super [ 1, 2, 3, 4 ]\n```\n#### 借用构造函数继承\n使用call或者apply在子类构造函数中调用父类构造函数\n\n特点：子类构造函数能够向父类构造函数中传值，继承了父类构造函数的属性和方法，但无法继承父类原型上的属性和方法\n\n问题：\n1. 只能在子类构造函数中定义方法，因此不能重用函数\n2. 子类不能访问父类原型上定义的方法\n\n```javascript\n// 声明父类构造函数\nfunction Super(name){\n  this.name = name\n}\n// 声明父类原型属性\nSuper.prototype.getName = function(){\n  console.log(this.name)\n}\n\n// 子类构造函数\nfunction Sub(name){\n  Super.call(this, name)\n  this.age = 18\n}\n\nconst sub1 = new Sub('lili')\nconsole.log(sub1.name, sub1.age)\n\n```\n\n#### 组合继承（伪经典继承）\n\n特点：解决了上述两种的缺陷；\n\n问题：父类构造函数会执行两次\n\n```javascript\n// 声明父类构造函数\nfunction Super(name){\n  this.name = name\n  this.arr = [1,2,3]\n}\n// 声明父类原型属性\nSuper.prototype.getName = function(){\n  console.log(this.name)\n}\n\n// 子类构造函数\nfunction Sub(name){\n  Super.call(this, name)\n  this.age = 18\n}\n\nSub.prototype = new Super()\n\nconst sub1 = new Sub('sub1')\nconst sub2 = new Sub('sub2')\n// 修改sub1实例的引用值，不会影响到sub2\nsub1.arr.push(4)\n\nconsole.log(sub1.name, sub1.arr) // sub1 [ 1, 2, 3, 4 ]\nconsole.log(sub2.name, sub2.arr) // sub2 [ 1, 2, 3 ]\n\n```\n\n#### 原型式继承\n本质是进行了浅拷贝，与原型链相似，引用值会被共享\n\n```javascript\n// 核心函数：创建临时的构造函数，传入的对象作为临时构造函数的原型，然后返回这个临时构造函数的实例\nfunction objectCreate(fatherPrototype){\n  function Fun(){}\n  Fun.prototype = prototype // 浅拷贝\n  return new Fun()\n}\n\nconst person = {\n  name: 'person',\n  arr: [1,2,3]\n}\n\nconst son1  = objectCreate(person)\nson1.name = 'son1'\nson1.arr.push(4)\n\nconst son2  = objectCreate(person)\nson2.name = 'son2'\nson2.arr.push(5)\n\nconsole.log(son1.name, son1.arr) //son1 [ 1, 2, 3, 4, 5 ]\nconsole.log(son2.name, son2.arr) //son2 [ 1, 2, 3, 4, 5 ]\n```\n#### 寄生式继承\n背后思路类似于寄生构造函数和工厂模式：先创造一个实现继承的构造函数，然后再增强对象（给继承后的对象添加方法），再将这个对象返回。\n\n特点：类似借用构造函数，函数不能重用\n\n```javascript\nfunction objectCreate(fatherPrototype){\n  function Fun(){}\n  Fun.prototype = fatherPrototype // 浅拷贝\n  return new Fun()\n}\n\nfunction createAnother(fatherPrototype){\n  let cloneObj = objectCreate(fatherPrototype)  // 通过调用函数创建新对象\n  cloneObj.sayHi = function(){ // 增强对象，类似于给对象扩展功能，添加方法\n    console.log('hi')\n  }\n  return cloneObj\n}\n\nconst person = {\n  name: 'person',\n  arr: [1,2,3]\n}\n\nconst son1  = createAnother(person)\nson1.sayHi() // hi\n```\n#### 寄生式组合继承\n\n取原型的副本（寄生式继承）赋值给子类原型。算引用类型继承的最佳模式，但有点复杂。\n\n```javascript\nfunction objectCreate(fatherPrototype){\n  function Fun(){}\n  Fun.prototype = fatherPrototype // 浅拷贝\n  return new Fun()\n}\n\nfunction inheritPrototype(subType, superType){\n  let prototype = objectCreate(superType) // 创建对象\n  prototype.consructor = subType // 增强对象\n  subType.prototype = prototype\n}\nfunction Super(name){\n  this.name = name\n  this.arr = [1,2,3]\n}\n// 声明父类原型属性\nSuper.prototype.getName = function(){\n  console.log(this.name)\n}\n\n// 子类构造函数\nfunction Sub(name){\n  Super.call(this, name)\n  this.age = 18\n}\n\ninheritPrototype(Sub, Super)\n\nSub.prototype.sayHi = function(){\n  console.log('hi')\n}\n\n\nconst son1  = new Sub()\nson1.name = 'son1'\nson1.arr.push(4)\n\nconst son2  = new Sub()\nson2.name = 'son2'\nson2.arr.push(5)\n\nconsole.log(son1.name, son1.arr) //Super [ 1, 2, 3, 4 ]\nconsole.log(son2.name, son2.arr) //Super [ 1, 2, 3, 5 ]\n```\n\n得多看几遍，多理解几遍~\n\n\n\n\n\n\n\n\n","slug":"继承","published":1,"updated":"2023-12-20T06:57:19.009Z","_id":"clqdf8hup004p44t19l4oh5j1","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"原型、构造函数、实例对象的关系\"><a href=\"#原型、构造函数、实例对象的关系\" class=\"headerlink\" title=\"原型、构造函数、实例对象的关系\"></a>原型、构造函数、实例对象的关系</h3><p>构造函数能够生成实例对象，实例对象拥有构造函数里的属性和方法，并继承构造函数原型上的属性及方法。</p>\n<div align=\"center\">\n  <img data-src=\"/posts/22769/1.jpeg\" width=\"65%\">\n</div>\n\n<h3 id=\"继承方式\"><a href=\"#继承方式\" class=\"headerlink\" title=\"继承方式\"></a>继承方式</h3><h4 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h4><p>子类原型等于父类构造函数的实例</p>\n<p>特点：<br>子类实例能够继成父类及父类原型中属性和方法</p>\n<p>问题：</p>\n<ol>\n<li>如果父类构造函数中有引用类型的属性，会导致通过子类创建的所有实例都共享该属性，其中一个实例修改了这个引用值，其他实例的这个属性都会同步变化，造成数据污染。</li>\n<li>子类构造函数无法向父类构造函数传值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;super&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明父类原型属性</span></span><br><span class=\"line\">Super.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类原型指向父类实例</span></span><br><span class=\"line\">Sub.prototype = <span class=\"keyword\">new</span> Super()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sub1 = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\"><span class=\"keyword\">const</span> sub2 = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\"><span class=\"comment\">// 修改sub1的引用值会影响sub2的引用值</span></span><br><span class=\"line\">sub.arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub1.name, sub1.arr) <span class=\"comment\">// super [ 1, 2, 3, 4 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub2.name, sub2.arr) <span class=\"comment\">// super [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><p>使用call或者apply在子类构造函数中调用父类构造函数</p>\n<p>特点：子类构造函数能够向父类构造函数中传值，继承了父类构造函数的属性和方法，但无法继承父类原型上的属性和方法</p>\n<p>问题：</p>\n<ol>\n<li>只能在子类构造函数中定义方法，因此不能重用函数</li>\n<li>子类不能访问父类原型上定义的方法</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明父类原型属性</span></span><br><span class=\"line\">Super.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  Super.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sub1 = <span class=\"keyword\">new</span> Sub(<span class=\"string\">&#x27;lili&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub1.name, sub1.age)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组合继承（伪经典继承）\"><a href=\"#组合继承（伪经典继承）\" class=\"headerlink\" title=\"组合继承（伪经典继承）\"></a>组合继承（伪经典继承）</h4><p>特点：解决了上述两种的缺陷；</p>\n<p>问题：父类构造函数会执行两次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明父类原型属性</span></span><br><span class=\"line\">Super.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  Super.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Sub.prototype = <span class=\"keyword\">new</span> Super()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sub1 = <span class=\"keyword\">new</span> Sub(<span class=\"string\">&#x27;sub1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sub2 = <span class=\"keyword\">new</span> Sub(<span class=\"string\">&#x27;sub2&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 修改sub1实例的引用值，不会影响到sub2</span></span><br><span class=\"line\">sub1.arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub1.name, sub1.arr) <span class=\"comment\">// sub1 [ 1, 2, 3, 4 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub2.name, sub2.arr) <span class=\"comment\">// sub2 [ 1, 2, 3 ]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h4><p>本质是进行了浅拷贝，与原型链相似，引用值会被共享</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心函数：创建临时的构造函数，传入的对象作为临时构造函数的原型，然后返回这个临时构造函数的实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectCreate</span>(<span class=\"params\">fatherPrototype</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fun</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  Fun.prototype = prototype <span class=\"comment\">// 浅拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fun()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  arr: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1  = objectCreate(person)</span><br><span class=\"line\">son1.name = <span class=\"string\">&#x27;son1&#x27;</span></span><br><span class=\"line\">son1.arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son2  = objectCreate(person)</span><br><span class=\"line\">son2.name = <span class=\"string\">&#x27;son2&#x27;</span></span><br><span class=\"line\">son2.arr.push(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son1.name, son1.arr) <span class=\"comment\">//son1 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son2.name, son2.arr) <span class=\"comment\">//son2 [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h4><p>背后思路类似于寄生构造函数和工厂模式：先创造一个实现继承的构造函数，然后再增强对象（给继承后的对象添加方法），再将这个对象返回。</p>\n<p>特点：类似借用构造函数，函数不能重用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectCreate</span>(<span class=\"params\">fatherPrototype</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fun</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  Fun.prototype = fatherPrototype <span class=\"comment\">// 浅拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fun()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAnother</span>(<span class=\"params\">fatherPrototype</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneObj = objectCreate(fatherPrototype)  <span class=\"comment\">// 通过调用函数创建新对象</span></span><br><span class=\"line\">  cloneObj.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 增强对象，类似于给对象扩展功能，添加方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  arr: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1  = createAnother(person)</span><br><span class=\"line\">son1.sayHi() <span class=\"comment\">// hi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"寄生式组合继承\"><a href=\"#寄生式组合继承\" class=\"headerlink\" title=\"寄生式组合继承\"></a>寄生式组合继承</h4><p>取原型的副本（寄生式继承）赋值给子类原型。算引用类型继承的最佳模式，但有点复杂。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectCreate</span>(<span class=\"params\">fatherPrototype</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fun</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  Fun.prototype = fatherPrototype <span class=\"comment\">// 浅拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fun()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = objectCreate(superType) <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">  prototype.consructor = subType <span class=\"comment\">// 增强对象</span></span><br><span class=\"line\">  subType.prototype = prototype</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明父类原型属性</span></span><br><span class=\"line\">Super.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  Super.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inheritPrototype(Sub, Super)</span><br><span class=\"line\"></span><br><span class=\"line\">Sub.prototype.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1  = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\">son1.name = <span class=\"string\">&#x27;son1&#x27;</span></span><br><span class=\"line\">son1.arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son2  = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\">son2.name = <span class=\"string\">&#x27;son2&#x27;</span></span><br><span class=\"line\">son2.arr.push(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son1.name, son1.arr) <span class=\"comment\">//Super [ 1, 2, 3, 4 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son2.name, son2.arr) <span class=\"comment\">//Super [ 1, 2, 3, 5 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>得多看几遍，多理解几遍~</p>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"原型、构造函数、实例对象的关系\"><a href=\"#原型、构造函数、实例对象的关系\" class=\"headerlink\" title=\"原型、构造函数、实例对象的关系\"></a>原型、构造函数、实例对象的关系</h3><p>构造函数能够生成实例对象，实例对象拥有构造函数里的属性和方法，并继承构造函数原型上的属性及方法。</p>\n<div align=\"center\">\n  <img src=\"/posts/22769/1.jpeg\" width=\"65%\">\n</div>\n\n<h3 id=\"继承方式\"><a href=\"#继承方式\" class=\"headerlink\" title=\"继承方式\"></a>继承方式</h3><h4 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h4><p>子类原型等于父类构造函数的实例</p>\n<p>特点：<br>子类实例能够继成父类及父类原型中属性和方法</p>\n<p>问题：</p>\n<ol>\n<li>如果父类构造函数中有引用类型的属性，会导致通过子类创建的所有实例都共享该属性，其中一个实例修改了这个引用值，其他实例的这个属性都会同步变化，造成数据污染。</li>\n<li>子类构造函数无法向父类构造函数传值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;super&#x27;</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明父类原型属性</span></span><br><span class=\"line\">Super.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类原型指向父类实例</span></span><br><span class=\"line\">Sub.prototype = <span class=\"keyword\">new</span> Super()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sub1 = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\"><span class=\"keyword\">const</span> sub2 = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\"><span class=\"comment\">// 修改sub1的引用值会影响sub2的引用值</span></span><br><span class=\"line\">sub.arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub1.name, sub1.arr) <span class=\"comment\">// super [ 1, 2, 3, 4 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub2.name, sub2.arr) <span class=\"comment\">// super [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数继承\"><a href=\"#借用构造函数继承\" class=\"headerlink\" title=\"借用构造函数继承\"></a>借用构造函数继承</h4><p>使用call或者apply在子类构造函数中调用父类构造函数</p>\n<p>特点：子类构造函数能够向父类构造函数中传值，继承了父类构造函数的属性和方法，但无法继承父类原型上的属性和方法</p>\n<p>问题：</p>\n<ol>\n<li>只能在子类构造函数中定义方法，因此不能重用函数</li>\n<li>子类不能访问父类原型上定义的方法</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明父类原型属性</span></span><br><span class=\"line\">Super.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  Super.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sub1 = <span class=\"keyword\">new</span> Sub(<span class=\"string\">&#x27;lili&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub1.name, sub1.age)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组合继承（伪经典继承）\"><a href=\"#组合继承（伪经典继承）\" class=\"headerlink\" title=\"组合继承（伪经典继承）\"></a>组合继承（伪经典继承）</h4><p>特点：解决了上述两种的缺陷；</p>\n<p>问题：父类构造函数会执行两次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明父类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明父类原型属性</span></span><br><span class=\"line\">Super.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  Super.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Sub.prototype = <span class=\"keyword\">new</span> Super()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sub1 = <span class=\"keyword\">new</span> Sub(<span class=\"string\">&#x27;sub1&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sub2 = <span class=\"keyword\">new</span> Sub(<span class=\"string\">&#x27;sub2&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 修改sub1实例的引用值，不会影响到sub2</span></span><br><span class=\"line\">sub1.arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub1.name, sub1.arr) <span class=\"comment\">// sub1 [ 1, 2, 3, 4 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sub2.name, sub2.arr) <span class=\"comment\">// sub2 [ 1, 2, 3 ]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h4><p>本质是进行了浅拷贝，与原型链相似，引用值会被共享</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心函数：创建临时的构造函数，传入的对象作为临时构造函数的原型，然后返回这个临时构造函数的实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectCreate</span>(<span class=\"params\">fatherPrototype</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fun</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  Fun.prototype = prototype <span class=\"comment\">// 浅拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fun()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  arr: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1  = objectCreate(person)</span><br><span class=\"line\">son1.name = <span class=\"string\">&#x27;son1&#x27;</span></span><br><span class=\"line\">son1.arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son2  = objectCreate(person)</span><br><span class=\"line\">son2.name = <span class=\"string\">&#x27;son2&#x27;</span></span><br><span class=\"line\">son2.arr.push(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son1.name, son1.arr) <span class=\"comment\">//son1 [ 1, 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son2.name, son2.arr) <span class=\"comment\">//son2 [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h4><p>背后思路类似于寄生构造函数和工厂模式：先创造一个实现继承的构造函数，然后再增强对象（给继承后的对象添加方法），再将这个对象返回。</p>\n<p>特点：类似借用构造函数，函数不能重用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectCreate</span>(<span class=\"params\">fatherPrototype</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fun</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  Fun.prototype = fatherPrototype <span class=\"comment\">// 浅拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fun()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAnother</span>(<span class=\"params\">fatherPrototype</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneObj = objectCreate(fatherPrototype)  <span class=\"comment\">// 通过调用函数创建新对象</span></span><br><span class=\"line\">  cloneObj.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// 增强对象，类似于给对象扩展功能，添加方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  arr: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1  = createAnother(person)</span><br><span class=\"line\">son1.sayHi() <span class=\"comment\">// hi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"寄生式组合继承\"><a href=\"#寄生式组合继承\" class=\"headerlink\" title=\"寄生式组合继承\"></a>寄生式组合继承</h4><p>取原型的副本（寄生式继承）赋值给子类原型。算引用类型继承的最佳模式，但有点复杂。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectCreate</span>(<span class=\"params\">fatherPrototype</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fun</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  Fun.prototype = fatherPrototype <span class=\"comment\">// 浅拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fun()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = objectCreate(superType) <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">  prototype.consructor = subType <span class=\"comment\">// 增强对象</span></span><br><span class=\"line\">  subType.prototype = prototype</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Super</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明父类原型属性</span></span><br><span class=\"line\">Super.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">  Super.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inheritPrototype(Sub, Super)</span><br><span class=\"line\"></span><br><span class=\"line\">Sub.prototype.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hi&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1  = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\">son1.name = <span class=\"string\">&#x27;son1&#x27;</span></span><br><span class=\"line\">son1.arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son2  = <span class=\"keyword\">new</span> Sub()</span><br><span class=\"line\">son2.name = <span class=\"string\">&#x27;son2&#x27;</span></span><br><span class=\"line\">son2.arr.push(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son1.name, son1.arr) <span class=\"comment\">//Super [ 1, 2, 3, 4 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son2.name, son2.arr) <span class=\"comment\">//Super [ 1, 2, 3, 5 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>得多看几遍，多理解几遍~</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"/posts/22769/1.jpeg","popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 14:57:19 GMT+0800 (中国标准时间)","title":"继承的6种方式","path":"posts/22769/","eyeCatchImage":"/posts/22769/1.jpeg","excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-04-18T09:29:15.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-04-18T09:29:15.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"JavaScript","tags":["JavaScript"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3614},{"title":"读书笔记","copyright":true,"comments":1,"abbrlink":51847,"date":"2021-10-23T03:48:09.000Z","_content":"\n### 高效能人士的七个习惯\n\n#### 七个习惯\n1. 积极主动\n2. 以终为始\n3. 要事第一\n4. 双赢思维\n5. 知彼解己\n6. 统合综效\n7. 不断更新\n\n#### 摘录\n1. 潜在的、持久的、不断上升的成功才是值得称颂的。\n","source":"_posts/高效能人生的七个习惯.md","raw":"---\ntitle: 读书笔记\ntags: 读书笔记\ncategories: 随笔\ncopyright: true\ncomments: true\nabbrlink: 51847\ndate: 2021-10-23 11:48:09\n---\n\n### 高效能人士的七个习惯\n\n#### 七个习惯\n1. 积极主动\n2. 以终为始\n3. 要事第一\n4. 双赢思维\n5. 知彼解己\n6. 统合综效\n7. 不断更新\n\n#### 摘录\n1. 潜在的、持久的、不断上升的成功才是值得称颂的。\n","slug":"高效能人生的七个习惯","published":1,"updated":"2022-07-13T01:47:22.017Z","layout":"post","photos":[],"link":"","_id":"clqdf8hup004r44t197d08kza","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h3 id=\"高效能人士的七个习惯\"><a href=\"#高效能人士的七个习惯\" class=\"headerlink\" title=\"高效能人士的七个习惯\"></a>高效能人士的七个习惯</h3><h4 id=\"七个习惯\"><a href=\"#七个习惯\" class=\"headerlink\" title=\"七个习惯\"></a>七个习惯</h4><ol>\n<li>积极主动</li>\n<li>以终为始</li>\n<li>要事第一</li>\n<li>双赢思维</li>\n<li>知彼解己</li>\n<li>统合综效</li>\n<li>不断更新</li>\n</ol>\n<h4 id=\"摘录\"><a href=\"#摘录\" class=\"headerlink\" title=\"摘录\"></a>摘录</h4><ol>\n<li>潜在的、持久的、不断上升的成功才是值得称颂的。</li>\n</ol>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h3 id=\"高效能人士的七个习惯\"><a href=\"#高效能人士的七个习惯\" class=\"headerlink\" title=\"高效能人士的七个习惯\"></a>高效能人士的七个习惯</h3><h4 id=\"七个习惯\"><a href=\"#七个习惯\" class=\"headerlink\" title=\"七个习惯\"></a>七个习惯</h4><ol>\n<li>积极主动</li>\n<li>以终为始</li>\n<li>要事第一</li>\n<li>双赢思维</li>\n<li>知彼解己</li>\n<li>统合综效</li>\n<li>不断更新</li>\n</ol>\n<h4 id=\"摘录\"><a href=\"#摘录\" class=\"headerlink\" title=\"摘录\"></a>摘录</h4><ol>\n<li>潜在的、持久的、不断上升的成功才是值得称颂的。</li>\n</ol>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 13 2022 09:47:22 GMT+0800 (中国标准时间)","title":"读书笔记","path":"posts/51847/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-10-23T03:48:09.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-10-23T03:48:09.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"随笔","tags":["读书笔记"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":67},{"title":"羽毛球学习记录","author":"Haiping Liu","comments":1,"abbrlink":44862,"date":"2023-12-20T07:37:02.000Z","_content":"# 前言\n记录学习过程的心得体会，可能对可能错，但没关系，在学习中纠正，实践中成长。\n\n# 发球\n## 在偶数区发球：\n1. 1号内角  封正手  \n2. 3号外角  封反手  启动 左腿后侧一步\n3. 2号中间区 对方正手握拍封正手 对方反手握拍封反手\n   注：对方站的靠后 发重球 封网方向同上\n4. 4号内后场 大概率对方杀对角\n5. 5号外后场  大概率杀直线 \n## 在奇数区发球：\n1. 1号内角 左腿后侧一步奇数区头顶球封网\n2. 3号外角 封正手 右脚后侧一步\n3. 2号 对方抢网 我需要马上反手握拍 前进一步 封中间或奇数区\n4. 4号内后场 封奇数区\n5. 5号外后场 封偶数区\n6. 站的靠后就发重球 轻重结合  \n\n# 接发\n重心压低\n\n## 偶数区接球：\n迈右腿\n1. 对方男发内角：\n抹小对角网前或加力推对方反手底线；抓女直线回球，抓男斜线回球；若对方男发球后，没有后退，直接推对方反手底线；\n2. 对方女发内角：\n搓对方反手网前，同时为了避免对方抓住球路，结合假动作推其斜线腰部；\n这时男子因为不发球，有充分的准备，所以尽可能打网前球多变化为佳。\n3. 对方男发外角：\n主动时快推直线腰部后场或者搓放网前，一定要确保质量；如果已经抢不到高点，不如高挑直线后场尽可能到底线，正是对方的反手位，然后跑相应斜线封堵，或者直线后退至前接发球线后一步左右,降低重心举拍准备防守接杀其边线球。等再有点能力时可以加上网前勾对角，关键是节奏和质量的全盘考虑。\n## 奇数区接发：\n1. 对方男发内角：\n搓直线网前、勾对角网前，或者加力推对方底线两角\n2. 对方女发内角：\n反手区直线网前的高质量搓球是第一选择，一定多加练习，争取早日搓出高质量贴近边线的网前球，同时中路网前，勾对角网前，抹 拨 推两腰等，网前球多点变化。\n3. 对方发外角：\n反手区直线网前的高质量搓球依然是第一选择，但要注意切忌打出质量不高的直线推腰球，因为这一点是男子上来正手扑杀的绝佳位置，宁可挑对方反手底线，哪怕挑不到反手，挑到正手底线也绝对不能随意直线放腰！\n\n\n# 封网\n1. 队友杀球时球拍不要举太高，会影响队友杀球路线，球过到对方区域立刻举拍随时准备封网；\n\n# 抽球\n1、如果对方来球正对自己而又来不及闪让时，千万不要用正手方法击球，当来球靠近自己身体时，即使击球点在自己右侧腋下，反手也要比正手容易发力还击；\n2、在正手平抽时，要善于运用食指的力量发力击球，而在反手平抽时，拇指朝前顶压发力；\n\n# 混双战术\n## 接发\n1. 男接发放网往女搭档一侧放网，放完可立即后撤，女跟球；\n## 进攻\n1. 女举拍封网 （占位确认一下发球线前后） 尽量封直线 意识在斜线\n## 防守\n1. 防守若被动挑球时，男队友尽量挑直线，女队员挑斜线。直线的球吊网前会很快 杀球又会很重，女队员防守比较困难，这样就可以让女队员防斜线，男队员防直线。\n\n# 意识习惯养成\n- 发球时思考：\n\t1. 对方站位、握拍，发到他难受的位置；\n\t2. 根据你发的位置，想好第三拍如何接，发完立即准备第三拍；\n\t  - 发完球一定一定一定要举拍，对方推腰要抢高点封住，不能留给搭档，否则会很被动；\n\t  - 避免急于求成，质量要求过高，急于一拍将对手置于死地的打法意识；\n\t  - 偶数位接发男生发球，压反手，抓对方正手网前；\n- 不击球时握拍放松\n- 其实看很多比赛，不接球的人也会随着球的节奏进行举拍，同时脚也会随着球进行小垫，并没有站死，而是时刻跟着球的节奏准备接球；\n\n","source":"_posts/羽毛球学习记录.md","raw":"---\ntitle: 羽毛球学习记录\nauthor: Haiping Liu\ncomments: true\nabbrlink: 44862\ndate: 2023-12-20 15:37:02\ncategories:\ntags:\n---\n# 前言\n记录学习过程的心得体会，可能对可能错，但没关系，在学习中纠正，实践中成长。\n\n# 发球\n## 在偶数区发球：\n1. 1号内角  封正手  \n2. 3号外角  封反手  启动 左腿后侧一步\n3. 2号中间区 对方正手握拍封正手 对方反手握拍封反手\n   注：对方站的靠后 发重球 封网方向同上\n4. 4号内后场 大概率对方杀对角\n5. 5号外后场  大概率杀直线 \n## 在奇数区发球：\n1. 1号内角 左腿后侧一步奇数区头顶球封网\n2. 3号外角 封正手 右脚后侧一步\n3. 2号 对方抢网 我需要马上反手握拍 前进一步 封中间或奇数区\n4. 4号内后场 封奇数区\n5. 5号外后场 封偶数区\n6. 站的靠后就发重球 轻重结合  \n\n# 接发\n重心压低\n\n## 偶数区接球：\n迈右腿\n1. 对方男发内角：\n抹小对角网前或加力推对方反手底线；抓女直线回球，抓男斜线回球；若对方男发球后，没有后退，直接推对方反手底线；\n2. 对方女发内角：\n搓对方反手网前，同时为了避免对方抓住球路，结合假动作推其斜线腰部；\n这时男子因为不发球，有充分的准备，所以尽可能打网前球多变化为佳。\n3. 对方男发外角：\n主动时快推直线腰部后场或者搓放网前，一定要确保质量；如果已经抢不到高点，不如高挑直线后场尽可能到底线，正是对方的反手位，然后跑相应斜线封堵，或者直线后退至前接发球线后一步左右,降低重心举拍准备防守接杀其边线球。等再有点能力时可以加上网前勾对角，关键是节奏和质量的全盘考虑。\n## 奇数区接发：\n1. 对方男发内角：\n搓直线网前、勾对角网前，或者加力推对方底线两角\n2. 对方女发内角：\n反手区直线网前的高质量搓球是第一选择，一定多加练习，争取早日搓出高质量贴近边线的网前球，同时中路网前，勾对角网前，抹 拨 推两腰等，网前球多点变化。\n3. 对方发外角：\n反手区直线网前的高质量搓球依然是第一选择，但要注意切忌打出质量不高的直线推腰球，因为这一点是男子上来正手扑杀的绝佳位置，宁可挑对方反手底线，哪怕挑不到反手，挑到正手底线也绝对不能随意直线放腰！\n\n\n# 封网\n1. 队友杀球时球拍不要举太高，会影响队友杀球路线，球过到对方区域立刻举拍随时准备封网；\n\n# 抽球\n1、如果对方来球正对自己而又来不及闪让时，千万不要用正手方法击球，当来球靠近自己身体时，即使击球点在自己右侧腋下，反手也要比正手容易发力还击；\n2、在正手平抽时，要善于运用食指的力量发力击球，而在反手平抽时，拇指朝前顶压发力；\n\n# 混双战术\n## 接发\n1. 男接发放网往女搭档一侧放网，放完可立即后撤，女跟球；\n## 进攻\n1. 女举拍封网 （占位确认一下发球线前后） 尽量封直线 意识在斜线\n## 防守\n1. 防守若被动挑球时，男队友尽量挑直线，女队员挑斜线。直线的球吊网前会很快 杀球又会很重，女队员防守比较困难，这样就可以让女队员防斜线，男队员防直线。\n\n# 意识习惯养成\n- 发球时思考：\n\t1. 对方站位、握拍，发到他难受的位置；\n\t2. 根据你发的位置，想好第三拍如何接，发完立即准备第三拍；\n\t  - 发完球一定一定一定要举拍，对方推腰要抢高点封住，不能留给搭档，否则会很被动；\n\t  - 避免急于求成，质量要求过高，急于一拍将对手置于死地的打法意识；\n\t  - 偶数位接发男生发球，压反手，抓对方正手网前；\n- 不击球时握拍放松\n- 其实看很多比赛，不接球的人也会随着球的节奏进行举拍，同时脚也会随着球进行小垫，并没有站死，而是时刻跟着球的节奏准备接球；\n\n","slug":"羽毛球学习记录","published":1,"updated":"2023-12-20T07:51:18.602Z","_id":"clqdgnm6t0000m0t1d559btba","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>记录学习过程的心得体会，可能对可能错，但没关系，在学习中纠正，实践中成长。</p>\n<h1 id=\"发球\"><a href=\"#发球\" class=\"headerlink\" title=\"发球\"></a>发球</h1><h2 id=\"在偶数区发球：\"><a href=\"#在偶数区发球：\" class=\"headerlink\" title=\"在偶数区发球：\"></a>在偶数区发球：</h2><ol>\n<li>1号内角  封正手  </li>\n<li>3号外角  封反手  启动 左腿后侧一步</li>\n<li>2号中间区 对方正手握拍封正手 对方反手握拍封反手<br>注：对方站的靠后 发重球 封网方向同上</li>\n<li>4号内后场 大概率对方杀对角</li>\n<li>5号外后场  大概率杀直线 <h2 id=\"在奇数区发球：\"><a href=\"#在奇数区发球：\" class=\"headerlink\" title=\"在奇数区发球：\"></a>在奇数区发球：</h2></li>\n<li>1号内角 左腿后侧一步奇数区头顶球封网</li>\n<li>3号外角 封正手 右脚后侧一步</li>\n<li>2号 对方抢网 我需要马上反手握拍 前进一步 封中间或奇数区</li>\n<li>4号内后场 封奇数区</li>\n<li>5号外后场 封偶数区</li>\n<li>站的靠后就发重球 轻重结合  </li>\n</ol>\n<h1 id=\"接发\"><a href=\"#接发\" class=\"headerlink\" title=\"接发\"></a>接发</h1><p>重心压低</p>\n<h2 id=\"偶数区接球：\"><a href=\"#偶数区接球：\" class=\"headerlink\" title=\"偶数区接球：\"></a>偶数区接球：</h2><p>迈右腿</p>\n<ol>\n<li>对方男发内角：<br>抹小对角网前或加力推对方反手底线；抓女直线回球，抓男斜线回球；若对方男发球后，没有后退，直接推对方反手底线；</li>\n<li>对方女发内角：<br>搓对方反手网前，同时为了避免对方抓住球路，结合假动作推其斜线腰部；<br>这时男子因为不发球，有充分的准备，所以尽可能打网前球多变化为佳。</li>\n<li>对方男发外角：<br>主动时快推直线腰部后场或者搓放网前，一定要确保质量；如果已经抢不到高点，不如高挑直线后场尽可能到底线，正是对方的反手位，然后跑相应斜线封堵，或者直线后退至前接发球线后一步左右,降低重心举拍准备防守接杀其边线球。等再有点能力时可以加上网前勾对角，关键是节奏和质量的全盘考虑。<h2 id=\"奇数区接发：\"><a href=\"#奇数区接发：\" class=\"headerlink\" title=\"奇数区接发：\"></a>奇数区接发：</h2></li>\n<li>对方男发内角：<br>搓直线网前、勾对角网前，或者加力推对方底线两角</li>\n<li>对方女发内角：<br>反手区直线网前的高质量搓球是第一选择，一定多加练习，争取早日搓出高质量贴近边线的网前球，同时中路网前，勾对角网前，抹 拨 推两腰等，网前球多点变化。</li>\n<li>对方发外角：<br>反手区直线网前的高质量搓球依然是第一选择，但要注意切忌打出质量不高的直线推腰球，因为这一点是男子上来正手扑杀的绝佳位置，宁可挑对方反手底线，哪怕挑不到反手，挑到正手底线也绝对不能随意直线放腰！</li>\n</ol>\n<h1 id=\"封网\"><a href=\"#封网\" class=\"headerlink\" title=\"封网\"></a>封网</h1><ol>\n<li>队友杀球时球拍不要举太高，会影响队友杀球路线，球过到对方区域立刻举拍随时准备封网；</li>\n</ol>\n<h1 id=\"抽球\"><a href=\"#抽球\" class=\"headerlink\" title=\"抽球\"></a>抽球</h1><p>1、如果对方来球正对自己而又来不及闪让时，千万不要用正手方法击球，当来球靠近自己身体时，即使击球点在自己右侧腋下，反手也要比正手容易发力还击；<br>2、在正手平抽时，要善于运用食指的力量发力击球，而在反手平抽时，拇指朝前顶压发力；</p>\n<h1 id=\"混双战术\"><a href=\"#混双战术\" class=\"headerlink\" title=\"混双战术\"></a>混双战术</h1><h2 id=\"接发-1\"><a href=\"#接发-1\" class=\"headerlink\" title=\"接发\"></a>接发</h2><ol>\n<li>男接发放网往女搭档一侧放网，放完可立即后撤，女跟球；<h2 id=\"进攻\"><a href=\"#进攻\" class=\"headerlink\" title=\"进攻\"></a>进攻</h2></li>\n<li>女举拍封网 （占位确认一下发球线前后） 尽量封直线 意识在斜线<h2 id=\"防守\"><a href=\"#防守\" class=\"headerlink\" title=\"防守\"></a>防守</h2></li>\n<li>防守若被动挑球时，男队友尽量挑直线，女队员挑斜线。直线的球吊网前会很快 杀球又会很重，女队员防守比较困难，这样就可以让女队员防斜线，男队员防直线。</li>\n</ol>\n<h1 id=\"意识习惯养成\"><a href=\"#意识习惯养成\" class=\"headerlink\" title=\"意识习惯养成\"></a>意识习惯养成</h1><ul>\n<li>发球时思考：<ol>\n<li>对方站位、握拍，发到他难受的位置；</li>\n<li>根据你发的位置，想好第三拍如何接，发完立即准备第三拍；<ul>\n<li>发完球一定一定一定要举拍，对方推腰要抢高点封住，不能留给搭档，否则会很被动；</li>\n<li>避免急于求成，质量要求过高，急于一拍将对手置于死地的打法意识；</li>\n<li>偶数位接发男生发球，压反手，抓对方正手网前；</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>不击球时握拍放松</li>\n<li>其实看很多比赛，不接球的人也会随着球的节奏进行举拍，同时脚也会随着球进行小垫，并没有站死，而是时刻跟着球的节奏准备接球；</li>\n</ul>\n","site":{"data":{"APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n","DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>记录学习过程的心得体会，可能对可能错，但没关系，在学习中纠正，实践中成长。</p>\n<h1 id=\"发球\"><a href=\"#发球\" class=\"headerlink\" title=\"发球\"></a>发球</h1><h2 id=\"在偶数区发球：\"><a href=\"#在偶数区发球：\" class=\"headerlink\" title=\"在偶数区发球：\"></a>在偶数区发球：</h2><ol>\n<li>1号内角  封正手  </li>\n<li>3号外角  封反手  启动 左腿后侧一步</li>\n<li>2号中间区 对方正手握拍封正手 对方反手握拍封反手<br>注：对方站的靠后 发重球 封网方向同上</li>\n<li>4号内后场 大概率对方杀对角</li>\n<li>5号外后场  大概率杀直线 <h2 id=\"在奇数区发球：\"><a href=\"#在奇数区发球：\" class=\"headerlink\" title=\"在奇数区发球：\"></a>在奇数区发球：</h2></li>\n<li>1号内角 左腿后侧一步奇数区头顶球封网</li>\n<li>3号外角 封正手 右脚后侧一步</li>\n<li>2号 对方抢网 我需要马上反手握拍 前进一步 封中间或奇数区</li>\n<li>4号内后场 封奇数区</li>\n<li>5号外后场 封偶数区</li>\n<li>站的靠后就发重球 轻重结合  </li>\n</ol>\n<h1 id=\"接发\"><a href=\"#接发\" class=\"headerlink\" title=\"接发\"></a>接发</h1><p>重心压低</p>\n<h2 id=\"偶数区接球：\"><a href=\"#偶数区接球：\" class=\"headerlink\" title=\"偶数区接球：\"></a>偶数区接球：</h2><p>迈右腿</p>\n<ol>\n<li>对方男发内角：<br>抹小对角网前或加力推对方反手底线；抓女直线回球，抓男斜线回球；若对方男发球后，没有后退，直接推对方反手底线；</li>\n<li>对方女发内角：<br>搓对方反手网前，同时为了避免对方抓住球路，结合假动作推其斜线腰部；<br>这时男子因为不发球，有充分的准备，所以尽可能打网前球多变化为佳。</li>\n<li>对方男发外角：<br>主动时快推直线腰部后场或者搓放网前，一定要确保质量；如果已经抢不到高点，不如高挑直线后场尽可能到底线，正是对方的反手位，然后跑相应斜线封堵，或者直线后退至前接发球线后一步左右,降低重心举拍准备防守接杀其边线球。等再有点能力时可以加上网前勾对角，关键是节奏和质量的全盘考虑。<h2 id=\"奇数区接发：\"><a href=\"#奇数区接发：\" class=\"headerlink\" title=\"奇数区接发：\"></a>奇数区接发：</h2></li>\n<li>对方男发内角：<br>搓直线网前、勾对角网前，或者加力推对方底线两角</li>\n<li>对方女发内角：<br>反手区直线网前的高质量搓球是第一选择，一定多加练习，争取早日搓出高质量贴近边线的网前球，同时中路网前，勾对角网前，抹 拨 推两腰等，网前球多点变化。</li>\n<li>对方发外角：<br>反手区直线网前的高质量搓球依然是第一选择，但要注意切忌打出质量不高的直线推腰球，因为这一点是男子上来正手扑杀的绝佳位置，宁可挑对方反手底线，哪怕挑不到反手，挑到正手底线也绝对不能随意直线放腰！</li>\n</ol>\n<h1 id=\"封网\"><a href=\"#封网\" class=\"headerlink\" title=\"封网\"></a>封网</h1><ol>\n<li>队友杀球时球拍不要举太高，会影响队友杀球路线，球过到对方区域立刻举拍随时准备封网；</li>\n</ol>\n<h1 id=\"抽球\"><a href=\"#抽球\" class=\"headerlink\" title=\"抽球\"></a>抽球</h1><p>1、如果对方来球正对自己而又来不及闪让时，千万不要用正手方法击球，当来球靠近自己身体时，即使击球点在自己右侧腋下，反手也要比正手容易发力还击；<br>2、在正手平抽时，要善于运用食指的力量发力击球，而在反手平抽时，拇指朝前顶压发力；</p>\n<h1 id=\"混双战术\"><a href=\"#混双战术\" class=\"headerlink\" title=\"混双战术\"></a>混双战术</h1><h2 id=\"接发-1\"><a href=\"#接发-1\" class=\"headerlink\" title=\"接发\"></a>接发</h2><ol>\n<li>男接发放网往女搭档一侧放网，放完可立即后撤，女跟球；<h2 id=\"进攻\"><a href=\"#进攻\" class=\"headerlink\" title=\"进攻\"></a>进攻</h2></li>\n<li>女举拍封网 （占位确认一下发球线前后） 尽量封直线 意识在斜线<h2 id=\"防守\"><a href=\"#防守\" class=\"headerlink\" title=\"防守\"></a>防守</h2></li>\n<li>防守若被动挑球时，男队友尽量挑直线，女队员挑斜线。直线的球吊网前会很快 杀球又会很重，女队员防守比较困难，这样就可以让女队员防斜线，男队员防直线。</li>\n</ol>\n<h1 id=\"意识习惯养成\"><a href=\"#意识习惯养成\" class=\"headerlink\" title=\"意识习惯养成\"></a>意识习惯养成</h1><ul>\n<li>发球时思考：<ol>\n<li>对方站位、握拍，发到他难受的位置；</li>\n<li>根据你发的位置，想好第三拍如何接，发完立即准备第三拍；<ul>\n<li>发完球一定一定一定要举拍，对方推腰要抢高点封住，不能留给搭档，否则会很被动；</li>\n<li>避免急于求成，质量要求过高，急于一拍将对手置于死地的打法意识；</li>\n<li>偶数位接发男生发球，压反手，抓对方正手网前；</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>不击球时握拍放松</li>\n<li>其实看很多比赛，不接球的人也会随着球的节奏进行举拍，同时脚也会随着球进行小垫，并没有站死，而是时刻跟着球的节奏准备接球；</li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Dec 20 2023 15:51:18 GMT+0800 (中国标准时间)","title":"羽毛球学习记录","path":"posts/44862/","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2023-12-20T07:37:02.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2023-12-20T07:37:02.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1244}],"PostAsset":[{"_id":"source/_posts/JS基础(一)/1.jpg","slug":"1.jpg","post":"clqdf8ht2000d44t1c6zybigm","modified":0,"renderable":0},{"_id":"source/_posts/JS基础二/1.jpg","slug":"1.jpg","post":"clqdf8ht6000k44t16erk1ozx","modified":0,"renderable":0},{"_id":"source/_posts/Vue2-模板编译/1.png","slug":"1.png","post":"clqdf8ht9000r44t17cptfsz8","modified":0,"renderable":0},{"_id":"source/_posts/Vue2-模板编译/2.png","slug":"2.png","post":"clqdf8ht9000r44t17cptfsz8","modified":0,"renderable":0},{"_id":"source/_posts/Vue3学习笔记/1.image","slug":"1.image","post":"clqdf8hth001r44t19vtjc96o","modified":0,"renderable":0},{"_id":"source/_posts/Vue3学习笔记/2.image","slug":"2.image","post":"clqdf8hth001r44t19vtjc96o","modified":0,"renderable":0},{"_id":"source/_posts/Vue3学习笔记/3.png","slug":"3.png","post":"clqdf8hth001r44t19vtjc96o","modified":0,"renderable":0},{"_id":"source/_posts/vuex/vuex-1.png","slug":"vuex-1.png","post":"clqdf8htl002a44t12v4278hz","modified":0,"renderable":0},{"_id":"source/_posts/require.context使用/1.jpg","slug":"1.jpg","post":"clqdf8htj002444t1byzr1bcj","modified":0,"renderable":0},{"_id":"source/_posts/require.context使用/2.jpg","slug":"2.jpg","post":"clqdf8htj002444t1byzr1bcj","modified":0,"renderable":0},{"_id":"source/_posts/微前端(一)-父子应用/micro-1.jpg","slug":"micro-1.jpg","post":"clqdf8htv002v44t18g3p0a2x","modified":0,"renderable":0},{"_id":"source/_posts/继承/1.jpeg","slug":"1.jpeg","post":"clqdf8hup004p44t19l4oh5j1","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clqdf8hsw000844t1bjfjg5j9","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8ht5000g44t18vi6gkg8"},{"post_id":"clqdf8hsj000144t14vy46psq","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8ht7000l44t16jb88aas"},{"post_id":"clqdf8hst000344t17xvw1nuo","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8ht8000o44t14dv91fjd"},{"post_id":"clqdf8hsv000744t1a1dph67y","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8hta000t44t11kypfdn1"},{"post_id":"clqdf8hsx000944t19tin3i4c","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8htc001044t1bzfs38w4"},{"post_id":"clqdf8hta000s44t1b4x0cry0","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8htd001444t1gzmvahjr"},{"post_id":"clqdf8htb000w44t179kqadvn","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8htd001844t131mwc0px"},{"post_id":"clqdf8ht2000d44t1c6zybigm","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8hte001c44t1bd5tar9t"},{"post_id":"clqdf8htc001344t102xq7lr1","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8htf001g44t1dw364a6i"},{"post_id":"clqdf8ht4000f44t1f50x91db","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8htf001j44t1fc3i4a15"},{"post_id":"clqdf8ht6000k44t16erk1ozx","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8htg001n44t13ak878kv"},{"post_id":"clqdf8ht8000m44t19n03gevd","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8hth001s44t12m3x9xiw"},{"post_id":"clqdf8htg001l44t1e1ze8uie","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8hti001x44t10qbm3st6"},{"post_id":"clqdf8ht9000r44t17cptfsz8","category_id":"clqdf8htg001m44t1hhrnc9df","_id":"clqdf8htj002044t16t7xf1jf"},{"post_id":"clqdf8hth001r44t19vtjc96o","category_id":"clqdf8htg001m44t1hhrnc9df","_id":"clqdf8htk002544t1hjtmaasx"},{"post_id":"clqdf8htb000y44t1d2776gnw","category_id":"clqdf8hth001u44t1gqe1e3bk","_id":"clqdf8htl002944t1aq52e4mb"},{"post_id":"clqdf8hti001z44t14g343ddv","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8htq002d44t17746alc5"},{"post_id":"clqdf8htk002744t1cthl1cdn","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8htr002h44t190ftbact"},{"post_id":"clqdf8htd001644t1faj3gmqy","category_id":"clqdf8htj002244t16pca2lo2","_id":"clqdf8hts002l44t16gxj7xb8"},{"post_id":"clqdf8hte001b44t198t2fvk9","category_id":"clqdf8htj002244t16pca2lo2","_id":"clqdf8htu002p44t1fytwhgk4"},{"post_id":"clqdf8htr002g44t15esl8glb","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8htv002t44t1fztvchhr"},{"post_id":"clqdf8hte001e44t15w6pep8z","category_id":"clqdf8htj002244t16pca2lo2","_id":"clqdf8htw002w44t18w9a0pcx"},{"post_id":"clqdf8htv002s44t17flb3odz","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8hu0003344t13ee33dh3"},{"post_id":"clqdf8htf001i44t1ffxt1i7q","category_id":"clqdf8htu002o44t16o4m014j","_id":"clqdf8hu5003744t13xex7li5"},{"post_id":"clqdf8htx003044t1f6o1a8ne","category_id":"clqdf8htu002o44t16o4m014j","_id":"clqdf8hu7003a44t14q5581lk"},{"post_id":"clqdf8htg001p44t15la07zvb","category_id":"clqdf8htw002x44t18jp0hwm0","_id":"clqdf8hu8003f44t1g60vhpyj"},{"post_id":"clqdf8hty003244t11g57fy8l","category_id":"clqdf8htu002o44t16o4m014j","_id":"clqdf8hu8003h44t1e2bj8h1o"},{"post_id":"clqdf8hu5003644t18xdrflrz","category_id":"clqdf8hsu000444t17f2d8pca","_id":"clqdf8hu9003j44t1ee92cair"},{"post_id":"clqdf8hti001w44t191pu7zpb","category_id":"clqdf8hu1003444t1a7xfblpv","_id":"clqdf8hua003m44t1apvs47tr"},{"post_id":"clqdf8hu6003944t12yvhcp4q","category_id":"clqdf8htg001m44t1hhrnc9df","_id":"clqdf8hua003o44t1axe89zpp"},{"post_id":"clqdf8hu7003e44t14cwv56u0","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8huc003r44t17ssq22j9"},{"post_id":"clqdf8htj002444t1byzr1bcj","category_id":"clqdf8htj002244t16pca2lo2","_id":"clqdf8huc003t44t17nj55qx9"},{"post_id":"clqdf8htl002a44t12v4278hz","category_id":"clqdf8hu9003i44t1azj671vl","_id":"clqdf8huc003w44t17fd99p84"},{"post_id":"clqdf8htq002f44t19dj730kv","category_id":"clqdf8hua003p44t17u8k3th2","_id":"clqdf8hud003y44t12pxd5cs3"},{"post_id":"clqdf8hts002k44t17g7abl9v","category_id":"clqdf8huc003u44t1b9rt7lde","_id":"clqdf8hue004244t198myd5hd"},{"post_id":"clqdf8htt002n44t11q902cw5","category_id":"clqdf8hud003z44t1f86g2uwp","_id":"clqdf8huf004644t1a81cazhr"},{"post_id":"clqdf8htv002v44t18g3p0a2x","category_id":"clqdf8hue004344t1bwfg32yp","_id":"clqdf8hug004844t17j6gg69g"},{"post_id":"clqdf8huo004o44t1201c5obj","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8huq004t44t1968zhln2"},{"post_id":"clqdf8hup004p44t19l4oh5j1","category_id":"clqdf8ht8000n44t1fehkdted","_id":"clqdf8huq004w44t1ezhihyl6"},{"post_id":"clqdf8hup004r44t197d08kza","category_id":"clqdf8huq004u44t1gfmycq74","_id":"clqdf8huq004y44t113cbgdbs"}],"PostTag":[{"post_id":"clqdf8hsw000844t1bjfjg5j9","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8ht1000c44t111lp53ff"},{"post_id":"clqdf8hsj000144t14vy46psq","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8ht4000e44t1do7q4xgu"},{"post_id":"clqdf8hst000344t17xvw1nuo","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8ht6000j44t13bkp4pgp"},{"post_id":"clqdf8hsv000744t1a1dph67y","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8ht9000q44t1161hcdlv"},{"post_id":"clqdf8hsx000944t19tin3i4c","tag_id":"clqdf8ht8000p44t126qq6z3x","_id":"clqdf8htb000x44t157sp6c73"},{"post_id":"clqdf8htb000w44t179kqadvn","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8htc001244t1cxac1mt1"},{"post_id":"clqdf8ht2000d44t1c6zybigm","tag_id":"clqdf8ht8000p44t126qq6z3x","_id":"clqdf8htd001544t106hg8ven"},{"post_id":"clqdf8htc001344t102xq7lr1","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8htd001a44t14el1hohv"},{"post_id":"clqdf8ht4000f44t1f50x91db","tag_id":"clqdf8htc001144t14e7rfzuv","_id":"clqdf8hte001d44t16k6tda47"},{"post_id":"clqdf8ht6000k44t16erk1ozx","tag_id":"clqdf8ht8000p44t126qq6z3x","_id":"clqdf8htg001k44t187fifb64"},{"post_id":"clqdf8ht8000m44t19n03gevd","tag_id":"clqdf8htc001144t14e7rfzuv","_id":"clqdf8hth001q44t1g4zmb0a1"},{"post_id":"clqdf8htg001l44t1e1ze8uie","tag_id":"clqdf8ht8000p44t126qq6z3x","_id":"clqdf8hth001t44t15irv356s"},{"post_id":"clqdf8ht9000r44t17cptfsz8","tag_id":"clqdf8htg001o44t1afd17jjr","_id":"clqdf8hti001y44t1582obe7f"},{"post_id":"clqdf8hth001r44t19vtjc96o","tag_id":"clqdf8htg001o44t1afd17jjr","_id":"clqdf8htj002144t1fpk74zad"},{"post_id":"clqdf8hta000s44t1b4x0cry0","tag_id":"clqdf8htc001144t14e7rfzuv","_id":"clqdf8htk002644t1048ge43b"},{"post_id":"clqdf8hti001z44t14g343ddv","tag_id":"clqdf8ht8000p44t126qq6z3x","_id":"clqdf8htl002844t17hem5b99"},{"post_id":"clqdf8htb000y44t1d2776gnw","tag_id":"clqdf8htj002344t1b2h86bg3","_id":"clqdf8htq002e44t10m2x8jru"},{"post_id":"clqdf8htd001644t1faj3gmqy","tag_id":"clqdf8htn002c44t10t13031q","_id":"clqdf8hts002m44t12vyv9btu"},{"post_id":"clqdf8htr002g44t15esl8glb","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8htu002q44t1gokne3ab"},{"post_id":"clqdf8hte001b44t198t2fvk9","tag_id":"clqdf8htn002c44t10t13031q","_id":"clqdf8htv002u44t1emkpbyx8"},{"post_id":"clqdf8htv002s44t17flb3odz","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8htx002z44t15aer1a0w"},{"post_id":"clqdf8hte001e44t15w6pep8z","tag_id":"clqdf8htn002c44t10t13031q","_id":"clqdf8hty003144t1ebfeffan"},{"post_id":"clqdf8htf001i44t1ffxt1i7q","tag_id":"clqdf8htw002y44t1353yfbqs","_id":"clqdf8hu6003844t1ca1y6hdl"},{"post_id":"clqdf8hu5003644t18xdrflrz","tag_id":"clqdf8hsv000544t131af2tmv","_id":"clqdf8hu7003b44t1e5dv42g2"},{"post_id":"clqdf8hu6003944t12yvhcp4q","tag_id":"clqdf8htg001o44t1afd17jjr","_id":"clqdf8hu8003g44t1fxxa6vo4"},{"post_id":"clqdf8htg001p44t15la07zvb","tag_id":"clqdf8hu4003544t14twr3knp","_id":"clqdf8hu9003l44t150193ypp"},{"post_id":"clqdf8htg001p44t15la07zvb","tag_id":"clqdf8hu7003d44t18lymhafu","_id":"clqdf8hua003n44t123zp4sib"},{"post_id":"clqdf8hti001w44t191pu7zpb","tag_id":"clqdf8hu9003k44t1ebtr6pnj","_id":"clqdf8huc003s44t15rbqfdta"},{"post_id":"clqdf8htj002444t1byzr1bcj","tag_id":"clqdf8htn002c44t10t13031q","_id":"clqdf8hud003x44t13ukh31yq"},{"post_id":"clqdf8htk002744t1cthl1cdn","tag_id":"clqdf8huc003v44t1cwz88fjr","_id":"clqdf8hue004144t1cxabg228"},{"post_id":"clqdf8htl002a44t12v4278hz","tag_id":"clqdf8hud004044t1diz6gi14","_id":"clqdf8huf004544t17krv42r3"},{"post_id":"clqdf8htq002f44t19dj730kv","tag_id":"clqdf8huf004444t12iyc59zq","_id":"clqdf8hug004a44t137kt49gl"},{"post_id":"clqdf8htq002f44t19dj730kv","tag_id":"clqdf8huf004744t1085vdgou","_id":"clqdf8hug004b44t136pw84vy"},{"post_id":"clqdf8hts002k44t17g7abl9v","tag_id":"clqdf8hug004944t11jzx0imu","_id":"clqdf8huh004d44t1091ka1fu"},{"post_id":"clqdf8htt002n44t11q902cw5","tag_id":"clqdf8hug004c44t18iqq40pt","_id":"clqdf8huh004f44t17u7826by"},{"post_id":"clqdf8htv002v44t18g3p0a2x","tag_id":"clqdf8huh004e44t15hii4wsl","_id":"clqdf8hui004h44t1fu4d7zbf"},{"post_id":"clqdf8htx003044t1f6o1a8ne","tag_id":"clqdf8huh004g44t199biepq4","_id":"clqdf8huj004j44t1bv864zd2"},{"post_id":"clqdf8hty003244t11g57fy8l","tag_id":"clqdf8huh004g44t199biepq4","_id":"clqdf8huj004l44t18wmm3psj"},{"post_id":"clqdf8hu7003e44t14cwv56u0","tag_id":"clqdf8ht8000p44t126qq6z3x","_id":"clqdf8huk004m44t1068sghhk"},{"post_id":"clqdf8hu7003e44t14cwv56u0","tag_id":"clqdf8hu7003d44t18lymhafu","_id":"clqdf8huk004n44t1h6772uz7"},{"post_id":"clqdf8huo004o44t1201c5obj","tag_id":"clqdf8ht8000p44t126qq6z3x","_id":"clqdf8hup004q44t16rwnff6r"},{"post_id":"clqdf8hup004p44t19l4oh5j1","tag_id":"clqdf8ht8000p44t126qq6z3x","_id":"clqdf8huq004s44t180zz4wmh"},{"post_id":"clqdf8hup004r44t197d08kza","tag_id":"clqdf8huq004v44t19m06f7zp","_id":"clqdf8huq004x44t1fxbhdawy"}],"Tag":[{"name":"Vue3","_id":"clqdf8hsv000544t131af2tmv"},{"name":"JavaScript","_id":"clqdf8ht8000p44t126qq6z3x"},{"name":"Promise","_id":"clqdf8htc001144t14e7rfzuv"},{"name":"Vue","_id":"clqdf8htg001o44t1afd17jjr"},{"name":"杂文","_id":"clqdf8htj002344t1b2h86bg3"},{"name":"Webpack","_id":"clqdf8htn002c44t10t13031q"},{"name":"前端工程化","_id":"clqdf8htw002y44t1353yfbqs"},{"name":"Html","_id":"clqdf8hu4003544t14twr3knp"},{"name":"面试","_id":"clqdf8hu7003d44t18lymhafu"},{"name":"React","_id":"clqdf8hu9003k44t1ebtr6pnj"},{"name":"JS基础","_id":"clqdf8huc003v44t1cwz88fjr"},{"name":"Vuex","_id":"clqdf8hud004044t1diz6gi14"},{"name":"计算机网络","_id":"clqdf8huf004444t12iyc59zq"},{"name":"网络安全","_id":"clqdf8huf004744t1085vdgou"},{"name":"安全","_id":"clqdf8hug004944t11jzx0imu"},{"name":"小程序","_id":"clqdf8hug004c44t18iqq40pt"},{"name":"micro","_id":"clqdf8huh004e44t15hii4wsl"},{"name":"工程化","_id":"clqdf8huh004g44t199biepq4"},{"name":"读书笔记","_id":"clqdf8huq004v44t19m06f7zp"}]}}