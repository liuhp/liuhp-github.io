{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/Alipay.jpeg","path":"images/Alipay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/WechatPay.jpeg","path":"images/WechatPay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/author.png","path":"images/author.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":0,"renderable":1},{"_id":"source/README.MDOWN","path":"README.MDOWN","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Promise2.md","hash":"43ac331d01f758e4a3812021f17fa22355d94907","modified":1615130692078},{"_id":"source/_posts/Promise1.md","hash":"dce3b7cb3f902e946c5185d1f7fcbabfc27abbb0","modified":1615125376499},{"_id":"source/_posts/import和require区别.md","hash":"e56ee70b66f570baba7781c8bf3b2d1820c1fa3c","modified":1615770811523},{"_id":"source/_posts/vuex.md","hash":"14f2cc05d3ebc4b7ac380b5bc4603c2a22996a5a","modified":1630375066303},{"_id":"source/_posts/微前端(一)-父子应用.md","hash":"cfdbf498da081541017d54a9c4ff49688a951b3d","modified":1631346566313},{"_id":"source/_posts/微前端-二-孙子应用.md","hash":"4de660bb0039e96669699a2f7797cf12130ea5b4","modified":1631107260686},{"_id":"source/_posts/模块化1.md","hash":"3d2a45b4298ee11a9d0a74b819df1a7cd5154392","modified":1615694197624},{"_id":"source/_posts/模块化2.md","hash":"007a7b38449dc5bca2d61cae79a47c12f2a65112","modified":1615725151114},{"_id":"source/README.MDOWN","hash":"098f09befdcfb6646e9d474e6e115d8bfb907658","modified":1630329245748},{"_id":"source/_posts/Promise3.md","hash":"6c8a37d7b811b2bdeea6f45c256eabb372dcf31e","modified":1615125364026},{"_id":"source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1632367281502},{"_id":"source/_posts/.DS_Store","hash":"4d5e1ae453ea55465bd63c901097517f1646362b","modified":1631108082314},{"_id":"source/about/index.md","hash":"e1ecc0db42675d0abb035c0101f2bc12d7fc85da","modified":1614260923696},{"_id":"source/tags/index.md","hash":"b13f9ea1616d932025bfc229f1633b15d97b1620","modified":1614235548700},{"_id":"source/categories/index.md","hash":"97420e03737b5ca5c47270fc1645716b2b8a4ff7","modified":1614224828897},{"_id":"source/_posts/微前端(一)-父子应用/加载机制.jpg","hash":"8f4a6274d1fbe81241af3c6e10333c5de0a6ad45","modified":1631108035096},{"_id":"themes/next/.gitignore","hash":"4600f2b61b2fe0d61f824bda9aa2b5d072f0e635","modified":1614223658822},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1614223658824},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1614223658779},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1614223658784},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1614223658826},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1614223658782},{"_id":"themes/next/_vendors.yml","hash":"842505bac8e3174ca98c6c988fdd9d48bcbe6cf4","modified":1614223658835},{"_id":"themes/next/package.json","hash":"8cb368a627f118170d04cc4f100a958d60657b02","modified":1614223659142},{"_id":"themes/next/README.md","hash":"de109b73e09826f6bccceae60c618739a794f8f7","modified":1614223658829},{"_id":"themes/next/.DS_Store","hash":"8db052c5dcf22e1ec33da72ae31302b80a464a9b","modified":1614223658775},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1614223658837},{"_id":"themes/next/.github/.DS_Store","hash":"0da6306bda0fba040401168a94ef406c16a576ce","modified":1614223658786},{"_id":"themes/next/_config.yml","hash":"0ee3349292ac9479b486e85133ef3ed795baef0e","modified":1632381247405},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1614223658788},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1614223658799},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1614223659145},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1614223658791},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1614223658802},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1614223658805},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1614223658803},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1614223658808},{"_id":"themes/next/.github/labeler.yml","hash":"e7033752b1f7c35adb61c2b38aad0a9202cdd19b","modified":1614223658807},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1614223658858},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1614223658841},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1614223658845},{"_id":"themes/next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":1614223658859},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1614223658843},{"_id":"themes/next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":1614223658861},{"_id":"themes/next/languages/default.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1614223658863},{"_id":"themes/next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":1614223658866},{"_id":"themes/next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":1614223658868},{"_id":"themes/next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":1614223658872},{"_id":"themes/next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1614223658864},{"_id":"themes/next/languages/ja.yml","hash":"99f6f84f5cb6631b7ae0b5594af2ea2940c3558e","modified":1614223658875},{"_id":"themes/next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":1614223658870},{"_id":"themes/next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":1614223658874},{"_id":"themes/next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":1614223658878},{"_id":"themes/next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":1614223658884},{"_id":"themes/next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":1614223658882},{"_id":"themes/next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":1614223658880},{"_id":"themes/next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":1614223658887},{"_id":"themes/next/languages/si.yml","hash":"0afecef3d81b880cc19769062968d8562a1cd93b","modified":1614223658889},{"_id":"themes/next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":1614223658892},{"_id":"themes/next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":1614223658894},{"_id":"themes/next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":1614223658900},{"_id":"themes/next/languages/zh-TW.yml","hash":"8d6f8d90aedcc5c844da93e196bfde0c0161385b","modified":1614223658905},{"_id":"themes/next/languages/zh-HK.yml","hash":"38b99be8cea1cfd79f36deca13be665dedfad9c5","modified":1614223658902},{"_id":"themes/next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":1614223658897},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1614223659129},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1614223659126},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1614223659123},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1614223659137},{"_id":"themes/next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1614223659132},{"_id":"themes/next/layout/_layout.njk","hash":"9eae5c246032788bd15d89679a1c4d5dca5a80aa","modified":1631374341451},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1614223659134},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1614223658795},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1614223658793},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1614223660234},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1614223658794},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1614223658797},{"_id":"themes/next/.github/workflows/linter.yml","hash":"a3019edd2185c4c287a682fdd76043e107ed927b","modified":1614223658813},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1614223658812},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"a33cd7c7644c8e89c885545ddafc437274ff64ff","modified":1614223658810},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1614223658815},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1614223658817},{"_id":"themes/next/.github/workflows/stale.yml","hash":"e1d9cc9addc35cfb53f971f14d9d04065c941df0","modified":1614223658820},{"_id":"themes/next/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1614223658821},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9abd8473985f2bf1557b1aac31b436c92d5450a7","modified":1614223658855},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1614223658851},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1614223658853},{"_id":"themes/next/docs/ru/README.md","hash":"63df0665005063108e1bc19df3cf8c4e46facb95","modified":1614223658848},{"_id":"themes/next/layout/_macro/passage-end-tag.njk","hash":"0bfea3043d282b70769f61185d008001b585bf59","modified":1614237799314},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1614223658913},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"cbf838ca59646f128c9111bb28921c1d04d8dcaf","modified":1614223658919},{"_id":"themes/next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1614223658950},{"_id":"themes/next/layout/_macro/post.njk","hash":"16a3b8b81b38a206b260bd7795f401c73803b8a6","modified":1614237999284},{"_id":"themes/next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1614223658923},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1614223658967},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"dfd91d64ebc06b5b139ee97424f4f93e66938e34","modified":1614223658998},{"_id":"themes/next/layout/_third-party/index.njk","hash":"467b45a4912369bcba77908151e76a3f3ad0fed2","modified":1614223659053},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1614223659089},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1614223659096},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6f0433940680c0f9db37542ca36f76e4bb1c1d50","modified":1614223659002},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1614223659004},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1614223659006},{"_id":"themes/next/layout/_partials/footer.njk","hash":"7e7d29c9ae0d97a8c5253921c3392ac10e124446","modified":1614238173166},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1614223659416},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1614223659094},{"_id":"themes/next/source/css/_mixins.styl","hash":"6bca0a5dc96fea392a0da53e0566ec2a113ec382","modified":1614223659950},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1614223660152},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1614223660156},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1614223659009},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1614223660159},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1614223660162},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1614223660169},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1614223660172},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1614223660165},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1614223660181},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1614223660179},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1614223660175},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1614223660183},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1614223660189},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1614223660186},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1614223660191},{"_id":"themes/next/source/js/algolia-search.js","hash":"a360423984cdd915d04365c51bcab440e52d7223","modified":1614223660195},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1614223660198},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1614223660205},{"_id":"themes/next/source/js/local-search.js","hash":"da2051e7cab184ae4aa64457c5db7476b4645fdc","modified":1614223660202},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1614223659149},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1614223659195},{"_id":"themes/next/scripts/filters/locals.js","hash":"374c9211b3b6a5b2ad31f1bea69a22f2727f633a","modified":1614223659198},{"_id":"themes/next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1614223659200},{"_id":"themes/next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":1614223659203},{"_id":"themes/next/scripts/helpers/engine.js","hash":"0208f17281a1afe3da1298dd52350eb838098349","modified":1614223659207},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1614223659254},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"413c51fa3caa87fe95d1d8f95e6023f096515632","modified":1614223659311},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1614223659323},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1614223659352},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1614223659356},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1614223659379},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1614223659382},{"_id":"themes/next/source/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1614223660208},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1614223659385},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1614223659391},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1614223659387},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1614223659396},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":1614223659399},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1614223659402},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1614223659405},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1614223659411},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1614223659407},{"_id":"themes/next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1614223660211},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1614223660225},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1614223660228},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1614223660238},{"_id":"themes/next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1614223660231},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1614223660246},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1614223660249},{"_id":"themes/next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1614223660257},{"_id":"themes/next/source/js/utils.js","hash":"fcb84304fc3ba06f8c4f840fe1e0843339e0899d","modified":1614223660220},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1614223660251},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1614223660254},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1614223660267},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1614223660264},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1614223660273},{"_id":"themes/next/test/tags/mermaid.js","hash":"ed5b5a70ee49842501c952c4d62483f1fc8eba6b","modified":1614223660261},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1614223660270},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1614223658930},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1614223660277},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1614223660243},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1614223658942},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1614223658936},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1614223658939},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"3aa9dd09f91c29e79339d2335d785dc547f98d60","modified":1631350703282},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1614223658957},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1614223658955},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1614223658945},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1614223658948},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1614223658962},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1614223658971},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1614223658964},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1614223658976},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1614223658960},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1614223658973},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1614223658984},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"1410fad73e0a08a45166e4a055ba150fd06e8636","modified":1631628499281},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1614223658981},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1614223658987},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1614223658990},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1614223658992},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1614223659040},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":1614223658996},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1614223659037},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"089e05126e7e4033eff90a26f946c419f2a1e87a","modified":1614223659043},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1614223659048},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"c1bf0753fc4bc5f21d61eaffbcc915a462c7d830","modified":1614223659045},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1614223659027},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"7a07bbfb09ddf70b919f0ebe1b00942c96152389","modified":1614223659051},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1614223659030},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1614223659017},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1614223659022},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1614223659014},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1614223659034},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"47a982aec8830c2f9711b2aff59ff83f09deb09e","modified":1614223659058},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1614223659024},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1614223659061},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"f4fd63b9f9230dadd1190f79d59313751925ed90","modified":1614223659064},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1614223659102},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1614223659019},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"0ff61346dc1327054ea2c211ba6fb654cdcdfd8d","modified":1614223659109},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1614223659099},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1614223659111},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":1614223659114},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":1614223659118},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"b6241ebbb091ef18b3d06cba08ac2e04e3f67a7d","modified":1614223659121},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1614223659106},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1614223660136},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1614223660139},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1614223660141},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1614223660144},{"_id":"themes/next/source/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1614224162272},{"_id":"themes/next/scripts/events/lib/config.js","hash":"09b58494e9d9d25542d1d218f2d0ffc4d2da9f30","modified":1614223659153},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1614223659156},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1614223659159},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9d15d0d6a58b1df74827288f117af22b4b6aafe5","modified":1614223660215},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"d1ecc44f9f6e236bf910e36150767d36be4658b2","modified":1614223659165},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1614223659162},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1614223659176},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"ecc93ba67af26b6715fc75001fa0c3131b726241","modified":1614223659170},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"cc1e2d5921c6990f94f3cf11b1ff7533a21da9b7","modified":1614223659179},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1614223659173},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7c0533bac4400689a0d5ab3a188ce42b9375de46","modified":1614223659185},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"32a1d9ad50621a78d0243e176c8b05ff7866fd5b","modified":1614223659182},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"60be56c9ba590e5bcb80d1607ca7eeedde9fdfaa","modified":1614223659190},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1614223659192},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1614223659187},{"_id":"themes/next/source/js/src/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1614224162275},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":1614223659423},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1614223659420},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1614223659511},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0061d220e4ba30913b917927580518ec91c20f14","modified":1614303965039},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":1614223659426},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1614223659616},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"db5ddaa8fd2101b0fd7108ce4bbcb9f0649fa223","modified":1614223659700},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1614223659720},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"9f88d350df8115d26c6adbc2025a27ef9a42d7ff","modified":1614223659619},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1614223659705},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1614223659702},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1614223659946},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1614223659821},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1614223659843},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1614223659986},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1614223659752},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1614223659955},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1614223659979},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1614223660016},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1614223660012},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1614223660054},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1614223660022},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1614223660019},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"87e163de866938c668ec33e6ff8972b7a968e0af","modified":1614223660080},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1614223660048},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1614223660087},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1614223660113},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1614223660121},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1614223660117},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"2d337a12c5c668ee64447bda5a9ed64eaed5b29e","modified":1614223660127},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1614223660132},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"dc68f16eceaa006e9735d7ff7821af7f4ef50979","modified":1614223660124},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1614223659451},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1614223659469},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1614223660129},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1614223659447},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1614223659500},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1614223659494},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1614223659444},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1614223659449},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"967021e5483495bdefac9e0b3e1c84c366c657fd","modified":1614223659497},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1614223659429},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1614223659506},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b1181c5f12a70b8bf710586fcb0d7959841ee512","modified":1614223659502},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1614223659432},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1614223659434},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1614223659514},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1614223659440},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1614223659438},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1614223659520},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1614223659518},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1614223659516},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1614223659536},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1614223659526},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1614223659523},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":1614223659565},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1614223659569},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1614223659572},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1614223659578},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1614223659531},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":1614223659614},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"d180871d4440090241fc988736c1f3a7efb4b1ba","modified":1614223659655},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1614223659664},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1614223659668},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1614223659677},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1614223659672},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1614223659681},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1614223659684},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":1614223659687},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1614223659710},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1614223659692},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":1614223659716},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1614223659853},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1614223659694},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1614223659857},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1614223659863},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1614223659867},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"79ffcf92771cd48f4a686f9d8d7d610f39e9fc1f","modified":1614223659870},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1614223659872},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":1614223659897},{"_id":"themes/next/source/images/author.png","hash":"c0f9632ffbae04b6d95f58c95a165affcc63a804","modified":1614223993796},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1614223659929},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1614223659936},{"_id":"themes/next/source/images/WechatPay.jpeg","hash":"4b9d75f82c409c0dfe49c72b349b926c3c1f5e1d","modified":1614224006609},{"_id":"themes/next/source/images/Alipay.jpeg","hash":"38569d1dc192489a4dca73112fb1258d503cdc3a","modified":1614223980494},{"_id":"source/_posts/vuex/vuex-1.png","hash":"daca8333760b748610b4b726fe6d3bbff44f5208","modified":1615130645256},{"_id":"public/about/index.html","hash":"d2f012337d33428401c7d795a7a465ffc40abf8e","modified":1631108568643},{"_id":"public/tags/index.html","hash":"84c6856c5cf182decf254f66ce9612754b34ef77","modified":1631108568643},{"_id":"public/2021/09/08/微前端-二-孙子应用/index.html","hash":"4d268cde6837ec9d16bb57ec2ab817aca5966e2e","modified":1631108568643},{"_id":"public/categories/index.html","hash":"9ea0df71bbfbf4935dbffa673404483fa32d07ec","modified":1631108568643},{"_id":"public/archives/index.html","hash":"89243acc910b179172b1ec0f8fbeb98a5dc05723","modified":1631108568643},{"_id":"public/archives/2021/index.html","hash":"30233152ec8b1bfcbaec9ae5e8e39e4dbdd5151a","modified":1631108568643},{"_id":"public/archives/2021/02/index.html","hash":"9aea74d5fe8addac9d178160a0e178c96a6ae32b","modified":1631108568643},{"_id":"public/archives/2021/03/index.html","hash":"098ad2372a1bb12268896eb40dbb43c56691de3a","modified":1631108568643},{"_id":"public/archives/2021/09/index.html","hash":"f2f28bdc46b1ca863ff856013d52dcaf86c6a8cb","modified":1631108568643},{"_id":"public/categories/前端工程化/index.html","hash":"714a8276449ba763cfdc4514bf096bf6eadd89f9","modified":1631108568643},{"_id":"public/categories/Javascript/index.html","hash":"cae66e57712d5d5a48b44ebbb9ca8ede91d042e5","modified":1631108568643},{"_id":"public/categories/微前端/index.html","hash":"4080441ca1f98262580ebca467dc0f2323aade8d","modified":1631108568643},{"_id":"public/categories/vue/index.html","hash":"d335c063bee50768c65b3deaad326d18f1234692","modified":1631108568643},{"_id":"public/tags/Promise/index.html","hash":"780a14cf1e681114cc93d22bc9e45cac230961ea","modified":1631108568643},{"_id":"public/tags/工程化/index.html","hash":"cdb0e065dabc8929821a69222bc2bc10833e5ed5","modified":1631108568643},{"_id":"public/tags/micro/index.html","hash":"9cf7860e507d5e0c97df0863da338d3aa5c38429","modified":1631108568643},{"_id":"public/tags/vuex/index.html","hash":"d64de19862ea5429026d86d8be1a2fa4efd8034f","modified":1631108568643},{"_id":"public/2021/09/06/微前端(一)-父子应用/index.html","hash":"5038db89f1cc01e6329e516809c450b3c4d43b43","modified":1631108568643},{"_id":"public/2021/03/14/import和require区别/index.html","hash":"de4ddd8102df449c2b5a04988c4f331711da6e74","modified":1631108568643},{"_id":"public/2021/03/14/模块化2/index.html","hash":"f3328b38021466bf16a23a78e0d1166189165144","modified":1631108568643},{"_id":"public/2021/03/05/vuex/index.html","hash":"2d887282ecdf81b398faec476eb23ffaea916141","modified":1631108568643},{"_id":"public/2021/03/07/模块化1/index.html","hash":"1e8c1a405749ed54529d51b7884dfa505369d2d4","modified":1631108568643},{"_id":"public/2021/02/23/Promise2/index.html","hash":"e464cb5f3b4f7d48d4e7c0a875bd9ed282a49e37","modified":1631108568643},{"_id":"public/2021/02/23/Promise1/index.html","hash":"74cd2c751d98e2691de6a8b1ee6f6541367df9b9","modified":1631108568643},{"_id":"public/2021/02/23/Promise3/index.html","hash":"e3961cb6fc9f5ed115ad6ac9eed0a5b52c91487b","modified":1631108568643},{"_id":"public/index.html","hash":"f861429d345686f787e8571e9fced5b2c64de0c7","modified":1631108568643},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1631108568643},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1631108568643},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1631108568643},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1631108568643},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1631108568643},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1631108568643},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1631108568643},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1631108568643},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1631108568643},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1631108568643},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1631108568643},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1631108568643},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1631108568643},{"_id":"public/README.MDOWN","hash":"098f09befdcfb6646e9d474e6e115d8bfb907658","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1631108568643},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1631108568643},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1631108568643},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1631108568643},{"_id":"public/images/author.png","hash":"c0f9632ffbae04b6d95f58c95a165affcc63a804","modified":1631108568643},{"_id":"public/images/WechatPay.jpeg","hash":"4b9d75f82c409c0dfe49c72b349b926c3c1f5e1d","modified":1631108568643},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1631108568643},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1631108568643},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1631108568643},{"_id":"public/images/Alipay.jpeg","hash":"38569d1dc192489a4dca73112fb1258d503cdc3a","modified":1631108568643},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1631108568643},{"_id":"public/js/algolia-search.js","hash":"a360423984cdd915d04365c51bcab440e52d7223","modified":1631108568643},{"_id":"public/js/local-search.js","hash":"da2051e7cab184ae4aa64457c5db7476b4645fdc","modified":1631108568643},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1631108568643},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1631108568643},{"_id":"public/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1631108568643},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1631108568643},{"_id":"public/js/utils.js","hash":"fcb84304fc3ba06f8c4f840fe1e0843339e0899d","modified":1631108568643},{"_id":"public/js/schemes/muse.js","hash":"9d15d0d6a58b1df74827288f117af22b4b6aafe5","modified":1631108568643},{"_id":"public/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1631108568643},{"_id":"public/js/src/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1631108568643},{"_id":"public/css/main.css","hash":"54508d1cead8090f10ccf410563a469d4a391ca1","modified":1631108568643},{"_id":"public/2021/09/06/微前端(一)-父子应用/加载机制.jpg","hash":"8f4a6274d1fbe81241af3c6e10333c5de0a6ad45","modified":1631108568643},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1631108568643},{"_id":"public/2021/03/05/vuex/vuex-1.png","hash":"daca8333760b748610b4b726fe6d3bbff44f5208","modified":1631108568643},{"_id":"source/_posts/微前端(一)-父子应用/micro-1.jpg","hash":"8f4a6274d1fbe81241af3c6e10333c5de0a6ad45","modified":1631346566318},{"_id":"source/_data/DaoVoice.swig","hash":"5f11e602c5da882d0e854614f50af3ecffcbb5ce","modified":1631349972029},{"_id":"source/_data/Aplayer.swig","hash":"8f245698bf2d28a297a525fe362a60adf86c79ac","modified":1631372582728},{"_id":"themes/next/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1631373410817},{"_id":"themes/next/dist/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1631373410813},{"_id":"themes/next/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1631373410820},{"_id":"themes/next/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1631373410822},{"_id":"themes/next/dist/music.js","hash":"77ed485aa68c8474b14ee30521c7698575121a21","modified":1631373445293},{"_id":"source/_data/APlayer.swig","hash":"257137051eb5ba40aeab8e00e042dae9ae578acd","modified":1631438913747},{"_id":"source/_posts/Babel使用.md","hash":"0ec46a04a4d2f13b1844d265ef7d2c8808d18322","modified":1631883229443},{"_id":"source/_posts/Webpack常用loader.md","hash":"b9080a29a199207de5f95fd29a8dfc6fb245c925","modified":1631882482693},{"_id":"source/_posts/Webpack常用plugin.md","hash":"42b01897928effed5f0d1da84d6d32970712c7ce","modified":1631882543329},{"_id":"source/_posts/Webpack打包原理.md","hash":"edbca3f6f42ae66b5cf057d4e9ae828242f9d7b5","modified":1631882641884},{"_id":"source/images/wxpay.jpg","hash":"55bdba5eaf9e12177b004fc7e9c230e4f7685c8f","modified":1632367325492},{"_id":"source/images/alipay.jpg","hash":"da47959ff0f76b452e4f44e16dd6ece7805a115b","modified":1632367129142},{"_id":"source/images/wechatpay.jpg","hash":"55bdba5eaf9e12177b004fc7e9c230e4f7685c8f","modified":1632367588445}],"Category":[{"name":"Javascript","_id":"cktbjxf290004bzoparwdefwr"},{"name":"前端工程化","_id":"cktbjxf2k000kbzop8s5j7sit"},{"name":"微前端","_id":"cktbjxf2k000pbzop8rl652mj"},{"name":"vue","_id":"cktbjxf2q0018bzopamy88ufn"},{"name":"webpack","_id":"cktocv9zw0002iyop972b21c3"},{"name":"Babel","_id":"cktocva010005iyophu28gvb3"},{"name":"Webpack","parent":"cktocva010005iyophu28gvb3","_id":"cktod5329000jiyopeoue5cjh"}],"Data":[{"_id":"DaoVoice","data":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}"},{"_id":"APlayer","data":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n"}],"Page":[{"title":"about","date":"2021-02-25T13:37:37.000Z","_content":"\n本站采用Hexo中Next Picses搭建的网站，使用GitHub+Action自动部署\n\n&emsp;\n&emsp;\n#### <center>你若盛开 蝴蝶自来</center>\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-02-25 21:37:37\n---\n\n本站采用Hexo中Next Picses搭建的网站，使用GitHub+Action自动部署\n\n&emsp;\n&emsp;\n#### <center>你若盛开 蝴蝶自来</center>\n\n\n","updated":"2021-02-25T13:48:43.696Z","path":"about/index.html","comments":1,"layout":"page","_id":"cktbjxf230000bzop79t012b1","content":"<p>本站采用Hexo中Next Picses搭建的网站，使用GitHub+Action自动部署</p>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"你若盛开-蝴蝶自来\"><a href=\"#你若盛开-蝴蝶自来\" class=\"headerlink\" title=\"你若盛开 蝴蝶自来\"></a><center>你若盛开 蝴蝶自来</center></h4>","site":{"data":{}},"excerpt":"","more":"<p>本站采用Hexo中Next Picses搭建的网站，使用GitHub+Action自动部署</p>\n<p>&emsp;<br>&emsp;</p>\n<h4 id=\"你若盛开-蝴蝶自来\"><a href=\"#你若盛开-蝴蝶自来\" class=\"headerlink\" title=\"你若盛开 蝴蝶自来\"></a><center>你若盛开 蝴蝶自来</center></h4>"},{"title":"tags","date":"2021-02-25T06:45:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-02-25 14:45:20\ntype: tags\n---\n","updated":"2021-02-25T06:45:48.700Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cktbjxf270002bzopdzf30y0z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","type":"categories","comments":0,"date":"2021-02-24T10:03:47.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ncomments: false\ndate: 2021-02-24 18:03:47\n---\n","updated":"2021-02-25T03:47:08.897Z","path":"categories/index.html","layout":"page","_id":"cktbjxf2a0006bzopeqvpcjkp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Promise(二)——并行请求","date":"2021-02-23T06:58:30.000Z","copyright":true,"comments":1,"_content":"\n<!-- <img src=\"https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg\" width=\"100%\" height=\"480px;\"/> -->\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n\n### Promise并行请求\n\n- getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误\n- 每一个promise都必须返回resolve结果才正确\n- 每一个promise都不处理错误\n- 参考：https://www.jianshu.com/p/dbda3053da20\n  \n\n```javascript\n/**\n * 每一个promise都必须返回resolve结果才正确\n * 每一个promise都不处理错误\n */\n\nconst getA = new Promise((resolve, reject) => {\n   //模拟异步任务\n   setTimeout(function(){\n     resolve(2);\n   }, 1000) \n})\n.then(result => result)\n\n\nconst getB = new Promise((resolve, reject) => {\n   setTimeout(function(){\n     // resolve(3);\n     reject('Error in getB');\n   }, 1000) \n})\n.then(result => result)\n\n\nPromise.all([getA, getB]).then(data=>{\n    console.log(data)\n})\n.catch(e => console.log(e));\n```\n\n- getA和getB并行执行，然后输出结果。总是返回resolve结果\n- 每一个promise自己处理错误\n\n```javascript\n/**\n * 每一个promise自己处理错误\n */\n\nconst getA = new Promise((resolve, reject) => {\n   //模拟异步任务\n   setTimeout(function(){\n     resolve(2);\n   }, 1000) \n})\n.then(result => result)\n.catch(e=>{\n\n})\n\n\nconst getB = new Promise((resolve, reject) => {\n   setTimeout(function(){\n     // resolve(3);\n     reject('Error in getB');\n   }, 1000) \n})\n.then(result => result)\n.catch(e=>e)\n\n\nPromise.all([getA, getB]).then(data=>{\n    console.log(data)\n})\n.catch(e => console.log(e));\n```\n\n- Promise.all传入同一个方法不同参数的封装\n- 应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧\n- 参考：https://blog.csdn.net/qq_25842063/article/details/84284911\n\n```javascript\nlet tasks = [];\nfor (let i = 1; i <= 5; i++) {\n    tasks.push(i);\n};\n/*\n* @params : func:你封装的方法 params: 参数的数组\n*/\nlet getDataBind = (func, params) => {\n        return params.map( item => {\n            return func.call(null, item) //传参\n        })\n    }\n /*\n @params : page_no 页码  \n getDate 可以换成你自己需要重复操作的方法,同理\n */\nlet getData = (page_no) => {\n        let saveListData = JSON.parse(localStorage.getItem(this.props.saveListData));\n        let params = {\n            page_no:page_no,\n            ...saveListData.loadParams\n        }\n        return new Promise(resolve => {\n            get(this.props.sortUrl, params, this, false).then(function (data) {\n                resolve(data.result;);\n            });\n        })\n    }  \n Promise.all(this.getDataBind(this.getData, arrPage))\n\t.then( resultArr  => {\n\t\t    resultArr = resultArr.flat();//拉平数组\n\t\t    console.log(resultArr)    //这里就获取到所有页的数据了\n\t});\n//\n\n```\n","source":"_posts/Promise2.md","raw":"---\ntitle: Promise(二)——并行请求\ndate: 2021-02-23 14:58:30\ntags: Promise\ncategories: Javascript\ncopyright: true\ncomments: true\n---\n\n<!-- <img src=\"https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg\" width=\"100%\" height=\"480px;\"/> -->\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n\n### Promise并行请求\n\n- getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误\n- 每一个promise都必须返回resolve结果才正确\n- 每一个promise都不处理错误\n- 参考：https://www.jianshu.com/p/dbda3053da20\n  \n\n```javascript\n/**\n * 每一个promise都必须返回resolve结果才正确\n * 每一个promise都不处理错误\n */\n\nconst getA = new Promise((resolve, reject) => {\n   //模拟异步任务\n   setTimeout(function(){\n     resolve(2);\n   }, 1000) \n})\n.then(result => result)\n\n\nconst getB = new Promise((resolve, reject) => {\n   setTimeout(function(){\n     // resolve(3);\n     reject('Error in getB');\n   }, 1000) \n})\n.then(result => result)\n\n\nPromise.all([getA, getB]).then(data=>{\n    console.log(data)\n})\n.catch(e => console.log(e));\n```\n\n- getA和getB并行执行，然后输出结果。总是返回resolve结果\n- 每一个promise自己处理错误\n\n```javascript\n/**\n * 每一个promise自己处理错误\n */\n\nconst getA = new Promise((resolve, reject) => {\n   //模拟异步任务\n   setTimeout(function(){\n     resolve(2);\n   }, 1000) \n})\n.then(result => result)\n.catch(e=>{\n\n})\n\n\nconst getB = new Promise((resolve, reject) => {\n   setTimeout(function(){\n     // resolve(3);\n     reject('Error in getB');\n   }, 1000) \n})\n.then(result => result)\n.catch(e=>e)\n\n\nPromise.all([getA, getB]).then(data=>{\n    console.log(data)\n})\n.catch(e => console.log(e));\n```\n\n- Promise.all传入同一个方法不同参数的封装\n- 应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧\n- 参考：https://blog.csdn.net/qq_25842063/article/details/84284911\n\n```javascript\nlet tasks = [];\nfor (let i = 1; i <= 5; i++) {\n    tasks.push(i);\n};\n/*\n* @params : func:你封装的方法 params: 参数的数组\n*/\nlet getDataBind = (func, params) => {\n        return params.map( item => {\n            return func.call(null, item) //传参\n        })\n    }\n /*\n @params : page_no 页码  \n getDate 可以换成你自己需要重复操作的方法,同理\n */\nlet getData = (page_no) => {\n        let saveListData = JSON.parse(localStorage.getItem(this.props.saveListData));\n        let params = {\n            page_no:page_no,\n            ...saveListData.loadParams\n        }\n        return new Promise(resolve => {\n            get(this.props.sortUrl, params, this, false).then(function (data) {\n                resolve(data.result;);\n            });\n        })\n    }  \n Promise.all(this.getDataBind(this.getData, arrPage))\n\t.then( resultArr  => {\n\t\t    resultArr = resultArr.flat();//拉平数组\n\t\t    console.log(resultArr)    //这里就获取到所有页的数据了\n\t});\n//\n\n```\n","slug":"Promise2","published":1,"updated":"2021-03-07T15:24:52.078Z","layout":"post","photos":[],"link":"","_id":"cktbjxf250001bzop1e5bfuen","content":"<!-- <img data-src=\"https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg\" width=\"100%\" height=\"480px;\"/> -->\n\n<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise并行请求\"><a href=\"#Promise并行请求\" class=\"headerlink\" title=\"Promise并行请求\"></a>Promise并行请求</h3><ul>\n<li>getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误</li>\n<li>每一个promise都必须返回resolve结果才正确</li>\n<li>每一个promise都不处理错误</li>\n<li>参考：<a href=\"https://www.jianshu.com/p/dbda3053da20\">https://www.jianshu.com/p/dbda3053da20</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise都必须返回resolve结果才正确</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise都不处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//模拟异步任务</span></span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// resolve(3);</span></span><br><span class=\"line\">     reject(<span class=\"string\">&#x27;Error in getB&#x27;</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getA, getB]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getA和getB并行执行，然后输出结果。总是返回resolve结果</li>\n<li>每一个promise自己处理错误</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise自己处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//模拟异步任务</span></span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// resolve(3);</span></span><br><span class=\"line\">     reject(<span class=\"string\">&#x27;Error in getB&#x27;</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getA, getB]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Promise.all传入同一个方法不同参数的封装</li>\n<li>应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧</li>\n<li>参考：<a href=\"https://blog.csdn.net/qq_25842063/article/details/84284911\">https://blog.csdn.net/qq_25842063/article/details/84284911</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tasks = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    tasks.push(i);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params : func:你封装的方法 params: 参数的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getDataBind = <span class=\"function\">(<span class=\"params\">func, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> params.map( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(<span class=\"literal\">null</span>, item) <span class=\"comment\">//传参</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> @params : page_no 页码  </span></span><br><span class=\"line\"><span class=\"comment\"> getDate 可以换成你自己需要重复操作的方法,同理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getData = <span class=\"function\">(<span class=\"params\">page_no</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> saveListData = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"built_in\">this</span>.props.saveListData));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">            page_no:page_no,</span><br><span class=\"line\">            ...saveListData.loadParams</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            get(<span class=\"built_in\">this</span>.props.sortUrl, params, <span class=\"built_in\">this</span>, <span class=\"literal\">false</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                resolve(data.result;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> <span class=\"built_in\">Promise</span>.all(<span class=\"built_in\">this</span>.getDataBind(<span class=\"built_in\">this</span>.getData, arrPage))</span><br><span class=\"line\">\t.then( <span class=\"function\"><span class=\"params\">resultArr</span>  =&gt;</span> &#123;</span><br><span class=\"line\">\t\t    resultArr = resultArr.flat();<span class=\"comment\">//拉平数组</span></span><br><span class=\"line\">\t\t    <span class=\"built_in\">console</span>.log(resultArr)    <span class=\"comment\">//这里就获取到所有页的数据了</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!-- <img data-src=\"https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg\" width=\"100%\" height=\"480px;\"/> -->\n\n<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise并行请求\"><a href=\"#Promise并行请求\" class=\"headerlink\" title=\"Promise并行请求\"></a>Promise并行请求</h3><ul>\n<li>getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误</li>\n<li>每一个promise都必须返回resolve结果才正确</li>\n<li>每一个promise都不处理错误</li>\n<li>参考：<a href=\"https://www.jianshu.com/p/dbda3053da20\">https://www.jianshu.com/p/dbda3053da20</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise都必须返回resolve结果才正确</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise都不处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//模拟异步任务</span></span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// resolve(3);</span></span><br><span class=\"line\">     reject(<span class=\"string\">&#x27;Error in getB&#x27;</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getA, getB]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getA和getB并行执行，然后输出结果。总是返回resolve结果</li>\n<li>每一个promise自己处理错误</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 每一个promise自己处理错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getA = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//模拟异步任务</span></span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getB = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// resolve(3);</span></span><br><span class=\"line\">     reject(<span class=\"string\">&#x27;Error in getB&#x27;</span>);</span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([getA, getB]).then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Promise.all传入同一个方法不同参数的封装</li>\n<li>应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧</li>\n<li>参考：<a href=\"https://blog.csdn.net/qq_25842063/article/details/84284911\">https://blog.csdn.net/qq_25842063/article/details/84284911</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tasks = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    tasks.push(i);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @params : func:你封装的方法 params: 参数的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getDataBind = <span class=\"function\">(<span class=\"params\">func, params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> params.map( <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.call(<span class=\"literal\">null</span>, item) <span class=\"comment\">//传参</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> @params : page_no 页码  </span></span><br><span class=\"line\"><span class=\"comment\"> getDate 可以换成你自己需要重复操作的方法,同理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getData = <span class=\"function\">(<span class=\"params\">page_no</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> saveListData = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"built_in\">this</span>.props.saveListData));</span><br><span class=\"line\">        <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">            page_no:page_no,</span><br><span class=\"line\">            ...saveListData.loadParams</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            get(<span class=\"built_in\">this</span>.props.sortUrl, params, <span class=\"built_in\">this</span>, <span class=\"literal\">false</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                resolve(data.result;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> <span class=\"built_in\">Promise</span>.all(<span class=\"built_in\">this</span>.getDataBind(<span class=\"built_in\">this</span>.getData, arrPage))</span><br><span class=\"line\">\t.then( <span class=\"function\"><span class=\"params\">resultArr</span>  =&gt;</span> &#123;</span><br><span class=\"line\">\t\t    resultArr = resultArr.flat();<span class=\"comment\">//拉平数组</span></span><br><span class=\"line\">\t\t    <span class=\"built_in\">console</span>.log(resultArr)    <span class=\"comment\">//这里就获取到所有页的数据了</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Promise(一)—顺序请求","date":"2021-02-23T06:58:30.000Z","copyright":true,"comments":1,"_content":"\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n### Promise顺序请求\n\n方法1——连续使用then链式调用\n方法2——使用promise构建队列\n方法3——使用async、await实现类似同步编程，async函数内部实现同步\n参考：https://www.jianshu.com/p/dbda3053da20\n\n#### 方法1：链式调用\n\n```javascript\nfunction getA(){\n    return  new Promise(function(resolve, reject){ \n    setTimeout(function(){     \n          resolve(2);\n      }, 1000);\n  });\n}\n \nfunction getB(){\n    return  new Promise(function(resolve, reject){       \n        setTimeout(function(){\n            resolve(3);\n        }, 1000);\n    });\n}\n \nfunction addAB(a,b){\n    return a+b\n}\n\nfunction getResult(){\n    var  obj={};\n    Promise.resolve().then(function(){\n        return  getA() \n    })\n    .then(function(a){\n         obj.a=a;\n    })\n    .then(function(){\n        return getB() \n    })\n    .then(function(b){\n         obj.b=b;\n         return obj;\n    })\n    .then(function(obj){\n       return  addAB(obj['a'],obj['b'])\n    })\n    .then(data=>{\n        console.log(data)\n    })\n    .catch(e => console.log(e));\n}\ngetResult();\n```\n#### 方法2：（TODO）\n#### 方法3：（TODO）\n\n\n","source":"_posts/Promise1.md","raw":"---\ntitle: Promise(一)—顺序请求\ndate: 2021-02-23 14:58:30\ntags: Promise\ncategories: Javascript\ncopyright: true\ncomments: true\n---\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n### Promise顺序请求\n\n方法1——连续使用then链式调用\n方法2——使用promise构建队列\n方法3——使用async、await实现类似同步编程，async函数内部实现同步\n参考：https://www.jianshu.com/p/dbda3053da20\n\n#### 方法1：链式调用\n\n```javascript\nfunction getA(){\n    return  new Promise(function(resolve, reject){ \n    setTimeout(function(){     \n          resolve(2);\n      }, 1000);\n  });\n}\n \nfunction getB(){\n    return  new Promise(function(resolve, reject){       \n        setTimeout(function(){\n            resolve(3);\n        }, 1000);\n    });\n}\n \nfunction addAB(a,b){\n    return a+b\n}\n\nfunction getResult(){\n    var  obj={};\n    Promise.resolve().then(function(){\n        return  getA() \n    })\n    .then(function(a){\n         obj.a=a;\n    })\n    .then(function(){\n        return getB() \n    })\n    .then(function(b){\n         obj.b=b;\n         return obj;\n    })\n    .then(function(obj){\n       return  addAB(obj['a'],obj['b'])\n    })\n    .then(data=>{\n        console.log(data)\n    })\n    .catch(e => console.log(e));\n}\ngetResult();\n```\n#### 方法2：（TODO）\n#### 方法3：（TODO）\n\n\n","slug":"Promise1","published":1,"updated":"2021-03-07T13:56:16.499Z","layout":"post","photos":[],"link":"","_id":"cktbjxf270003bzop37ie82rq","content":"<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise顺序请求\"><a href=\"#Promise顺序请求\" class=\"headerlink\" title=\"Promise顺序请求\"></a>Promise顺序请求</h3><p>方法1——连续使用then链式调用<br>方法2——使用promise构建队列<br>方法3——使用async、await实现类似同步编程，async函数内部实现同步<br>参考：<a href=\"https://www.jianshu.com/p/dbda3053da20\">https://www.jianshu.com/p/dbda3053da20</a></p>\n<h4 id=\"方法1：链式调用\"><a href=\"#方法1：链式调用\" class=\"headerlink\" title=\"方法1：链式调用\"></a>方法1：链式调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </span><br><span class=\"line\">          resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;       </span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAB</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span>  obj=&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  getA() </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">         obj.a=a;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getB() </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">         obj.b=b;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>  addAB(obj[<span class=\"string\">&#x27;a&#x27;</span>],obj[<span class=\"string\">&#x27;b&#x27;</span>])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getResult();</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2：（TODO）\"><a href=\"#方法2：（TODO）\" class=\"headerlink\" title=\"方法2：（TODO）\"></a>方法2：（TODO）</h4><h4 id=\"方法3：（TODO）\"><a href=\"#方法3：（TODO）\" class=\"headerlink\" title=\"方法3：（TODO）\"></a>方法3：（TODO）</h4>","site":{"data":{}},"excerpt":"","more":"<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise顺序请求\"><a href=\"#Promise顺序请求\" class=\"headerlink\" title=\"Promise顺序请求\"></a>Promise顺序请求</h3><p>方法1——连续使用then链式调用<br>方法2——使用promise构建队列<br>方法3——使用async、await实现类似同步编程，async函数内部实现同步<br>参考：<a href=\"https://www.jianshu.com/p/dbda3053da20\">https://www.jianshu.com/p/dbda3053da20</a></p>\n<h4 id=\"方法1：链式调用\"><a href=\"#方法1：链式调用\" class=\"headerlink\" title=\"方法1：链式调用\"></a>方法1：链式调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </span><br><span class=\"line\">          resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;       </span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAB</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span>  obj=&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  getA() </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">         obj.a=a;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getB() </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">         obj.b=b;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span>  addAB(obj[<span class=\"string\">&#x27;a&#x27;</span>],obj[<span class=\"string\">&#x27;b&#x27;</span>])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getResult();</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2：（TODO）\"><a href=\"#方法2：（TODO）\" class=\"headerlink\" title=\"方法2：（TODO）\"></a>方法2：（TODO）</h4><h4 id=\"方法3：（TODO）\"><a href=\"#方法3：（TODO）\" class=\"headerlink\" title=\"方法3：（TODO）\"></a>方法3：（TODO）</h4>"},{"title":"Promise(三)-核心源码","date":"2021-02-23T06:58:30.000Z","copyright":true,"comments":1,"_content":"<!-- <img src=\"https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg\" width=\"100%\" height=\"480px\"> -->\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n\n### Promise 核心源码\n\n参考：https://www.jianshu.com/p/43de678e918a\n\n```javascript\n  // 判断变量否为function\n  const isFunction = variable => typeof variable === 'function'\n  // 定义Promise的三种状态常量\n  const PENDING = 'PENDING'\n  const FULFILLED = 'FULFILLED'\n  const REJECTED = 'REJECTED'\n\n  class MyPromise {\n    constructor (handle) {\n      if (!isFunction(handle)) {\n        throw new Error('MyPromise must accept a function as a parameter')\n      }\n      // 添加状态\n      this._status = PENDING\n      // 添加状态\n      this._value = undefined\n      // 添加成功回调函数队列\n      this._fulfilledQueues = []\n      // 添加失败回调函数队列\n      this._rejectedQueues = []\n      // 执行handle\n      try {\n        handle(this._resolve.bind(this), this._reject.bind(this)) \n      } catch (err) {\n        this._reject(err)\n      }\n    }\n    // 添加resovle时执行的函数\n    _resolve (val) {\n      const run = () => {\n        if (this._status !== PENDING) return\n        this._status = FULFILLED\n        // 依次执行成功队列中的函数，并清空队列\n        const runFulfilled = (value) => {\n          let cb;\n          while (cb = this._fulfilledQueues.shift()) {\n            cb(value)\n          }\n        }\n        // 依次执行失败队列中的函数，并清空队列\n        const runRejected = (error) => {\n          let cb;\n          while (cb = this._rejectedQueues.shift()) {\n            cb(error)\n          }\n        }\n        /* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n          当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态\n        */\n        if (val instanceof MyPromise) {\n          val.then(value => {\n            this._value = value\n            runFulfilled(value)\n          }, err => {\n            this._value = err\n            runRejected(err)\n          })\n        } else {\n          this._value = val\n          runFulfilled(val)\n        }\n      }\n      // 为了支持同步的Promise，这里采用异步调用\n      setTimeout(run, 0)\n    }\n    // 添加reject时执行的函数\n    _reject (err) { \n      if (this._status !== PENDING) return\n      // 依次执行失败队列中的函数，并清空队列\n      const run = () => {\n        this._status = REJECTED\n        this._value = err\n        let cb;\n        while (cb = this._rejectedQueues.shift()) {\n          cb(err)\n        }\n      }\n      // 为了支持同步的Promise，这里采用异步调用\n      setTimeout(run, 0)\n    }\n    // 添加then方法\n    then (onFulfilled, onRejected) {\n      const { _value, _status } = this\n      // 返回一个新的Promise对象\n      return new MyPromise((onFulfilledNext, onRejectedNext) => {\n        // 封装一个成功时执行的函数\n        let fulfilled = value => {\n          try {\n            if (!isFunction(onFulfilled)) {\n              onFulfilledNext(value)\n            } else {\n              let res =  onFulfilled(value);\n              if (res instanceof MyPromise) {\n                // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                res.then(onFulfilledNext, onRejectedNext)\n              } else {\n                //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                onFulfilledNext(res)\n              }\n            }\n          } catch (err) {\n            // 如果函数执行出错，新的Promise对象的状态为失败\n            onRejectedNext(err)\n          }\n        }\n        // 封装一个失败时执行的函数\n        let rejected = error => {\n          try {\n            if (!isFunction(onRejected)) {\n              onRejectedNext(error)\n            } else {\n                let res = onRejected(error);\n                if (res instanceof MyPromise) {\n                  // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                  res.then(onFulfilledNext, onRejectedNext)\n                } else {\n                  //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                  onFulfilledNext(res)\n                }\n            }\n          } catch (err) {\n            // 如果函数执行出错，新的Promise对象的状态为失败\n            onRejectedNext(err)\n          }\n        }\n        switch (_status) {\n          // 当状态为pending时，将then方法回调函数加入执行队列等待执行\n          case PENDING:\n            this._fulfilledQueues.push(fulfilled)\n            this._rejectedQueues.push(rejected)\n            break\n          // 当状态已经改变时，立即执行对应的回调函数\n          case FULFILLED:\n            fulfilled(_value)\n            break\n          case REJECTED:\n            rejected(_value)\n            break\n        }\n      })\n    }\n    // 添加catch方法\n    catch (onRejected) {\n      return this.then(undefined, onRejected)\n    }\n    // 添加静态resolve方法\n    static resolve (value) {\n      // 如果参数是MyPromise实例，直接返回这个实例\n      if (value instanceof MyPromise) return value\n      return new MyPromise(resolve => resolve(value))\n    }\n    // 添加静态reject方法\n    static reject (value) {\n      return new MyPromise((resolve ,reject) => reject(value))\n    }\n    // 添加静态all方法\n    static all (list) {\n      return new MyPromise((resolve, reject) => {\n        /**\n         * 返回值的集合\n         */\n        let values = []\n        let count = 0\n        for (let [i, p] of list.entries()) {\n          // 数组参数如果不是MyPromise实例，先调用MyPromise.resolve\n          this.resolve(p).then(res => {\n            values[i] = res\n            count++\n            // 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled\n            if (count === list.length) resolve(values)\n          }, err => {\n            // 有一个被rejected时返回的MyPromise状态就变成rejected\n            reject(err)\n          })\n        }\n      })\n    }\n    // 添加静态race方法\n    static race (list) {\n      return new MyPromise((resolve, reject) => {\n        for (let p of list) {\n          // 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变\n          this.resolve(p).then(res => {\n            resolve(res)\n          }, err => {\n            reject(err)\n          })\n        }\n      })\n    }\n    finally (cb) {\n      return this.then(\n        value  => MyPromise.resolve(cb()).then(() => value),\n        reason => MyPromise.resolve(cb()).then(() => { throw reason })\n      );\n    }\n  }\n```\n\n","source":"_posts/Promise3.md","raw":"---\ntitle: Promise(三)-核心源码\ndate: 2021-02-23 14:58:30\ntags: Promise\ncategories: Javascript\ncopyright: true\ncomments: true\n---\n<!-- <img src=\"https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg\" width=\"100%\" height=\"480px\"> -->\n\n若想系统学习Promise可以阅读：[阮一峰大神写的Promise对象](https://es6.ruanyifeng.com/#docs/promise)，此篇记录常用用法。\n\n\n### Promise 核心源码\n\n参考：https://www.jianshu.com/p/43de678e918a\n\n```javascript\n  // 判断变量否为function\n  const isFunction = variable => typeof variable === 'function'\n  // 定义Promise的三种状态常量\n  const PENDING = 'PENDING'\n  const FULFILLED = 'FULFILLED'\n  const REJECTED = 'REJECTED'\n\n  class MyPromise {\n    constructor (handle) {\n      if (!isFunction(handle)) {\n        throw new Error('MyPromise must accept a function as a parameter')\n      }\n      // 添加状态\n      this._status = PENDING\n      // 添加状态\n      this._value = undefined\n      // 添加成功回调函数队列\n      this._fulfilledQueues = []\n      // 添加失败回调函数队列\n      this._rejectedQueues = []\n      // 执行handle\n      try {\n        handle(this._resolve.bind(this), this._reject.bind(this)) \n      } catch (err) {\n        this._reject(err)\n      }\n    }\n    // 添加resovle时执行的函数\n    _resolve (val) {\n      const run = () => {\n        if (this._status !== PENDING) return\n        this._status = FULFILLED\n        // 依次执行成功队列中的函数，并清空队列\n        const runFulfilled = (value) => {\n          let cb;\n          while (cb = this._fulfilledQueues.shift()) {\n            cb(value)\n          }\n        }\n        // 依次执行失败队列中的函数，并清空队列\n        const runRejected = (error) => {\n          let cb;\n          while (cb = this._rejectedQueues.shift()) {\n            cb(error)\n          }\n        }\n        /* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n          当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态\n        */\n        if (val instanceof MyPromise) {\n          val.then(value => {\n            this._value = value\n            runFulfilled(value)\n          }, err => {\n            this._value = err\n            runRejected(err)\n          })\n        } else {\n          this._value = val\n          runFulfilled(val)\n        }\n      }\n      // 为了支持同步的Promise，这里采用异步调用\n      setTimeout(run, 0)\n    }\n    // 添加reject时执行的函数\n    _reject (err) { \n      if (this._status !== PENDING) return\n      // 依次执行失败队列中的函数，并清空队列\n      const run = () => {\n        this._status = REJECTED\n        this._value = err\n        let cb;\n        while (cb = this._rejectedQueues.shift()) {\n          cb(err)\n        }\n      }\n      // 为了支持同步的Promise，这里采用异步调用\n      setTimeout(run, 0)\n    }\n    // 添加then方法\n    then (onFulfilled, onRejected) {\n      const { _value, _status } = this\n      // 返回一个新的Promise对象\n      return new MyPromise((onFulfilledNext, onRejectedNext) => {\n        // 封装一个成功时执行的函数\n        let fulfilled = value => {\n          try {\n            if (!isFunction(onFulfilled)) {\n              onFulfilledNext(value)\n            } else {\n              let res =  onFulfilled(value);\n              if (res instanceof MyPromise) {\n                // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                res.then(onFulfilledNext, onRejectedNext)\n              } else {\n                //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                onFulfilledNext(res)\n              }\n            }\n          } catch (err) {\n            // 如果函数执行出错，新的Promise对象的状态为失败\n            onRejectedNext(err)\n          }\n        }\n        // 封装一个失败时执行的函数\n        let rejected = error => {\n          try {\n            if (!isFunction(onRejected)) {\n              onRejectedNext(error)\n            } else {\n                let res = onRejected(error);\n                if (res instanceof MyPromise) {\n                  // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n                  res.then(onFulfilledNext, onRejectedNext)\n                } else {\n                  //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n                  onFulfilledNext(res)\n                }\n            }\n          } catch (err) {\n            // 如果函数执行出错，新的Promise对象的状态为失败\n            onRejectedNext(err)\n          }\n        }\n        switch (_status) {\n          // 当状态为pending时，将then方法回调函数加入执行队列等待执行\n          case PENDING:\n            this._fulfilledQueues.push(fulfilled)\n            this._rejectedQueues.push(rejected)\n            break\n          // 当状态已经改变时，立即执行对应的回调函数\n          case FULFILLED:\n            fulfilled(_value)\n            break\n          case REJECTED:\n            rejected(_value)\n            break\n        }\n      })\n    }\n    // 添加catch方法\n    catch (onRejected) {\n      return this.then(undefined, onRejected)\n    }\n    // 添加静态resolve方法\n    static resolve (value) {\n      // 如果参数是MyPromise实例，直接返回这个实例\n      if (value instanceof MyPromise) return value\n      return new MyPromise(resolve => resolve(value))\n    }\n    // 添加静态reject方法\n    static reject (value) {\n      return new MyPromise((resolve ,reject) => reject(value))\n    }\n    // 添加静态all方法\n    static all (list) {\n      return new MyPromise((resolve, reject) => {\n        /**\n         * 返回值的集合\n         */\n        let values = []\n        let count = 0\n        for (let [i, p] of list.entries()) {\n          // 数组参数如果不是MyPromise实例，先调用MyPromise.resolve\n          this.resolve(p).then(res => {\n            values[i] = res\n            count++\n            // 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled\n            if (count === list.length) resolve(values)\n          }, err => {\n            // 有一个被rejected时返回的MyPromise状态就变成rejected\n            reject(err)\n          })\n        }\n      })\n    }\n    // 添加静态race方法\n    static race (list) {\n      return new MyPromise((resolve, reject) => {\n        for (let p of list) {\n          // 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变\n          this.resolve(p).then(res => {\n            resolve(res)\n          }, err => {\n            reject(err)\n          })\n        }\n      })\n    }\n    finally (cb) {\n      return this.then(\n        value  => MyPromise.resolve(cb()).then(() => value),\n        reason => MyPromise.resolve(cb()).then(() => { throw reason })\n      );\n    }\n  }\n```\n\n","slug":"Promise3","published":1,"updated":"2021-03-07T13:56:04.026Z","layout":"post","photos":[],"link":"","_id":"cktbjxf2b0007bzop3xm04hj6","content":"<!-- <img data-src=\"https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg\" width=\"100%\" height=\"480px\"> -->\n\n<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise-核心源码\"><a href=\"#Promise-核心源码\" class=\"headerlink\" title=\"Promise 核心源码\"></a>Promise 核心源码</h3><p>参考：<a href=\"https://www.jianshu.com/p/43de678e918a\">https://www.jianshu.com/p/43de678e918a</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断变量否为function</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunction = <span class=\"function\"><span class=\"params\">variable</span> =&gt;</span> <span class=\"keyword\">typeof</span> variable === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 定义Promise的三种状态常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;PENDING&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;FULFILLED&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;REJECTED&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">handle</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFunction(handle)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;MyPromise must accept a function as a parameter&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 添加状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 添加状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 添加成功回调函数队列</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._fulfilledQueues = []</span><br><span class=\"line\">    <span class=\"comment\">// 添加失败回调函数队列</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._rejectedQueues = []</span><br><span class=\"line\">    <span class=\"comment\">// 执行handle</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      handle(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>)) </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加resovle时执行的函数</span></span><br><span class=\"line\">  _resolve (val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>._status = FULFILLED</span><br><span class=\"line\">      <span class=\"comment\">// 依次执行成功队列中的函数，并清空队列</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> runFulfilled = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._fulfilledQueues.shift()) &#123;</span><br><span class=\"line\">          cb(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> runRejected = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._rejectedQueues.shift()) &#123;</span><br><span class=\"line\">          cb(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,</span></span><br><span class=\"line\"><span class=\"comment\">        当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">        val.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._value = value</span><br><span class=\"line\">          runFulfilled(value)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._value = err</span><br><span class=\"line\">          runRejected(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._value = val</span><br><span class=\"line\">        runFulfilled(val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(run, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加reject时执行的函数</span></span><br><span class=\"line\">  _reject (err) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._status = REJECTED</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._value = err</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._rejectedQueues.shift()) &#123;</span><br><span class=\"line\">        cb(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(run, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加then方法</span></span><br><span class=\"line\">  then (onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; _value, _status &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个新的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">onFulfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 封装一个成功时执行的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> fulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isFunction(onFulfilled)) &#123;</span><br><span class=\"line\">            onFulfilledNext(value)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res =  onFulfilled(value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class=\"line\">              res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class=\"line\">              onFulfilledNext(res)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class=\"line\">          onRejectedNext(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 封装一个失败时执行的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> rejected = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isFunction(onRejected)) &#123;</span><br><span class=\"line\">            onRejectedNext(error)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> res = onRejected(error);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class=\"line\">                res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class=\"line\">                onFulfilledNext(res)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class=\"line\">          onRejectedNext(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (_status) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._fulfilledQueues.push(fulfilled)</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._rejectedQueues.push(rejected)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\">// 当状态已经改变时，立即执行对应的回调函数</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">          fulfilled(_value)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">          rejected(_value)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加catch方法</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">undefined</span>, onRejected)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态resolve方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> resolve (value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果参数是MyPromise实例，直接返回这个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> MyPromise) <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态reject方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> reject (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve ,reject</span>) =&gt;</span> reject(value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态all方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> all (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 返回值的集合</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> values = []</span><br><span class=\"line\">      <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [i, p] <span class=\"keyword\">of</span> list.entries()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resolve(p).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          values[i] = res</span><br><span class=\"line\">          count++</span><br><span class=\"line\">          <span class=\"comment\">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count === list.length) resolve(values)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 有一个被rejected时返回的MyPromise状态就变成rejected</span></span><br><span class=\"line\">          reject(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态race方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> race (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resolve(p).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(res)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          reject(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> (cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(</span><br><span class=\"line\">      value  =&gt; MyPromise.resolve(cb()).then(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">      reason =&gt; MyPromise.resolve(cb()).then(<span class=\"function\">() =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<!-- <img data-src=\"https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg\" width=\"100%\" height=\"480px\"> -->\n\n<p>若想系统学习Promise可以阅读：<a href=\"https://es6.ruanyifeng.com/#docs/promise\">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>\n<h3 id=\"Promise-核心源码\"><a href=\"#Promise-核心源码\" class=\"headerlink\" title=\"Promise 核心源码\"></a>Promise 核心源码</h3><p>参考：<a href=\"https://www.jianshu.com/p/43de678e918a\">https://www.jianshu.com/p/43de678e918a</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断变量否为function</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunction = <span class=\"function\"><span class=\"params\">variable</span> =&gt;</span> <span class=\"keyword\">typeof</span> variable === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 定义Promise的三种状态常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">&#x27;PENDING&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"string\">&#x27;FULFILLED&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">&#x27;REJECTED&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">handle</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFunction(handle)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;MyPromise must accept a function as a parameter&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 添加状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._status = PENDING</span><br><span class=\"line\">    <span class=\"comment\">// 添加状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// 添加成功回调函数队列</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._fulfilledQueues = []</span><br><span class=\"line\">    <span class=\"comment\">// 添加失败回调函数队列</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._rejectedQueues = []</span><br><span class=\"line\">    <span class=\"comment\">// 执行handle</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      handle(<span class=\"built_in\">this</span>._resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>._reject.bind(<span class=\"built_in\">this</span>)) </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加resovle时执行的函数</span></span><br><span class=\"line\">  _resolve (val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>._status = FULFILLED</span><br><span class=\"line\">      <span class=\"comment\">// 依次执行成功队列中的函数，并清空队列</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> runFulfilled = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._fulfilledQueues.shift()) &#123;</span><br><span class=\"line\">          cb(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> runRejected = <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._rejectedQueues.shift()) &#123;</span><br><span class=\"line\">          cb(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,</span></span><br><span class=\"line\"><span class=\"comment\">        当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">        val.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._value = value</span><br><span class=\"line\">          runFulfilled(value)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._value = err</span><br><span class=\"line\">          runRejected(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._value = val</span><br><span class=\"line\">        runFulfilled(val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(run, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加reject时执行的函数</span></span><br><span class=\"line\">  _reject (err) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._status !== PENDING) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._status = REJECTED</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._value = err</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cb;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (cb = <span class=\"built_in\">this</span>._rejectedQueues.shift()) &#123;</span><br><span class=\"line\">        cb(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(run, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加then方法</span></span><br><span class=\"line\">  then (onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; _value, _status &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个新的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">onFulfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 封装一个成功时执行的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> fulfilled = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isFunction(onFulfilled)) &#123;</span><br><span class=\"line\">            onFulfilledNext(value)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res =  onFulfilled(value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class=\"line\">              res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class=\"line\">              onFulfilledNext(res)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class=\"line\">          onRejectedNext(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 封装一个失败时执行的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> rejected = <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isFunction(onRejected)) &#123;</span><br><span class=\"line\">            onRejectedNext(error)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> res = onRejected(error);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (res <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class=\"line\">                res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class=\"line\">                onFulfilledNext(res)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class=\"line\">          onRejectedNext(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (_status) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._fulfilledQueues.push(fulfilled)</span><br><span class=\"line\">          <span class=\"built_in\">this</span>._rejectedQueues.push(rejected)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\">// 当状态已经改变时，立即执行对应的回调函数</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">          fulfilled(_value)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">          rejected(_value)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加catch方法</span></span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(<span class=\"literal\">undefined</span>, onRejected)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态resolve方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> resolve (value) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果参数是MyPromise实例，直接返回这个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> MyPromise) <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态reject方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> reject (value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve ,reject</span>) =&gt;</span> reject(value))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态all方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> all (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 返回值的集合</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> values = []</span><br><span class=\"line\">      <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [i, p] <span class=\"keyword\">of</span> list.entries()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resolve(p).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          values[i] = res</span><br><span class=\"line\">          count++</span><br><span class=\"line\">          <span class=\"comment\">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (count === list.length) resolve(values)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 有一个被rejected时返回的MyPromise状态就变成rejected</span></span><br><span class=\"line\">          reject(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加静态race方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> race (list) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> p <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resolve(p).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(res)</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          reject(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> (cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.then(</span><br><span class=\"line\">      value  =&gt; MyPromise.resolve(cb()).then(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">      reason =&gt; MyPromise.resolve(cb()).then(<span class=\"function\">() =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"import和require区别","date":"2021-03-14T12:58:20.000Z","copyright":true,"comments":1,"_content":"### 遵循规范\nrequire 是 AMD规范引入方式\nimport是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法\n### 调用时间\nrequire是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）\nimport是编译时调用，所以必须放在文件开头\n### 本质\nrequire是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量\nimport是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require\n\nrequire / exports ：\n遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。\n用法只有以下三种简单的写法：\n```\nconst fs = require('fs')\nexports.fs = fs\nmodule.exports = fs\n```\n\nimport / export：\n遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。\n写法就比较多种多样：\n```\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\nexport default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n```\n\n通过require引入基础数据类型时，属于复制该变量。\n通过require引入复杂数据类型时，数据浅拷贝该对象。\n出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。\nCommonJS模块默认export的是一个对象，即使导出的是基础数据类型。\n\n总结：\n    \n| 规范 | 加载方式 | 命令|特点|\n|--|--|\n| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|\n| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|\n \n 参考：https://www.cnblogs.com/myfirstboke/p/10563597.html","source":"_posts/import和require区别.md","raw":"---\ntitle: import和require区别\ndate: 2021-03-14 20:58:20\ntags: 工程化\ncategories: 前端工程化\ncopyright: true\ncomments: true\n---\n### 遵循规范\nrequire 是 AMD规范引入方式\nimport是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法\n### 调用时间\nrequire是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）\nimport是编译时调用，所以必须放在文件开头\n### 本质\nrequire是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量\nimport是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require\n\nrequire / exports ：\n遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。\n用法只有以下三种简单的写法：\n```\nconst fs = require('fs')\nexports.fs = fs\nmodule.exports = fs\n```\n\nimport / export：\n遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。\n写法就比较多种多样：\n```\nimport fs from 'fs'\nimport {default as fs} from 'fs'\nimport * as fs from 'fs'\nimport {readFile} from 'fs'\nimport {readFile as read} from 'fs'\nimport fs, {readFile} from 'fs'\n\nexport default fs\nexport const fs\nexport function readFile\nexport {readFile, read}\nexport * from 'fs'\n```\n\n通过require引入基础数据类型时，属于复制该变量。\n通过require引入复杂数据类型时，数据浅拷贝该对象。\n出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。\nCommonJS模块默认export的是一个对象，即使导出的是基础数据类型。\n\n总结：\n    \n| 规范 | 加载方式 | 命令|特点|\n|--|--|\n| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|\n| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|\n \n 参考：https://www.cnblogs.com/myfirstboke/p/10563597.html","slug":"import和require区别","published":1,"updated":"2021-03-15T01:13:31.523Z","layout":"post","photos":[],"link":"","_id":"cktbjxf2c0008bzop0awressz","content":"<h3 id=\"遵循规范\"><a href=\"#遵循规范\" class=\"headerlink\" title=\"遵循规范\"></a>遵循规范</h3><p>require 是 AMD规范引入方式<br>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p>\n<h3 id=\"调用时间\"><a href=\"#调用时间\" class=\"headerlink\" title=\"调用时间\"></a>调用时间</h3><p>require是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）<br>import是编译时调用，所以必须放在文件开头</p>\n<h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><p>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量<br>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p>\n<p>require / exports ：<br>遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。<br>用法只有以下三种简单的写法：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.fs = fs</span><br><span class=\"line\"><span class=\"built_in\">module</span>.<span class=\"built_in\">exports</span> = fs</span><br></pre></td></tr></table></figure>\n\n<p>import / export：<br>遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。<br>写法就比较多种多样：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> fs&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile <span class=\"keyword\">as</span> read&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs, &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> readFile</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;readFile, read&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过require引入基础数据类型时，属于复制该变量。<br>通过require引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。<br>CommonJS模块默认export的是一个对象，即使导出的是基础数据类型。</p>\n<p>总结：</p>\n<p>| 规范 | 加载方式 | 命令|特点|<br>|–|–|<br>| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|<br>| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|</p>\n<p> 参考：<a href=\"https://www.cnblogs.com/myfirstboke/p/10563597.html\">https://www.cnblogs.com/myfirstboke/p/10563597.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"遵循规范\"><a href=\"#遵循规范\" class=\"headerlink\" title=\"遵循规范\"></a>遵循规范</h3><p>require 是 AMD规范引入方式<br>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p>\n<h3 id=\"调用时间\"><a href=\"#调用时间\" class=\"headerlink\" title=\"调用时间\"></a>调用时间</h3><p>require是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）<br>import是编译时调用，所以必须放在文件开头</p>\n<h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><p>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量<br>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p>\n<p>require / exports ：<br>遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。<br>用法只有以下三种简单的写法：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.fs = fs</span><br><span class=\"line\"><span class=\"built_in\">module</span>.<span class=\"built_in\">exports</span> = fs</span><br></pre></td></tr></table></figure>\n\n<p>import / export：<br>遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。<br>写法就比较多种多样：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> fs&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;readFile <span class=\"keyword\">as</span> read&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs, &#123;readFile&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fs</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> readFile</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;readFile, read&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过require引入基础数据类型时，属于复制该变量。<br>通过require引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。<br>CommonJS模块默认export的是一个对象，即使导出的是基础数据类型。</p>\n<p>总结：</p>\n<p>| 规范 | 加载方式 | 命令|特点|<br>|–|–|<br>| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|<br>| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|</p>\n<p> 参考：<a href=\"https://www.cnblogs.com/myfirstboke/p/10563597.html\">https://www.cnblogs.com/myfirstboke/p/10563597.html</a></p>\n"},{"title":"微前端（一）-父子应用","date":"2021-09-06T13:45:04.000Z","copyright":true,"comments":1,"_content":"\n背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。\n\n## 主应用\n\n主应用为基座，接入所有子应用\n\n<div align=center>\n<img src=\"micro-1.jpg\" width = 65%>\n</div>\n\n#### 配置\n\n注册所有子应用\n\n## 子应用\n\n#### 配置\n需要在入口暴露生命周期接口\n\n```\nlet instance = null;\n\nconst render = (props = {}) => {\n  const { container, routerBase } = props;\n  // eslint-disable-next-line\n  router.base =  window.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;\n  router.mode = 'history';\n  instance = new Vue({\n    render: (h) => h(App),\n    router,\n    store,\n  }).$mount(container ? container.querySelector('#app') : '#app');\n};\n\n// eslint-disable-next-line\nif (!window.__POWERED_BY_QIANKUN__) {\n  render();\n}\n\nexport async function bootstrap() {\n  console.log('[vue] vue app bootstraped');\n}\n\nexport async function mount(props) {\n  console.log('[vue] props from main framework', props);\n  render(props);\n}\n\nexport async function unmount() {\n  instance.$destroy();\n  instance.$el.innerHTML = '';\n  instance = null;\n}\n```\n\n\n\n\n","source":"_posts/微前端(一)-父子应用.md","raw":"---\ntitle: 微前端（一）-父子应用\ndate: 2021-09-06 21:45:04\ntags: micro\ncategories: 微前端\ncopyright: true\ncomments: true\n---\n\n背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。\n\n## 主应用\n\n主应用为基座，接入所有子应用\n\n<div align=center>\n<img src=\"micro-1.jpg\" width = 65%>\n</div>\n\n#### 配置\n\n注册所有子应用\n\n## 子应用\n\n#### 配置\n需要在入口暴露生命周期接口\n\n```\nlet instance = null;\n\nconst render = (props = {}) => {\n  const { container, routerBase } = props;\n  // eslint-disable-next-line\n  router.base =  window.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;\n  router.mode = 'history';\n  instance = new Vue({\n    render: (h) => h(App),\n    router,\n    store,\n  }).$mount(container ? container.querySelector('#app') : '#app');\n};\n\n// eslint-disable-next-line\nif (!window.__POWERED_BY_QIANKUN__) {\n  render();\n}\n\nexport async function bootstrap() {\n  console.log('[vue] vue app bootstraped');\n}\n\nexport async function mount(props) {\n  console.log('[vue] props from main framework', props);\n  render(props);\n}\n\nexport async function unmount() {\n  instance.$destroy();\n  instance.$el.innerHTML = '';\n  instance = null;\n}\n```\n\n\n\n\n","slug":"微前端(一)-父子应用","published":1,"updated":"2021-09-11T07:49:26.313Z","_id":"cktbjxf2c0009bzop9jwjcc8n","layout":"post","photos":[],"link":"","content":"<p>背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。</p>\n<h2 id=\"主应用\"><a href=\"#主应用\" class=\"headerlink\" title=\"主应用\"></a>主应用</h2><p>主应用为基座，接入所有子应用</p>\n<div align=center>\n<img data-src=\"micro-1.jpg\" width = 65%>\n</div>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>注册所有子应用</p>\n<h2 id=\"子应用\"><a href=\"#子应用\" class=\"headerlink\" title=\"子应用\"></a>子应用</h2><h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>需要在入口暴露生命周期接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\">(<span class=\"params\">props = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container, routerBase &#125; = props;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">  router.base =  <span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;</span><br><span class=\"line\">  router.mode = <span class=\"string\">&#x27;history&#x27;</span>;</span><br><span class=\"line\">  instance = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App),</span><br><span class=\"line\">    router,</span><br><span class=\"line\">    store,</span><br><span class=\"line\">  &#125;).$mount(container ? container.querySelector(<span class=\"string\">&#x27;#app&#x27;</span>) : <span class=\"string\">&#x27;#app&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class=\"line\">  render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[vue] vue app bootstraped&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mount</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[vue] props from main framework&#x27;</span>, props);</span><br><span class=\"line\">  render(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unmount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  instance.$destroy();</span><br><span class=\"line\">  instance.$el.innerHTML = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。</p>\n<h2 id=\"主应用\"><a href=\"#主应用\" class=\"headerlink\" title=\"主应用\"></a>主应用</h2><p>主应用为基座，接入所有子应用</p>\n<div align=center>\n<img data-src=\"micro-1.jpg\" width = 65%>\n</div>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>注册所有子应用</p>\n<h2 id=\"子应用\"><a href=\"#子应用\" class=\"headerlink\" title=\"子应用\"></a>子应用</h2><h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>需要在入口暴露生命周期接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\">(<span class=\"params\">props = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; container, routerBase &#125; = props;</span><br><span class=\"line\">  <span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\">  router.base =  <span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;</span><br><span class=\"line\">  router.mode = <span class=\"string\">&#x27;history&#x27;</span>;</span><br><span class=\"line\">  instance = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    render: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App),</span><br><span class=\"line\">    router,</span><br><span class=\"line\">    store,</span><br><span class=\"line\">  &#125;).$mount(container ? container.querySelector(<span class=\"string\">&#x27;#app&#x27;</span>) : <span class=\"string\">&#x27;#app&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eslint-disable-next-line</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class=\"line\">  render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bootstrap</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[vue] vue app bootstraped&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mount</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;[vue] props from main framework&#x27;</span>, props);</span><br><span class=\"line\">  render(props);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unmount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  instance.$destroy();</span><br><span class=\"line\">  instance.$el.innerHTML = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"微前端(二)-孙子应用","date":"2021-09-08T13:20:04.000Z","copyright":true,"comments":1,"_content":"","source":"_posts/微前端-二-孙子应用.md","raw":"---\ntitle: 微前端(二)-孙子应用\ndate: 2021-09-08 21:20:04\ntags: micro\ncategories: 微前端\ncopyright: true\ncomments: true\n---\n","slug":"微前端-二-孙子应用","published":1,"updated":"2021-09-08T13:21:00.686Z","layout":"post","photos":[],"link":"","_id":"cktbjxf2g000dbzopd8hlfsv5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"web前端模块化(一)—前言","date":"2021-03-07T11:47:12.000Z","copyright":true,"comments":1,"_content":"\n### 什么是模块化\n\n将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。\n内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。\n\n### 模块化的进程\n1.全局function模式-把不同的功能封装成不同的全局函数\n\n2.命名空间模式-基于简单的对象封装,\n劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；\n```\nlet obj = {\n  data: '',\n  func1: () => {},\n  func2: () => () {},\n}\n\nobj.data = 'aaa';\nobj.func1();\n```\n3.匿名函数自执行方式（闭包）\n向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。\n\n\n```\n<script type=\"text/javascript>\n(function(win) {\n  function func1() {\n    // ...\n  }\n  function func2() {\n    // ...\n  }\n  // 向外暴露方法，es6的写法\n  win.myMethods = {func1, func2};\n})(window)\n</script>\n```\n\n4.匿名函数的模式增加：向入口传入依赖的模块\n```\n<script type=\"text/javascript>\n(function(a, b) {\n  b(a);\n})(window, function(window){\n  window.jQuery = jQuery;\n  function jQuery(){};\n})\n</script>\n```\n\n```\nconst var module1 = (function(m) {\n  m.add = (a, b) => {\n    return a+b;\n  }\n  return m;\n})(window.module1 || {})\n```\n劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）\n\n### 模块化的好处\n1. 避免命名冲突（减少命名空间污染）\n2. 更好的分离，按需加载\n3. 更高的复用性，更高的可维护性\n\n### 引入多个script后出现的问题\n\n引入多个script之后，会不可避免的出现引用交叉。\n- 请求过多\n- 依赖会乱掉，就所谓的依赖模糊\n- 难以维护，因为各种调用，依赖都交织在一起了。\n\n这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.\n","source":"_posts/模块化1.md","raw":"---\ntitle: web前端模块化(一)—前言\ndate: 2021-03-07 19:47:12\ntags: 工程化\ncategories: 前端工程化\ncopyright: true\ncomments: true\n---\n\n### 什么是模块化\n\n将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。\n内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。\n\n### 模块化的进程\n1.全局function模式-把不同的功能封装成不同的全局函数\n\n2.命名空间模式-基于简单的对象封装,\n劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；\n```\nlet obj = {\n  data: '',\n  func1: () => {},\n  func2: () => () {},\n}\n\nobj.data = 'aaa';\nobj.func1();\n```\n3.匿名函数自执行方式（闭包）\n向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。\n\n\n```\n<script type=\"text/javascript>\n(function(win) {\n  function func1() {\n    // ...\n  }\n  function func2() {\n    // ...\n  }\n  // 向外暴露方法，es6的写法\n  win.myMethods = {func1, func2};\n})(window)\n</script>\n```\n\n4.匿名函数的模式增加：向入口传入依赖的模块\n```\n<script type=\"text/javascript>\n(function(a, b) {\n  b(a);\n})(window, function(window){\n  window.jQuery = jQuery;\n  function jQuery(){};\n})\n</script>\n```\n\n```\nconst var module1 = (function(m) {\n  m.add = (a, b) => {\n    return a+b;\n  }\n  return m;\n})(window.module1 || {})\n```\n劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）\n\n### 模块化的好处\n1. 避免命名冲突（减少命名空间污染）\n2. 更好的分离，按需加载\n3. 更高的复用性，更高的可维护性\n\n### 引入多个script后出现的问题\n\n引入多个script之后，会不可避免的出现引用交叉。\n- 请求过多\n- 依赖会乱掉，就所谓的依赖模糊\n- 难以维护，因为各种调用，依赖都交织在一起了。\n\n这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.\n","slug":"模块化1","published":1,"updated":"2021-03-14T03:56:37.624Z","layout":"post","photos":[],"link":"","_id":"cktbjxf2h000ebzopb4n34sqr","content":"<h3 id=\"什么是模块化\"><a href=\"#什么是模块化\" class=\"headerlink\" title=\"什么是模块化\"></a>什么是模块化</h3><p>将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。<br>内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。</p>\n<h3 id=\"模块化的进程\"><a href=\"#模块化的进程\" class=\"headerlink\" title=\"模块化的进程\"></a>模块化的进程</h3><p>1.全局function模式-把不同的功能封装成不同的全局函数</p>\n<p>2.命名空间模式-基于简单的对象封装,<br>劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  data: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  fu<span class=\"symbol\">nc1</span>: <span class=\"comment\">()</span> =&gt; &#123;&#125;,</span><br><span class=\"line\">  fu<span class=\"symbol\">nc2</span>: <span class=\"comment\">()</span> =&gt; <span class=\"comment\">()</span> &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.data = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">obj.fu<span class=\"symbol\">nc1</span><span class=\"comment\">()</span>;</span><br></pre></td></tr></table></figure>\n<p>3.匿名函数自执行方式（闭包）<br>向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">type</span>=&quot;text/javascript&gt;</span><br><span class=\"line\">(function(<span class=\"keyword\">win</span>) &#123;</span><br><span class=\"line\">  function func1() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function func2() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 向外暴露方法，es6的写法</span></span><br><span class=\"line\">  <span class=\"keyword\">win</span>.myMethods = &#123;func1, func2&#125;;</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">window</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>4.匿名函数的模式增加：向入口传入依赖的模块</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">type</span>=&quot;text/javascript&gt;</span><br><span class=\"line\">(function(a, b) &#123;</span><br><span class=\"line\">  b(a);</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">window</span>, function(<span class=\"keyword\">window</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">window</span>.jQuery = jQuery;</span><br><span class=\"line\">  function jQuery()&#123;&#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">  m.add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>.module1 || &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）</p>\n<h3 id=\"模块化的好处\"><a href=\"#模块化的好处\" class=\"headerlink\" title=\"模块化的好处\"></a>模块化的好处</h3><ol>\n<li>避免命名冲突（减少命名空间污染）</li>\n<li>更好的分离，按需加载</li>\n<li>更高的复用性，更高的可维护性</li>\n</ol>\n<h3 id=\"引入多个script后出现的问题\"><a href=\"#引入多个script后出现的问题\" class=\"headerlink\" title=\"引入多个script后出现的问题\"></a>引入多个script后出现的问题</h3><p>引入多个script之后，会不可避免的出现引用交叉。</p>\n<ul>\n<li>请求过多</li>\n<li>依赖会乱掉，就所谓的依赖模糊</li>\n<li>难以维护，因为各种调用，依赖都交织在一起了。</li>\n</ul>\n<p>这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是模块化\"><a href=\"#什么是模块化\" class=\"headerlink\" title=\"什么是模块化\"></a>什么是模块化</h3><p>将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。<br>内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。</p>\n<h3 id=\"模块化的进程\"><a href=\"#模块化的进程\" class=\"headerlink\" title=\"模块化的进程\"></a>模块化的进程</h3><p>1.全局function模式-把不同的功能封装成不同的全局函数</p>\n<p>2.命名空间模式-基于简单的对象封装,<br>劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  data: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  fu<span class=\"symbol\">nc1</span>: <span class=\"comment\">()</span> =&gt; &#123;&#125;,</span><br><span class=\"line\">  fu<span class=\"symbol\">nc2</span>: <span class=\"comment\">()</span> =&gt; <span class=\"comment\">()</span> &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.data = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">obj.fu<span class=\"symbol\">nc1</span><span class=\"comment\">()</span>;</span><br></pre></td></tr></table></figure>\n<p>3.匿名函数自执行方式（闭包）<br>向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">type</span>=&quot;text/javascript&gt;</span><br><span class=\"line\">(function(<span class=\"keyword\">win</span>) &#123;</span><br><span class=\"line\">  function func1() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function func2() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 向外暴露方法，es6的写法</span></span><br><span class=\"line\">  <span class=\"keyword\">win</span>.myMethods = &#123;func1, func2&#125;;</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">window</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>4.匿名函数的模式增加：向入口传入依赖的模块</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">type</span>=&quot;text/javascript&gt;</span><br><span class=\"line\">(function(a, b) &#123;</span><br><span class=\"line\">  b(a);</span><br><span class=\"line\">&#125;)(<span class=\"keyword\">window</span>, function(<span class=\"keyword\">window</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">window</span>.jQuery = jQuery;</span><br><span class=\"line\">  function jQuery()&#123;&#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">var</span> module1 = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">  m.add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>.module1 || &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）</p>\n<h3 id=\"模块化的好处\"><a href=\"#模块化的好处\" class=\"headerlink\" title=\"模块化的好处\"></a>模块化的好处</h3><ol>\n<li>避免命名冲突（减少命名空间污染）</li>\n<li>更好的分离，按需加载</li>\n<li>更高的复用性，更高的可维护性</li>\n</ol>\n<h3 id=\"引入多个script后出现的问题\"><a href=\"#引入多个script后出现的问题\" class=\"headerlink\" title=\"引入多个script后出现的问题\"></a>引入多个script后出现的问题</h3><p>引入多个script之后，会不可避免的出现引用交叉。</p>\n<ul>\n<li>请求过多</li>\n<li>依赖会乱掉，就所谓的依赖模糊</li>\n<li>难以维护，因为各种调用，依赖都交织在一起了。</li>\n</ul>\n<p>这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.</p>\n"},{"title":"模块化（二）","date":"2021-03-14T03:56:30.000Z","copyright":true,"comments":1,"_content":"\n### CommonJS\n\n每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。\nnode和webpack都对commonjs原生支持。\n\n核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.\n\n浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。\n\ncommonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。\n\n```\n//index.js\nvar module = require('module.js);\nmodule.aa('hello');\n\n// module.js\nmodule.exports = {\n  aa: function () {\n    console.log(str);\n  }\n}\n```\n\n### AMD\n异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。\n\nAMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块\n\n```\n// main.js\nrequire(['jQuire', 'math'], function($, math) {\n  // ...\n})\n\n// math,js\ndefine(function() {\n  // ...\n})\n```\n\n### CMD\nCMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。\n\n产物seaJS，跟require JS使用有些类似。\n\nCMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块\n\n```\n<script src=\"./sea.js\"></script>\n\n<script>\n// index.html\nseajs.use('main.js');\n\n// main.js\ndefine(function(require, exports,module) {\n  var module1 = require('module1.js');\n  console.log(module1);\n})\n\n// module1.js\ndefine (function(require,exports, module) {\n  var arr = [1,2,3];\n  exports.module1 = arr;\n})\n```\n\n### ES6\n自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。\n\n使用import关键字引入模块，通过export关键字导出模块\n\n\n总结：\nCommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。","source":"_posts/模块化2.md","raw":"---\ntitle: 模块化（二）\ndate: 2021-03-14 11:56:30\ntags: 工程化\ncategories: 前端工程化\ncopyright: true\ncomments: true\n---\n\n### CommonJS\n\n每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。\nnode和webpack都对commonjs原生支持。\n\n核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.\n\n浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。\n\ncommonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。\n\n```\n//index.js\nvar module = require('module.js);\nmodule.aa('hello');\n\n// module.js\nmodule.exports = {\n  aa: function () {\n    console.log(str);\n  }\n}\n```\n\n### AMD\n异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。\n\nAMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块\n\n```\n// main.js\nrequire(['jQuire', 'math'], function($, math) {\n  // ...\n})\n\n// math,js\ndefine(function() {\n  // ...\n})\n```\n\n### CMD\nCMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。\n\n产物seaJS，跟require JS使用有些类似。\n\nCMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块\n\n```\n<script src=\"./sea.js\"></script>\n\n<script>\n// index.html\nseajs.use('main.js');\n\n// main.js\ndefine(function(require, exports,module) {\n  var module1 = require('module1.js');\n  console.log(module1);\n})\n\n// module1.js\ndefine (function(require,exports, module) {\n  var arr = [1,2,3];\n  exports.module1 = arr;\n})\n```\n\n### ES6\n自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。\n\n使用import关键字引入模块，通过export关键字导出模块\n\n\n总结：\nCommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。","slug":"模块化2","published":1,"updated":"2021-03-14T12:32:31.114Z","layout":"post","photos":[],"link":"","_id":"cktbjxf2j000jbzoph2w93ys2","content":"<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。<br>node和webpack都对commonjs原生支持。</p>\n<p>核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.</p>\n<p>浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。</p>\n<p>commonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。</p>\n<figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\">var <span class=\"function\"><span class=\"keyword\">module</span> =</span> require(&#x27;<span class=\"keyword\">module</span>.js);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.aa(&#x27;hello&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = &#123;</span><br><span class=\"line\">  aa: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> &#123;</span></span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"built_in\">str</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p>异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。</p>\n<p>AMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> main.js</span><br><span class=\"line\">require([<span class=\"string\">&#x27;jQuire&#x27;</span>, <span class=\"string\">&#x27;math&#x27;</span>], <span class=\"keyword\">function</span>($, math) &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> ...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> math,js</span><br><span class=\"line\">define(<span class=\"keyword\">function</span>() &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。</p>\n<p>产物seaJS，跟require JS使用有些类似。</p>\n<p>CMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./sea.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// index.html</span></span></span><br><span class=\"line\"><span class=\"javascript\">seajs.use(<span class=\"string\">&#x27;main.js&#x27;</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// main.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>,<span class=\"built_in\">module</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> module1 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;module1.js&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(module1);</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// module1.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">define (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>,<span class=\"built_in\">exports</span>, <span class=\"built_in\">module</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">exports</span>.module1 = arr;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><p>自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。</p>\n<p>使用import关键字引入模块，通过export关键字导出模块</p>\n<p>总结：<br>CommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。<br>node和webpack都对commonjs原生支持。</p>\n<p>核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.</p>\n<p>浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。</p>\n<p>commonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。</p>\n<figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\">var <span class=\"function\"><span class=\"keyword\">module</span> =</span> require(&#x27;<span class=\"keyword\">module</span>.js);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.aa(&#x27;hello&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = &#123;</span><br><span class=\"line\">  aa: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> &#123;</span></span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"built_in\">str</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p>异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。</p>\n<p>AMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> main.js</span><br><span class=\"line\">require([<span class=\"string\">&#x27;jQuire&#x27;</span>, <span class=\"string\">&#x27;math&#x27;</span>], <span class=\"keyword\">function</span>($, math) &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> ...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> math,js</span><br><span class=\"line\">define(<span class=\"keyword\">function</span>() &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>CMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。</p>\n<p>产物seaJS，跟require JS使用有些类似。</p>\n<p>CMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./sea.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// index.html</span></span></span><br><span class=\"line\"><span class=\"javascript\">seajs.use(<span class=\"string\">&#x27;main.js&#x27;</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// main.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>,<span class=\"built_in\">module</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> module1 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;module1.js&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(module1);</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// module1.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">define (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>,<span class=\"built_in\">exports</span>, <span class=\"built_in\">module</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">exports</span>.module1 = arr;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h3><p>自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。</p>\n<p>使用import关键字引入模块，通过export关键字导出模块</p>\n<p>总结：<br>CommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。</p>\n"},{"title":"vuex学习","date":"2021-03-05T06:06:16.000Z","copyright":true,"comments":1,"_content":"\n\n官方文档： https://vuex.vuejs.org/zh/\n\n### 1 vuex概述\n组件之间共享数据的方式\n- 父->子：v-bind\n- 子->父：v-on\n- 兄弟之间共享数据：EventBus\n只适用于小范围共享。\n\nvuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。\n\n<div align=center>\n<img src=\"vuex-1.png\" width = 65%>\n<!-- ![vuex](vuex-1.png) -->\n</div>\n\n使用vuex好处：\n- 能够在vuex中集中管理共享的数据，易于开发和后期维护\n- 能够高效地实现组件之间的数据共享，提高开发效率\n- 存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步\n\n### 2 vuex核心概念\n#### state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\n\n```\nconst store = new Vuex.store({\n  state: {\n    count: 0,\n  }\n});\n```\n两种访问state数据方式：\n1.直接在需要用的地方使用\"$store.state.***\"\n2. 先引入mapState,再使用\nimport { mapState } from vuex;\ncomputed: {\n  ...mapState(['count']),\n},\n\n#### Mutation\nMutation用于改变store中的数据,只能处理同步任务，不能执行异步操作\n- 只能通过Mutation变更store数据，不可以直接在组件中操作store数据\n- 这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化\n```\n// 定义Mutation\nconst store  = new Vuex.store({\n  state: {\n    count: 0,\n  },\n  mutations: {\n    add(state, step) {\n      state.count += step;\n    },\n  },\n});\n\n//触发mutation: 第一种方式\nmethods: {\n  handle1() {\n    this.$store.commit('add', 3);\n  },\n},\n//触发mutation：第二种方式\n\nimport { mapMutations } from vuex;\nmethods: {\n  ...mapMutations(['add']),\n  handle2() {\n    this.add(3);\n  },\n},\n```\n\n#### Action\nAction用于处理异步任务。\n注意：\n- 如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。\n- Action不能直接修改state数据，必须通过commit触发mutation才行\n\n```\n//定义Action\nconst store = new Vuex.store({\n  mutations: {\n    add(state, step) {\n      state.count += step;\n    },\n  },\n  actions: {\n    addAsync(context, step) {\n      // Action不能直接修改state数据，必须通过commit触发mutation才行\n      setTimeout(() => {\n        context.conmmit('add', step);\n      }, 1000);\n    },\n  },\n});\n\n// 触发Action: 第一种方式\nmethods: {\n  handle3() {\n    this.$store.dispatch('addAsync', 3);\n  },\n},\n\n// 触发Action:第二种方式\nimport { mapActions } from 'vuex';\nmethods: {\n  ...mapActions(['addAsync']),\n  handle4() {\n    this.addAsync(3);\n  },\n},\n```\n#### Getter\ngetter用于对store中的数据进行加工处理形成新的数据。\n- getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性\n- getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化\n\n```\n// 定义getter\nconst store = new Vuex.store({\n  state: {\n    count: 0,\n  },\n  getters: {\n    showNum: (state) => {\n      return state.count++;\n    },\n  },\n});\n\n// 第一种使用方式\nmethods: {\n  handle5() {\n    return this.$store.getter('showNum');\n  },\n},\n\n/ 第二种使用方式\nimport { mapGetters } from 'vuex';\ncomputed: {\n  ...mapGetters(['showNum']),\n},\n```\n\n\n\n\n\n\n\n","source":"_posts/vuex.md","raw":"---\ntitle: vuex学习\ndate: 2021-03-05 14:06:16\ntags: vuex\ncategories: vue\ncopyright: true\ncomments: true\n---\n\n\n官方文档： https://vuex.vuejs.org/zh/\n\n### 1 vuex概述\n组件之间共享数据的方式\n- 父->子：v-bind\n- 子->父：v-on\n- 兄弟之间共享数据：EventBus\n只适用于小范围共享。\n\nvuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。\n\n<div align=center>\n<img src=\"vuex-1.png\" width = 65%>\n<!-- ![vuex](vuex-1.png) -->\n</div>\n\n使用vuex好处：\n- 能够在vuex中集中管理共享的数据，易于开发和后期维护\n- 能够高效地实现组件之间的数据共享，提高开发效率\n- 存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步\n\n### 2 vuex核心概念\n#### state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\n\n```\nconst store = new Vuex.store({\n  state: {\n    count: 0,\n  }\n});\n```\n两种访问state数据方式：\n1.直接在需要用的地方使用\"$store.state.***\"\n2. 先引入mapState,再使用\nimport { mapState } from vuex;\ncomputed: {\n  ...mapState(['count']),\n},\n\n#### Mutation\nMutation用于改变store中的数据,只能处理同步任务，不能执行异步操作\n- 只能通过Mutation变更store数据，不可以直接在组件中操作store数据\n- 这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化\n```\n// 定义Mutation\nconst store  = new Vuex.store({\n  state: {\n    count: 0,\n  },\n  mutations: {\n    add(state, step) {\n      state.count += step;\n    },\n  },\n});\n\n//触发mutation: 第一种方式\nmethods: {\n  handle1() {\n    this.$store.commit('add', 3);\n  },\n},\n//触发mutation：第二种方式\n\nimport { mapMutations } from vuex;\nmethods: {\n  ...mapMutations(['add']),\n  handle2() {\n    this.add(3);\n  },\n},\n```\n\n#### Action\nAction用于处理异步任务。\n注意：\n- 如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。\n- Action不能直接修改state数据，必须通过commit触发mutation才行\n\n```\n//定义Action\nconst store = new Vuex.store({\n  mutations: {\n    add(state, step) {\n      state.count += step;\n    },\n  },\n  actions: {\n    addAsync(context, step) {\n      // Action不能直接修改state数据，必须通过commit触发mutation才行\n      setTimeout(() => {\n        context.conmmit('add', step);\n      }, 1000);\n    },\n  },\n});\n\n// 触发Action: 第一种方式\nmethods: {\n  handle3() {\n    this.$store.dispatch('addAsync', 3);\n  },\n},\n\n// 触发Action:第二种方式\nimport { mapActions } from 'vuex';\nmethods: {\n  ...mapActions(['addAsync']),\n  handle4() {\n    this.addAsync(3);\n  },\n},\n```\n#### Getter\ngetter用于对store中的数据进行加工处理形成新的数据。\n- getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性\n- getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化\n\n```\n// 定义getter\nconst store = new Vuex.store({\n  state: {\n    count: 0,\n  },\n  getters: {\n    showNum: (state) => {\n      return state.count++;\n    },\n  },\n});\n\n// 第一种使用方式\nmethods: {\n  handle5() {\n    return this.$store.getter('showNum');\n  },\n},\n\n/ 第二种使用方式\nimport { mapGetters } from 'vuex';\ncomputed: {\n  ...mapGetters(['showNum']),\n},\n```\n\n\n\n\n\n\n\n","slug":"vuex","published":1,"updated":"2021-08-31T01:57:46.303Z","layout":"post","photos":[],"link":"","_id":"cktbjxf2p0017bzopcqky6a1c","content":"<p>官方文档： <a href=\"https://vuex.vuejs.org/zh/\">https://vuex.vuejs.org/zh/</a></p>\n<h3 id=\"1-vuex概述\"><a href=\"#1-vuex概述\" class=\"headerlink\" title=\"1 vuex概述\"></a>1 vuex概述</h3><p>组件之间共享数据的方式</p>\n<ul>\n<li>父-&gt;子：v-bind</li>\n<li>子-&gt;父：v-on</li>\n<li>兄弟之间共享数据：EventBus<br>只适用于小范围共享。</li>\n</ul>\n<p>vuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。</p>\n<div align=center>\n<img data-src=\"vuex-1.png\" width = 65%>\n<!-- ![vuex](vuex-1.png) -->\n</div>\n\n<p>使用vuex好处：</p>\n<ul>\n<li>能够在vuex中集中管理共享的数据，易于开发和后期维护</li>\n<li>能够高效地实现组件之间的数据共享，提高开发效率</li>\n<li>存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步</li>\n</ul>\n<h3 id=\"2-vuex核心概念\"><a href=\"#2-vuex核心概念\" class=\"headerlink\" title=\"2 vuex核心概念\"></a>2 vuex核心概念</h3><h4 id=\"state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\"><a href=\"#state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\" class=\"headerlink\" title=\"state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\"></a>state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储</h4><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>两种访问state数据方式：<br>1.直接在需要用的地方使用”$store.state.***”<br>2. 先引入mapState,再使用<br>import { mapState } from vuex;<br>computed: {<br>  …mapState([‘count’]),<br>},</p>\n<h4 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h4><p>Mutation用于改变store中的数据,只能处理同步任务，不能执行异步操作</p>\n<ul>\n<li>只能通过Mutation变更store数据，不可以直接在组件中操作store数据</li>\n<li>这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义Mutation</span><br><span class=\"line\"><span class=\"keyword\">const</span> store  = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    add(<span class=\"keyword\">state</span>, step) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">state</span>.count += step;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//触发mutation: 第一种方式</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  handle1() &#123;</span><br><span class=\"line\">    this.<span class=\"variable\">$store</span>.commit(&#x27;add&#x27;, <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//触发mutation：第二种方式</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; mapMutations &#125; <span class=\"keyword\">from</span> vuex;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapMutations([&#x27;add&#x27;]),</span><br><span class=\"line\">  handle2() &#123;</span><br><span class=\"line\">    this.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>Action用于处理异步任务。<br>注意：</p>\n<ul>\n<li>如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。</li>\n<li>Action不能直接修改state数据，必须通过commit触发mutation才行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Action</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">state, step</span>)</span> &#123;</span><br><span class=\"line\">      state.count += step;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addAsync</span>(<span class=\"params\">context, step</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Action不能直接修改state数据，必须通过commit触发mutation才行</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.conmmit(<span class=\"string\">&#x27;add&#x27;</span>, step);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发Action: 第一种方式</span></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handle3</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发Action:第二种方式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">&#x27;addAsync&#x27;</span>]),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handle4</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.addAsync(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h4><p>getter用于对store中的数据进行加工处理形成新的数据。</p>\n<ul>\n<li>getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性</li>\n<li>getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义getter</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    showNum: (<span class=\"keyword\">state</span>) =&gt; &#123;</span><br><span class=\"line\">      return <span class=\"keyword\">state</span>.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一种使用方式</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  handle5() &#123;</span><br><span class=\"line\">    return this.<span class=\"variable\">$store</span>.getter(&#x27;showNum&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">/ 第二种使用方式</span><br><span class=\"line\">import &#123; mapGetters &#125; <span class=\"keyword\">from</span> &#x27;vuex&#x27;;</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([&#x27;showNum&#x27;]),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档： <a href=\"https://vuex.vuejs.org/zh/\">https://vuex.vuejs.org/zh/</a></p>\n<h3 id=\"1-vuex概述\"><a href=\"#1-vuex概述\" class=\"headerlink\" title=\"1 vuex概述\"></a>1 vuex概述</h3><p>组件之间共享数据的方式</p>\n<ul>\n<li>父-&gt;子：v-bind</li>\n<li>子-&gt;父：v-on</li>\n<li>兄弟之间共享数据：EventBus<br>只适用于小范围共享。</li>\n</ul>\n<p>vuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。</p>\n<div align=center>\n<img data-src=\"vuex-1.png\" width = 65%>\n<!-- ![vuex](vuex-1.png) -->\n</div>\n\n<p>使用vuex好处：</p>\n<ul>\n<li>能够在vuex中集中管理共享的数据，易于开发和后期维护</li>\n<li>能够高效地实现组件之间的数据共享，提高开发效率</li>\n<li>存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步</li>\n</ul>\n<h3 id=\"2-vuex核心概念\"><a href=\"#2-vuex核心概念\" class=\"headerlink\" title=\"2 vuex核心概念\"></a>2 vuex核心概念</h3><h4 id=\"state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\"><a href=\"#state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\" class=\"headerlink\" title=\"state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储\"></a>state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储</h4><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>两种访问state数据方式：<br>1.直接在需要用的地方使用”$store.state.***”<br>2. 先引入mapState,再使用<br>import { mapState } from vuex;<br>computed: {<br>  …mapState([‘count’]),<br>},</p>\n<h4 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h4><p>Mutation用于改变store中的数据,只能处理同步任务，不能执行异步操作</p>\n<ul>\n<li>只能通过Mutation变更store数据，不可以直接在组件中操作store数据</li>\n<li>这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义Mutation</span><br><span class=\"line\"><span class=\"keyword\">const</span> store  = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    add(<span class=\"keyword\">state</span>, step) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">state</span>.count += step;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//触发mutation: 第一种方式</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  handle1() &#123;</span><br><span class=\"line\">    this.<span class=\"variable\">$store</span>.commit(&#x27;add&#x27;, <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//触发mutation：第二种方式</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; mapMutations &#125; <span class=\"keyword\">from</span> vuex;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapMutations([&#x27;add&#x27;]),</span><br><span class=\"line\">  handle2() &#123;</span><br><span class=\"line\">    this.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>Action用于处理异步任务。<br>注意：</p>\n<ul>\n<li>如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。</li>\n<li>Action不能直接修改state数据，必须通过commit触发mutation才行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Action</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.store(&#123;</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">state, step</span>)</span> &#123;</span><br><span class=\"line\">      state.count += step;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">addAsync</span>(<span class=\"params\">context, step</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Action不能直接修改state数据，必须通过commit触发mutation才行</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        context.conmmit(<span class=\"string\">&#x27;add&#x27;</span>, step);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发Action: 第一种方式</span></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handle3</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;addAsync&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发Action:第二种方式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  ...mapActions([<span class=\"string\">&#x27;addAsync&#x27;</span>]),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handle4</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.addAsync(<span class=\"number\">3</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h4><p>getter用于对store中的数据进行加工处理形成新的数据。</p>\n<ul>\n<li>getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性</li>\n<li>getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义getter</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = new Vuex.store(&#123;</span><br><span class=\"line\">  <span class=\"keyword\">state</span>: &#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    showNum: (<span class=\"keyword\">state</span>) =&gt; &#123;</span><br><span class=\"line\">      return <span class=\"keyword\">state</span>.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一种使用方式</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  handle5() &#123;</span><br><span class=\"line\">    return this.<span class=\"variable\">$store</span>.getter(&#x27;showNum&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">/ 第二种使用方式</span><br><span class=\"line\">import &#123; mapGetters &#125; <span class=\"keyword\">from</span> &#x27;vuex&#x27;;</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapGetters([&#x27;showNum&#x27;]),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"Webpack常用loader","date":"2021-09-17T12:37:15.000Z","copyright":true,"comments":1,"_content":"\n### 常用loader\nloader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。\n\n**样式**\n - css-loader : 解析css文件中代码\n -  style-loader : 将css模块作为样式导出到DOM中\n -  less-loader : 加载和转义less文件\n - sass-loader : 加载和转义sass/scss文件\n -  postcss-loader: 自动添加css的兼容前缀\n\n**脚本转换编译**\n\n - script-loader : 在全局上下文中执行一次javascript文件，不需要解析\n - babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析\n\n**Files文件**\n\n - url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL\n -  raw-loader : 加载文件原始内容(utf-8格式)\n\n**加载框架**\n\n - vue-loader : 加载和转义vue组件\n - react-hot-loader : 动态刷新和转义react组件中修改的部分\n**校验测试：**\neslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。\n\n**vue-template-compiler**\n作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template => ast => render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！\n**vue-loader**\n用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：```<template>```，```<script>``` 和 ```<style>```，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。\n","source":"_posts/Webpack常用loader.md","raw":"---\ntitle: Webpack常用loader\ndate: 2021-09-17 20:37:15\ntags: webpack\ncategories: webpack\ncopyright: true\ncomments: true\n---\n\n### 常用loader\nloader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。\n\n**样式**\n - css-loader : 解析css文件中代码\n -  style-loader : 将css模块作为样式导出到DOM中\n -  less-loader : 加载和转义less文件\n - sass-loader : 加载和转义sass/scss文件\n -  postcss-loader: 自动添加css的兼容前缀\n\n**脚本转换编译**\n\n - script-loader : 在全局上下文中执行一次javascript文件，不需要解析\n - babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析\n\n**Files文件**\n\n - url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL\n -  raw-loader : 加载文件原始内容(utf-8格式)\n\n**加载框架**\n\n - vue-loader : 加载和转义vue组件\n - react-hot-loader : 动态刷新和转义react组件中修改的部分\n**校验测试：**\neslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。\n\n**vue-template-compiler**\n作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template => ast => render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！\n**vue-loader**\n用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：```<template>```，```<script>``` 和 ```<style>```，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。\n","slug":"Webpack常用loader","published":1,"updated":"2021-09-17T12:41:22.693Z","layout":"post","photos":[],"link":"","_id":"cktocv9zs0000iyophsm1bxum","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"常用loader\"><a href=\"#常用loader\" class=\"headerlink\" title=\"常用loader\"></a>常用loader</h3><p>loader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。</p>\n<p><strong>样式</strong></p>\n<ul>\n<li>css-loader : 解析css文件中代码</li>\n<li> style-loader : 将css模块作为样式导出到DOM中</li>\n<li> less-loader : 加载和转义less文件</li>\n<li>sass-loader : 加载和转义sass/scss文件</li>\n<li> postcss-loader: 自动添加css的兼容前缀</li>\n</ul>\n<p><strong>脚本转换编译</strong></p>\n<ul>\n<li>script-loader : 在全局上下文中执行一次javascript文件，不需要解析</li>\n<li>babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析</li>\n</ul>\n<p><strong>Files文件</strong></p>\n<ul>\n<li>url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL</li>\n<li> raw-loader : 加载文件原始内容(utf-8格式)</li>\n</ul>\n<p><strong>加载框架</strong></p>\n<ul>\n<li>vue-loader : 加载和转义vue组件</li>\n<li>react-hot-loader : 动态刷新和转义react组件中修改的部分</li>\n</ul>\n<p><strong>校验测试：</strong><br>eslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。</p>\n<p><strong>vue-template-compiler</strong><br>作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template =&gt; ast =&gt; render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！<br><strong>vue-loader</strong><br>用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：<code>&lt;template&gt;</code>，<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。</p>\n","site":{"data":{"DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}","APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n"}},"length":991,"excerpt":"","more":"<h3 id=\"常用loader\"><a href=\"#常用loader\" class=\"headerlink\" title=\"常用loader\"></a>常用loader</h3><p>loader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。</p>\n<p><strong>样式</strong></p>\n<ul>\n<li>css-loader : 解析css文件中代码</li>\n<li> style-loader : 将css模块作为样式导出到DOM中</li>\n<li> less-loader : 加载和转义less文件</li>\n<li>sass-loader : 加载和转义sass/scss文件</li>\n<li> postcss-loader: 自动添加css的兼容前缀</li>\n</ul>\n<p><strong>脚本转换编译</strong></p>\n<ul>\n<li>script-loader : 在全局上下文中执行一次javascript文件，不需要解析</li>\n<li>babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析</li>\n</ul>\n<p><strong>Files文件</strong></p>\n<ul>\n<li>url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL</li>\n<li> raw-loader : 加载文件原始内容(utf-8格式)</li>\n</ul>\n<p><strong>加载框架</strong></p>\n<ul>\n<li>vue-loader : 加载和转义vue组件</li>\n<li>react-hot-loader : 动态刷新和转义react组件中修改的部分</li>\n</ul>\n<p><strong>校验测试：</strong><br>eslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。</p>\n<p><strong>vue-template-compiler</strong><br>作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template =&gt; ast =&gt; render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！<br><strong>vue-loader</strong><br>用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：<code>&lt;template&gt;</code>，<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。</p>\n"},{"title":"Babel","date":"2021-09-17T12:44:56.000Z","copyright":true,"comments":1,"_content":"\n\n### babel\nBabel会将ES6的代码转成ES5的代码\n@babel/core、babel-loader、@babel/preset-env\n需要先安装，在配置\n\n```javascript\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test:/\\.js$/,\n                use: {\n                    loader: 'babel-loader',\n                    // 配置选项里的presets\n                    // 包含ES6还有之后的版本和那些仅仅是草案的内容\n                    options: {\n                        presets: ['@babel/preset-env']\n                    }\n                }\n                include: /src/,          // 只转化src目录下的js\n                exclude: /node_modules/  // 排除掉node_modules，优化打包速度\n            }\n        ]\n    }\n}\n\n```","source":"_posts/Babel使用.md","raw":"---\ntitle: Babel\ndate: 2021-09-17 20:44:56\ntags:\n  - Babel\n  - Webpack\ncategories:\n  - Babel\n  - Webpack\ncopyright: true\ncomments: true\n---\n\n\n### babel\nBabel会将ES6的代码转成ES5的代码\n@babel/core、babel-loader、@babel/preset-env\n需要先安装，在配置\n\n```javascript\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test:/\\.js$/,\n                use: {\n                    loader: 'babel-loader',\n                    // 配置选项里的presets\n                    // 包含ES6还有之后的版本和那些仅仅是草案的内容\n                    options: {\n                        presets: ['@babel/preset-env']\n                    }\n                }\n                include: /src/,          // 只转化src目录下的js\n                exclude: /node_modules/  // 排除掉node_modules，优化打包速度\n            }\n        ]\n    }\n}\n\n```","slug":"Babel使用","published":1,"updated":"2021-09-17T12:53:49.443Z","_id":"cktocv9zv0001iyoph66j5vpw","layout":"post","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h3><p>Babel会将ES6的代码转成ES5的代码<br>@babel/core、babel-loader、@babel/preset-env<br>需要先安装，在配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"comment\">// 配置选项里的presets</span></span><br><span class=\"line\">                    <span class=\"comment\">// 包含ES6还有之后的版本和那些仅仅是草案的内容</span></span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        presets: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                include: <span class=\"regexp\">/src/</span>,          <span class=\"comment\">// 只转化src目录下的js</span></span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>  <span class=\"comment\">// 排除掉node_modules，优化打包速度</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}","APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n"}},"length":408,"excerpt":"","more":"<h3 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h3><p>Babel会将ES6的代码转成ES5的代码<br>@babel/core、babel-loader、@babel/preset-env<br>需要先安装，在配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:<span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                use: &#123;</span><br><span class=\"line\">                    loader: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"comment\">// 配置选项里的presets</span></span><br><span class=\"line\">                    <span class=\"comment\">// 包含ES6还有之后的版本和那些仅仅是草案的内容</span></span><br><span class=\"line\">                    options: &#123;</span><br><span class=\"line\">                        presets: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                include: <span class=\"regexp\">/src/</span>,          <span class=\"comment\">// 只转化src目录下的js</span></span><br><span class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>  <span class=\"comment\">// 排除掉node_modules，优化打包速度</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Webpack常用plugin","date":"2021-09-17T12:41:48.000Z","copyright":true,"comments":1,"_content":"\n### 常用plugin\n使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。\nplugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。\n\n - define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时\n   创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。\n   例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。\n - copy-webpack-plugin：将个别文件或整个目录复制到构建目录。\n - postcss-namespace: css命名\n - BannerPlugin：对所有的文件打包后添加一个版权声明\n - uglifyjs-webpack-plugin：对 JS 进行压缩混淆\n - HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中\n - Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果\n - extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中\n - optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重\n - html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好\n - clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去\n\n```javascript\nlet CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    plugins: [\n        // 打包前先清空\n        new CleanWebpackPlugin('dist')  \n    ]\n}\n\n```\n","source":"_posts/Webpack常用plugin.md","raw":"---\ntitle: Webpack常用plugin\ndate: 2021-09-17 20:41:48\ntags: webpack\ncategories: webpack\ncopyright: true\ncomments: true\n---\n\n### 常用plugin\n使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。\nplugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。\n\n - define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时\n   创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。\n   例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。\n - copy-webpack-plugin：将个别文件或整个目录复制到构建目录。\n - postcss-namespace: css命名\n - BannerPlugin：对所有的文件打包后添加一个版权声明\n - uglifyjs-webpack-plugin：对 JS 进行压缩混淆\n - HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中\n - Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果\n - extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中\n - optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重\n - html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好\n - clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去\n\n```javascript\nlet CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    plugins: [\n        // 打包前先清空\n        new CleanWebpackPlugin('dist')  \n    ]\n}\n\n```\n","slug":"Webpack常用plugin","published":1,"updated":"2021-09-17T12:42:23.329Z","layout":"post","photos":[],"link":"","_id":"cktocva000004iyop6yst5skj","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"常用plugin\"><a href=\"#常用plugin\" class=\"headerlink\" title=\"常用plugin\"></a>常用plugin</h3><p>使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。<br>plugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。</p>\n<ul>\n<li>define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时<br>创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。<br>例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。</li>\n<li>copy-webpack-plugin：将个别文件或整个目录复制到构建目录。</li>\n<li>postcss-namespace: css命名</li>\n<li>BannerPlugin：对所有的文件打包后添加一个版权声明</li>\n<li>uglifyjs-webpack-plugin：对 JS 进行压缩混淆</li>\n<li>HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中</li>\n<li>Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果</li>\n<li>extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中</li>\n<li>optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重</li>\n<li>html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好</li>\n<li>clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 打包前先清空</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(<span class=\"string\">&#x27;dist&#x27;</span>)  </span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}","APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n"}},"length":969,"excerpt":"","more":"<h3 id=\"常用plugin\"><a href=\"#常用plugin\" class=\"headerlink\" title=\"常用plugin\"></a>常用plugin</h3><p>使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。<br>plugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。</p>\n<ul>\n<li>define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时<br>创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。<br>例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。</li>\n<li>copy-webpack-plugin：将个别文件或整个目录复制到构建目录。</li>\n<li>postcss-namespace: css命名</li>\n<li>BannerPlugin：对所有的文件打包后添加一个版权声明</li>\n<li>uglifyjs-webpack-plugin：对 JS 进行压缩混淆</li>\n<li>HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中</li>\n<li>Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果</li>\n<li>extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中</li>\n<li>optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重</li>\n<li>html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好</li>\n<li>clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"comment\">// 打包前先清空</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(<span class=\"string\">&#x27;dist&#x27;</span>)  </span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Webpack打包原理","date":"2021-09-17T12:42:55.000Z","copyright":true,"comments":1,"_content":"### 打包原理\n（1）读取入口文件，如项目中的main.js；\n\n（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；\n\n（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；\n\n（4）递归所有模块\n\n（5）生成浏览器可运行的代码\n\n### 打包优化\n1.自带优化\n\na)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行\n\nb)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包\n\n2.插件或其他自定义配置\n\n速度方面：\n\na)happypack 多线程打包，但是项目体积小的话反而更慢\n\n体积方面：\n\na) webpack.IgnorePlugin，不需要的语言包不打包\n\nb) external:{'vue':'vue'}配置不需要打包的文件\n\nc) modules:{noParse:/vue/} 配置不需要解析的文件\n\nd) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上\n\ne) 抽离公共代码块:  splitChunkPlugin\n","source":"_posts/Webpack打包原理.md","raw":"---\ntitle: Webpack打包原理\ndate: 2021-09-17 20:42:55\ntags: webpack\ncategories: webpack\ncopyright: true\ncomments: true\n---\n### 打包原理\n（1）读取入口文件，如项目中的main.js；\n\n（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；\n\n（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；\n\n（4）递归所有模块\n\n（5）生成浏览器可运行的代码\n\n### 打包优化\n1.自带优化\n\na)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行\n\nb)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包\n\n2.插件或其他自定义配置\n\n速度方面：\n\na)happypack 多线程打包，但是项目体积小的话反而更慢\n\n体积方面：\n\na) webpack.IgnorePlugin，不需要的语言包不打包\n\nb) external:{'vue':'vue'}配置不需要打包的文件\n\nc) modules:{noParse:/vue/} 配置不需要解析的文件\n\nd) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上\n\ne) 抽离公共代码块:  splitChunkPlugin\n","slug":"Webpack打包原理","published":1,"updated":"2021-09-17T12:44:01.884Z","layout":"post","photos":[],"link":"","_id":"cktocva09000fiyopffce12uz","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h3 id=\"打包原理\"><a href=\"#打包原理\" class=\"headerlink\" title=\"打包原理\"></a>打包原理</h3><p>（1）读取入口文件，如项目中的main.js；</p>\n<p>（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；</p>\n<p>（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；</p>\n<p>（4）递归所有模块</p>\n<p>（5）生成浏览器可运行的代码</p>\n<h3 id=\"打包优化\"><a href=\"#打包优化\" class=\"headerlink\" title=\"打包优化\"></a>打包优化</h3><p>1.自带优化</p>\n<p>a)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行</p>\n<p>b)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包</p>\n<p>2.插件或其他自定义配置</p>\n<p>速度方面：</p>\n<p>a)happypack 多线程打包，但是项目体积小的话反而更慢</p>\n<p>体积方面：</p>\n<p>a) webpack.IgnorePlugin，不需要的语言包不打包</p>\n<p>b) external:{‘vue’:’vue’}配置不需要打包的文件</p>\n<p>c) modules:{noParse:/vue/} 配置不需要解析的文件</p>\n<p>d) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上</p>\n<p>e) 抽离公共代码块:  splitChunkPlugin</p>\n","site":{"data":{"DaoVoice":"{% if daovoice.enabled %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n    app_id: '{{daovoice.app_id}}',   // 必填，您的 APP 标识\n  });\n  daovoice('update');\n  </script>\n{% endif %}","APlayer":"  <!-- require APlayer -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\">\n  <script src=\"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\"></script>\n  <!-- require MetingJS -->\n  <script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script>\n  <meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    fixed=\"true\"\n    id=\"6965569266\"\n    auto=\"true\"\n    mini=\"true\"\n    autoplay=\"false\"\n    theme=\"#607d8b\"\n    loop=\"all\"\n    order=\"random\"\n    preload=\"auto\"\n    volume=\"0.5\"\n    mutex=\"true\"\n    lrc-type=\"3\"\n    list-folded=\"false\"\n    list-max-height=\"340px\"\n    storage-name=\"metingjs\" >\n  </meting-js>\n"}},"length":443,"excerpt":"","more":"<h3 id=\"打包原理\"><a href=\"#打包原理\" class=\"headerlink\" title=\"打包原理\"></a>打包原理</h3><p>（1）读取入口文件，如项目中的main.js；</p>\n<p>（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；</p>\n<p>（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；</p>\n<p>（4）递归所有模块</p>\n<p>（5）生成浏览器可运行的代码</p>\n<h3 id=\"打包优化\"><a href=\"#打包优化\" class=\"headerlink\" title=\"打包优化\"></a>打包优化</h3><p>1.自带优化</p>\n<p>a)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行</p>\n<p>b)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包</p>\n<p>2.插件或其他自定义配置</p>\n<p>速度方面：</p>\n<p>a)happypack 多线程打包，但是项目体积小的话反而更慢</p>\n<p>体积方面：</p>\n<p>a) webpack.IgnorePlugin，不需要的语言包不打包</p>\n<p>b) external:{‘vue’:’vue’}配置不需要打包的文件</p>\n<p>c) modules:{noParse:/vue/} 配置不需要解析的文件</p>\n<p>d) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上</p>\n<p>e) 抽离公共代码块:  splitChunkPlugin</p>\n"}],"PostAsset":[{"_id":"source/_posts/vuex/vuex-1.png","slug":"vuex-1.png","post":"cktbjxf2p0017bzopcqky6a1c","modified":0,"renderable":0},{"_id":"source/_posts/微前端(一)-父子应用/micro-1.jpg","slug":"micro-1.jpg","post":"cktbjxf2c0009bzop9jwjcc8n","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cktbjxf250001bzop1e5bfuen","category_id":"cktbjxf290004bzoparwdefwr","_id":"cktbjxf2i000gbzope2k29hyw"},{"post_id":"cktbjxf270003bzop37ie82rq","category_id":"cktbjxf290004bzoparwdefwr","_id":"cktbjxf2k000lbzop9hpqbk6n"},{"post_id":"cktbjxf2b0007bzop3xm04hj6","category_id":"cktbjxf290004bzoparwdefwr","_id":"cktbjxf2k000obzopekkm2wb8"},{"post_id":"cktbjxf2c0008bzop0awressz","category_id":"cktbjxf2k000kbzop8s5j7sit","_id":"cktbjxf2l000sbzopa9co15gr"},{"post_id":"cktbjxf2c0009bzop9jwjcc8n","category_id":"cktbjxf2k000pbzop8rl652mj","_id":"cktbjxf2m000xbzopbifdcqql"},{"post_id":"cktbjxf2g000dbzopd8hlfsv5","category_id":"cktbjxf2k000pbzop8rl652mj","_id":"cktbjxf2m0011bzop5e41epl6"},{"post_id":"cktbjxf2h000ebzopb4n34sqr","category_id":"cktbjxf2k000kbzop8s5j7sit","_id":"cktbjxf2n0014bzop43um4okl"},{"post_id":"cktbjxf2j000jbzoph2w93ys2","category_id":"cktbjxf2k000kbzop8s5j7sit","_id":"cktbjxf2n0016bzopa2aj8cj1"},{"post_id":"cktbjxf2p0017bzopcqky6a1c","category_id":"cktbjxf2q0018bzopamy88ufn","_id":"cktbjxf2s001bbzopgocc053n"},{"post_id":"cktocv9zs0000iyophsm1bxum","category_id":"cktocv9zw0002iyop972b21c3","_id":"cktocva030008iyop5qs391zc"},{"post_id":"cktocv9zv0001iyoph66j5vpw","category_id":"cktocva010005iyophu28gvb3","_id":"cktocva07000ciyopgqm658a3"},{"post_id":"cktocva000004iyop6yst5skj","category_id":"cktocv9zw0002iyop972b21c3","_id":"cktocva07000eiyop32fhdvir"},{"post_id":"cktocva09000fiyopffce12uz","category_id":"cktocv9zw0002iyop972b21c3","_id":"cktocva0a000hiyop443e0znm"},{"post_id":"cktocv9zv0001iyoph66j5vpw","category_id":"cktod5329000jiyopeoue5cjh","_id":"cktod532a000liyopd1s0fmns"}],"PostTag":[{"post_id":"cktbjxf250001bzop1e5bfuen","tag_id":"cktbjxf2a0005bzop64w6dlbl","_id":"cktbjxf2g000cbzop64vgfesu"},{"post_id":"cktbjxf270003bzop37ie82rq","tag_id":"cktbjxf2a0005bzop64w6dlbl","_id":"cktbjxf2j000ibzop8pjuhzs3"},{"post_id":"cktbjxf2b0007bzop3xm04hj6","tag_id":"cktbjxf2a0005bzop64w6dlbl","_id":"cktbjxf2k000nbzophgeze7pi"},{"post_id":"cktbjxf2c0008bzop0awressz","tag_id":"cktbjxf2k000mbzop43mv97m5","_id":"cktbjxf2l000rbzopben320px"},{"post_id":"cktbjxf2c0009bzop9jwjcc8n","tag_id":"cktbjxf2l000qbzop13tfgmn6","_id":"cktbjxf2m000vbzop24z108dr"},{"post_id":"cktbjxf2g000dbzopd8hlfsv5","tag_id":"cktbjxf2l000qbzop13tfgmn6","_id":"cktbjxf2m000zbzophz0g14ez"},{"post_id":"cktbjxf2h000ebzopb4n34sqr","tag_id":"cktbjxf2k000mbzop43mv97m5","_id":"cktbjxf2n0013bzop0acnh429"},{"post_id":"cktbjxf2j000jbzoph2w93ys2","tag_id":"cktbjxf2k000mbzop43mv97m5","_id":"cktbjxf2n0015bzophly95zdy"},{"post_id":"cktbjxf2p0017bzopcqky6a1c","tag_id":"cktbjxf2r0019bzopclvmfi5s","_id":"cktbjxf2s001abzopeivjhaxj"},{"post_id":"cktocv9zs0000iyophsm1bxum","tag_id":"cktocv9zz0003iyopbn5scomh","_id":"cktocva020007iyopdbog41zs"},{"post_id":"cktocv9zv0001iyoph66j5vpw","tag_id":"cktocva020006iyop6zv78wdm","_id":"cktocva06000biyop1318frwz"},{"post_id":"cktocva000004iyop6yst5skj","tag_id":"cktocv9zz0003iyopbn5scomh","_id":"cktocva07000diyop7jb3h0mh"},{"post_id":"cktocva09000fiyopffce12uz","tag_id":"cktocv9zz0003iyopbn5scomh","_id":"cktocva0a000giyop39r32ncf"},{"post_id":"cktocv9zv0001iyoph66j5vpw","tag_id":"cktod5327000iiyop9b6n03bf","_id":"cktod532a000kiyope6hjfvfd"}],"Tag":[{"name":"Promise","_id":"cktbjxf2a0005bzop64w6dlbl"},{"name":"工程化","_id":"cktbjxf2k000mbzop43mv97m5"},{"name":"micro","_id":"cktbjxf2l000qbzop13tfgmn6"},{"name":"vuex","_id":"cktbjxf2r0019bzopclvmfi5s"},{"name":"webpack","_id":"cktocv9zz0003iyopbn5scomh"},{"name":"Babel","_id":"cktocva020006iyop6zv78wdm"},{"name":"Webpack","_id":"cktod5327000iiyop9b6n03bf"}]}}