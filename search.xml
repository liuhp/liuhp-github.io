<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0-1搭建Vue3+Vite3模板工程（2）-安装依赖</title>
    <url>/posts/39130/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>接上篇<a href="https://juejin.cn/post/7127204457925836813">0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>
<h3 id="一、eslint、css-预处理器sass安装"><a href="#一、eslint、css-预处理器sass安装" class="headerlink" title="一、eslint、css 预处理器sass安装"></a>一、eslint、css 预处理器sass安装</h3><ol>
<li>/tsconfig.json配置文件可以配置使用‘@’符号引入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;useDefineForClassFields&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;esnext&quot;</span>, <span class="string">&quot;dom&quot;</span>],</span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>, <span class="comment">// 解决打包报`vue-tsc --noEmit &amp;&amp; vite build`的错,忽略所有的声明文件(*.d.ts)的类型检查</span></span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;src/*&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src/**/*.ts&quot;</span>, <span class="string">&quot;src/**/*.d.ts&quot;</span>, <span class="string">&quot;src/**/*.tsx&quot;</span>, <span class="string">&quot;src/**/*.vue&quot;</span>],</span><br><span class="line">  <span class="comment">// ts 排除的文件</span></span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>],</span><br><span class="line">  <span class="string">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class="literal">true</span>, <span class="comment">// </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想了解这些配置含义可以参考这篇文章，<br>    <a href="https://juejin.cn/post/7129321798734184462/"># tsconfig.json常见配置</a></p>
<ol start="2">
<li>eslint安装</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev eslint eslint-plugin-vue</span><br></pre></td></tr></table></figure>

<p>eslint配置文件： 在src文件夹下建立.eslintrc.ts文件，配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parser: <span class="string">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class="line">  <span class="keyword">extends</span>: [<span class="string">&#x27;plugin:vue/vue3-essential&#x27;</span>, <span class="string">&#x27;plugin:vue/vue3-stronglyrecommended&#x27;</span>, <span class="string">&#x27;plugin:vue/vue3-recommended&#x27;</span>],</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;comma-dangle&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>] <span class="comment">//禁止使用拖尾逗号</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TODO： 整理一下eslint配置含义<br>3. 安装css预处理器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -D sass sass-loader</span><br></pre></td></tr></table></figure>

<h3 id="二、在项目中引入element-plus-UI组件库"><a href="#二、在项目中引入element-plus-UI组件库" class="headerlink" title="二、在项目中引入element plus UI组件库"></a>二、在项目中引入element plus UI组件库</h3><p>可参考官网：<br><a href="https://element-plus.gitee.io/zh-CN/guide/quickstart.html">https://element-plus.gitee.io/zh-CN/guide/quickstart.html</a></p>
<p>根据自己的需要，如果不在乎打包后大小可以完整导入，也可以按需引入。</p>
<p>本篇文章就完整引入了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure>

<p>在main.ts中加入下面两句：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(store, key).use(router).use(ElementPlus).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然后我们验证一下element plus是否安装成功。</p>
<p>修改HelloWorld.vue文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; showcount &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;el-button @click=<span class="string">&quot;addBtn&quot;</span>&gt;增加&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;@/store/index&quot;</span></span><br><span class="line"><span class="keyword">const</span> store = useStore()</span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> showcount = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> store.getters[<span class="string">&quot;getCount&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> addBtn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.commit(<span class="string">&quot;setCount&quot;</span>, ++count.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>注意，我们通过“@”符号引入文件可能会报错：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Failed <span class="built_in">to</span> <span class="built_in">resolve</span> import <span class="string">&quot;@/store/index&quot;</span> <span class="built_in">from</span> <span class="string">&quot;src\components\HelloWorld.vue&quot;</span>. Does <span class="keyword">the</span> <span class="built_in">file</span> exist?</span><br></pre></td></tr></table></figure>
<p>解决办法，安装@types/node： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i --save-dev @types/node</span><br></pre></td></tr></table></figure>

<p>然后修改vite.config.ts文件，配置“@”符号引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  resolve:&#123;</span><br><span class="line">    alias:[</span><br><span class="line">      &#123;</span><br><span class="line">        find: <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">        replacement: resolve(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后浏览器中就可以看到下面的图，说明element plus引入成功了：</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42d367b4b4534682902c696b009a3fe6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>下面讲解如何布局。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>0-1搭建Vue3+Vite3模板工程（1）-创建工程</title>
    <url>/posts/44161/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>从0搭建一个工程可以更清楚的了解工程的组成，对工程的依赖、配置和运行理解更深入，以后搭建自己脚手架，生成自己的模板工程，提高效率。</p>
<h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ol>
<li>Vite3.x</li>
<li>Vue3.2</li>
<li>TypeScript</li>
<li>Vuex4.x</li>
<li>Vue Router4.x</li>
<li>CSS3<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3></li>
<li>node.js版本需要大于12.0.0</li>
<li>npm<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3>根据vue3官网生成模板工程：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></li>
</ol>
<p>记得将project-name换成自己项目的名字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init vite@latest &lt;project-name&gt; --template vue</span><br></pre></td></tr></table></figure>

<p>1.选择vue：<br><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a920f9491ef47f0ad6e1c21eaf3ec39~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br> 2.选择vue-ts：</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b5171c87b2248c7949cbf9e2a9f78b1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>3.看到这里就已经创建成功了：</p>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d0411a78e174a58910804a3e75d5f8a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>4.根据提示启动工程：<br><code>cd vue3-demo   npm install   npm run dev</code><br>5.访问本地<a href="http://127.0.0.1:5173/%EF%BC%9A">http://127.0.0.1:5173/：</a></p>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4ff39b503d64415bf36642605ab3107~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a129e063aada4ce1bade454745091f3d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>至此，工程创建成功，接下来需要一步一步根据项目需要安装和配置项目所需的依赖。</p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>如果使用的是vscode编辑器，需要禁用Vetur插件，安装Vue Language Features (Volar)插件。</p>
<p>1.安装路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue-router@<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>配置路由：<br>在src根目录下建立/router/index.ts文件,路由配置例子如下：</p>
<p>/src/router/index.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;../components/HelloWorld.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Layout</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>main.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>2.安装vuex</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure>

<p>建立/store/index.ts文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; InjectionKey &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, useStore <span class="keyword">as</span> baseUseStore, Store &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> interface State &#123;</span><br><span class="line">  count: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> key: InjectionKey&lt;Store&lt;State&gt;&gt; = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore&lt;State&gt;(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations:&#123;</span><br><span class="line">    <span class="function"><span class="title">setCount</span>(<span class="params">state:State,count:number</span>)</span>&#123;</span><br><span class="line">      state.count = count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters:&#123;</span><br><span class="line">    <span class="function"><span class="title">getCount</span>(<span class="params">state:State</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 定义自己的 `useStore` 组合式函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useStore</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> baseUseStore(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改main.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store, key &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(store, key).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>修改HelloWorld.vue文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span></span><br><span class="line"><span class="keyword">const</span> store = useStore()</span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> showcount = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> store.getters[<span class="string">&quot;getCount&quot;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> addBtn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.commit(<span class="string">&quot;setCount&quot;</span>, ++count.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; showcount &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=<span class="string">&quot;addBtn&quot;</span>&gt;增加&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>至此，vue-router和Vuex安装配置好了， 下面需要安装eslint,css预处理器及sass安装.</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>0-1搭建Vue3+Vite3模板工程（3）-布局</title>
    <url>/posts/29511/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://juejin.cn/post/7127204457925836813/">0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>
<p><a href="https://juejin.cn/post/7128214905953452039">0-1搭建Vue3+Vite3模板工程（2）-安装依赖</a></p>
<p>接上篇。</p>
<p>通常后管平台多以左右布局或上下布局为主，本篇讲解如何进行整体布局，以左右布局为例。</p>
<ol>
<li>在index.html中加入以下样式：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">html,body,#app&#123;</span><br><span class="line">  padding: 0px;</span><br><span class="line">  margin: 0px;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>将main.ts引入的额外样式注释掉</li>
</ol>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1ab2acdcdb4492879dd5d0ab0c51b3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ol start="3">
<li>在src下新建layout文件夹，在layout下新建index.vue文件，在此文件中写整体布局。</li>
</ol>
<p>index.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layout&quot;</span>&gt;</span><br><span class="line">    &lt;el-aside <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;asside&quot;</span> width=<span class="string">&quot;200px&quot;</span>&gt;Aside&lt;/el-aside&gt;</span><br><span class="line">    &lt;el-container <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layout&quot;</span>&gt;</span><br><span class="line">      &lt;el-header <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;header&quot;</span>&gt;Header&lt;/el-header&gt;</span><br><span class="line">      &lt;el-main <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;main&quot;</span>&gt;Main&lt;/el-main&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span>&gt;</span><br><span class="line">.layout &#123;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">  .asside &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: rgb(<span class="number">48</span>, <span class="number">65</span>, <span class="number">86</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  .header &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #212938;</span><br><span class="line">  &#125;</span><br><span class="line">  .main &#123;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改router配置：<br> router/index.ts文件修改成下面：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;@/layout/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Layout</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
启动工程可以看到首页如下：</li>
</ol>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0a42f12357c4bc49af076e7c1f9efad~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ol start="5">
<li>抽离头部和左侧菜单导航组件</li>
</ol>
<p>在layout下新建header和sidebar文件夹，分别新建index.vue文件</p>
<p>header/index.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;header&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=<span class="string">&#x27;ts&#x27;</span> setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=<span class="string">&#x27;scss&#x27;</span> scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>sidebar/index.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;sidebar&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=<span class="string">&#x27;ts&#x27;</span> setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=<span class="string">&#x27;scss&#x27;</span> scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>修改layout/index.vue, 引入header和sidebar两个组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layout&quot;</span>&gt;</span><br><span class="line">    &lt;el-aside <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;asside&quot;</span> width=<span class="string">&quot;200px&quot;</span>&gt;</span><br><span class="line">      &lt;sidebar&gt;&lt;/sidebar&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line">    &lt;el-container <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layout&quot;</span>&gt;</span><br><span class="line">      &lt;el-header <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;header&quot;</span>&gt;</span><br><span class="line">        &lt;my-header&gt;&lt;/my-header&gt;</span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line">      &lt;el-main <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;main&quot;</span>&gt;Main&lt;/el-main&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> MyHeader <span class="keyword">from</span> <span class="string">&#x27;./header/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Sidebar <span class="keyword">from</span> <span class="string">&#x27;./sidebar/index.vue&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span>&gt;</span><br><span class="line">.layout &#123;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">  .asside &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: rgb(<span class="number">48</span>, <span class="number">65</span>, <span class="number">86</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  .header &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #212938;</span><br><span class="line">  &#125;</span><br><span class="line">  .main &#123;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>到此，整体布局做好了，大家可以根据自己需求调整，也可以调整为上下布局，下面讲解如何制作侧边菜单导航及面包屑。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>0-1搭建Vue3+Vite3模板工程（4）-左侧菜单导航</title>
    <url>/posts/4133/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://juejin.cn/post/7127204457925836813">从0-1搭建Vue3+Vite3模板工程（1）-创建工程</a></p>
<p><a href="https://juejin.cn/post/7128214905953452039/">从0-1搭建Vue3+Vite3模板工程（2）-安装依赖</a></p>
<p><a href="https://juejin.cn/post/7129790915271065637">0-1搭建Vue3+Vite3模板工程（3）-布局</a></p>
<p>左侧菜单导航封装，包含多级菜单，可以配置隐藏某一个菜单。</p>
<ol>
<li>先配置好路由，根据自己的需求，建立好相应的目录；</li>
</ol>
<p>我的目录如下：</p>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a4fd8949a2e4e66a1f71e7dce2c8d5a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>所以我的路由配置如下（别忘了提前在scr/views/下建立相应的页面级组件，在路由中需要引用）：<br>src\router\index.ts：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;@/layout/Index.vue&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;House&quot;</span>,</span><br><span class="line">      hidden: <span class="literal">false</span>,</span><br><span class="line">      roles: [],</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/home/index.vue&quot;</span>),</span><br><span class="line">        name: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;House&quot;</span>,</span><br><span class="line">          hidden: <span class="literal">true</span>,</span><br><span class="line">          roles: [],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/system&quot;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    name: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;系统管理&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;Medal&quot;</span>,</span><br><span class="line">      hidden: <span class="literal">false</span>,</span><br><span class="line">      roles: [],</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/system/department&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/system/department/index.vue&quot;</span>),</span><br><span class="line">        name: <span class="string">&quot;department&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;机构管理&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;MostlyCloudy&quot;</span>,</span><br><span class="line">          hidden: <span class="literal">false</span>,</span><br><span class="line">          roles: [],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/userList&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/system/user/index.vue&quot;</span>),</span><br><span class="line">        name: <span class="string">&quot;userList&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;用户管理&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;MostlyCloudy&quot;</span>,</span><br><span class="line">          roles: [<span class="string">&quot;sys:user&quot;</span>],</span><br><span class="line">          hidden: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/roleList&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/system/role/index.vue&quot;</span>),</span><br><span class="line">        name: <span class="string">&quot;roleList&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;角色管理&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;MostlyCloudy&quot;</span>,</span><br><span class="line">          roles: [<span class="string">&quot;sys:role&quot;</span>],</span><br><span class="line">          hidden: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/menuList&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/system/menu/index.vue&quot;</span>),</span><br><span class="line">        name: <span class="string">&quot;menuList&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;权限管理&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;MostlyCloudy&quot;</span>,</span><br><span class="line">          roles: [<span class="string">&quot;sys:menu&quot;</span>],</span><br><span class="line">          hidden: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/goods&quot;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    name: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;商品管理&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;MostlyCloudy&quot;</span>,</span><br><span class="line">      roles: [<span class="string">&quot;sys:goods&quot;</span>],</span><br><span class="line">      hidden: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/goodCategory&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span></span><br><span class="line">          <span class="keyword">import</span>(<span class="string">&quot;@/views/goods/goodsCategory/index.vue&quot;</span>),</span><br><span class="line">        name: <span class="string">&quot;goodCategory&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;商品分类&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;MostlyCloudy&quot;</span>,</span><br><span class="line">          roles: [<span class="string">&quot;sys:goodsCategory&quot;</span>],</span><br><span class="line">          hidden: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/systenConfig&quot;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    name: <span class="string">&quot;systenConfig&quot;</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;系统工具&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;MostlyCloudy&quot;</span>,</span><br><span class="line">      roles: [<span class="string">&quot;sys:systenConfig&quot;</span>],</span><br><span class="line">      hidden: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/document&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/system/config/index.vue&quot;</span>),</span><br><span class="line">        name: <span class="string">&quot;http://42.193.158.170:8089/swagger-ui/index.html&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;接口文档&quot;</span>,</span><br><span class="line">          icon: <span class="string">&quot;MostlyCloudy&quot;</span>,</span><br><span class="line">          roles: [<span class="string">&quot;sys:document&quot;</span>],</span><br><span class="line">          hidden: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>封装sidebar菜单导航组件：</li>
</ol>
<p>src\layout\sidebar\index.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-menu</span><br><span class="line">    <span class="keyword">default</span>-active=<span class="string">&quot;2&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;el-menu-vertical-demo&quot;</span></span><br><span class="line">    :collapse=<span class="string">&quot;isCollapse&quot;</span></span><br><span class="line">    background-color=<span class="string">&quot;#304156&quot;</span></span><br><span class="line">    router</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;menu-item :menuList=<span class="string">&quot;state.menus&quot;</span>&gt;&lt;/menu-item&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="keyword">import</span> MenuItem <span class="keyword">from</span> <span class="string">&quot;./menu-item.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  state =reactive(&#123;</span><br><span class="line">  menus : [],</span><br><span class="line">&#125;)</span><br><span class="line">onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  state.menus = handleRoutes(routes)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;menus&#x27;</span>, state.menus)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setObjProperties = <span class="function">(<span class="params">target, source</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.entries(source).forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value || <span class="keyword">typeof</span> value !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      target[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleRoutes = <span class="function">(<span class="params">routes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 递归处理路由</span></span><br><span class="line">  <span class="keyword">const</span> routers = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">     redirect, path,</span><br><span class="line">      meta, children = []</span><br><span class="line">    &#125; = routes[i];</span><br><span class="line">    <span class="keyword">const</span> &#123; hidden &#125; = meta</span><br><span class="line">    <span class="keyword">if</span> (hidden) <span class="keyword">break</span>; <span class="comment">// 隐藏的菜单</span></span><br><span class="line">    <span class="comment">// copy route</span></span><br><span class="line">    <span class="keyword">const</span> metaCopy = &#123; ...meta &#125;;</span><br><span class="line">    <span class="keyword">const</span> router = &#123; path, <span class="attr">meta</span>: metaCopy &#125;;</span><br><span class="line">    <span class="comment">// 复制属性</span></span><br><span class="line">    setObjProperties(router, &#123;</span><br><span class="line">      redirect</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// todo 权限判断</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 子菜单</span></span><br><span class="line">    <span class="keyword">const</span> subChildren = children.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> !item.hidden);</span><br><span class="line">    <span class="keyword">if</span> (subChildren &amp;&amp; subChildren.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!meta.showByOneChildren &amp;&amp; subChildren.length === <span class="number">1</span>) &#123;</span><br><span class="line">        metaCopy.type = <span class="string">&#x27;menu&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        metaCopy.type = <span class="string">&#x27;submenu&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      router.children = handleRoutes(subChildren);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      metaCopy.type = <span class="string">&#x27;menu&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    routers.push(router);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> routers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制菜单展开和关闭</span></span><br><span class="line"><span class="keyword">const</span> isCollapse = ref(<span class="literal">false</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.el-menu-vertical-demo:<span class="function"><span class="title">not</span>(<span class="params">.el-menu--collapse</span>)</span> &#123;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  min-height: 400px;</span><br><span class="line">&#125;</span><br><span class="line">.el-menu &#123;</span><br><span class="line">  border-right: none;</span><br><span class="line">&#125;</span><br><span class="line">ul&#123;</span><br><span class="line">  margin: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">::v-deep .el-sub-menu .el-sub-menu__title &#123;</span><br><span class="line">  color: #f4f4f5 !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* .el-submenu .is-active .el-submenu__title &#123;</span></span><br><span class="line"><span class="comment">border-bottom-color: #1890ff;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line">::v-deep .el-menu .el-menu-item &#123;</span><br><span class="line">  color: #bfcbd9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 菜单点中文字的颜色 */</span></span><br><span class="line">::v-deep .el-menu-item.is-active &#123;</span><br><span class="line">  color: #409eff !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当前打开菜单的所有子菜单颜色 */</span></span><br><span class="line">::v-deep .is-opened .el-menu-item &#123;</span><br><span class="line">  background-color: #1f2d3d !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标移动菜单的颜色 */</span></span><br><span class="line">::v-deep .el-menu-item:hover &#123;</span><br><span class="line">  background-color: #001528 !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>src\layout\sidebar\menu-item.vue：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;template v-<span class="keyword">for</span>=<span class="string">&quot;menu in menuList&quot;</span> :key=<span class="string">&quot;menu.path&quot;</span>&gt;</span><br><span class="line">    &lt;el-sub-menu v-<span class="keyword">if</span>=<span class="string">&quot;menu.children &amp;&amp; menu.children.length &gt; 0&quot;</span> :index=<span class="string">&quot;menu.path&quot;</span>&gt;</span><br><span class="line">      &lt;template #title&gt;</span><br><span class="line">        &lt;!-- 动态组件的使用方式 --&gt;</span><br><span class="line">        &lt;component <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;icons&quot;</span> :is=<span class="string">&quot;menu.meta.icon&quot;</span> /&gt;</span><br><span class="line">        &lt;!-- 方式二 --&gt;</span><br><span class="line">        &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">class</span>=<span class="string">&quot;icons&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;menu.mata.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span> --&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; menu.meta.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;menu-item :menuList=<span class="string">&quot;menu.children&quot;</span>&gt;&lt;/menu-item&gt;</span><br><span class="line">    &lt;/el-sub-menu&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-menu-item style=<span class="string">&quot;color:#f4f4f5&quot;</span> v-<span class="keyword">else</span> :index=<span class="string">&quot;menu.path&quot;</span>&gt;</span><br><span class="line">      &lt;i v-<span class="keyword">if</span>=<span class="string">&quot;menu.meta.icon &amp;&amp; menu.meta.icon.includes(&#x27;el-icon&#x27;)&quot;</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menu.meta.icon&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">      &lt;component <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;icons&quot;</span> v-<span class="keyword">else</span> :is=<span class="string">&quot;menu.meta.icon&quot;</span> /&gt;</span><br><span class="line">      &lt;template #title&gt;&#123;&#123; menu.meta.title &#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">defineProps([<span class="string">&#x27;menuList&#x27;</span>])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.icons&#123;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 18px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>3.如果菜单前需要icon, 则需要安装element-plus的icon;</p>
<p>在工程的根目录执行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure>

<p>根据element-plus官方文档：<a href="https://element-plus.gitee.io/zh-CN/component/icon.html#%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87">https://element-plus.gitee.io/zh-CN/component/icon.html#%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E5%9B%BE%E6%A0%87</a></p>
<p>在main.ts中添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果您正在使用CDN引入，请删除下面一行。</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ElementPlusIconsVue <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(ElementPlusIconsVue)) &#123;</span><br><span class="line">  app.component(key, component)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新启动工程，大功告成！</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f12c6fcb21374dccaf585f55584737c1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现call/apply/bind方法</title>
    <url>/posts/42397/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>实现步骤：</p>
<ol>
<li>判断调用对象是否为函数，不是函数需要抛出异常；</li>
<li>判断是否传入改变this指向的第一个参数，如果没传则this默认指向window；</li>
<li>将this赋值给传入的第一个参数（this要指向的对象）一个属性；</li>
<li>将剩余参数传入这个新属性中执行；</li>
<li>删除新属性；</li>
<li>返回结果；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">ctx, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this此时是调用mycall的实例对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !=== <span class="string">&#x27;funciton&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ctx = ctx || <span class="built_in">window</span></span><br><span class="line">  <span class="comment">// this这个实例对象赋值给fn属性</span></span><br><span class="line">  <span class="comment">// 优化：放置fn属性会覆盖该实例本身的fn属性</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>(<span class="number">1</span>)</span><br><span class="line">  ctx[fn] = <span class="built_in">this</span></span><br><span class="line">  <span class="comment">// 以属性方式执行</span></span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](...args)</span><br><span class="line">  <span class="comment">// 执行完删除该属性</span></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>apply实现与call类似，只是传参方式不同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span>(<span class="params">ctx, arg = []</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this此时是调用mycall的实例对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !=== <span class="string">&#x27;funciton&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ctx = ctx || <span class="built_in">window</span></span><br><span class="line">  <span class="comment">// this这个实例对象赋值给fn属性</span></span><br><span class="line">  <span class="comment">// 优化：放置fn属性会覆盖该实例本身的fn属性</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>(<span class="number">1</span>)</span><br><span class="line">  ctx[fn] = <span class="built_in">this</span></span><br><span class="line">  <span class="comment">// 以属性方式执行</span></span><br><span class="line">  <span class="keyword">const</span> res = ctx[fn](arg)</span><br><span class="line">  <span class="comment">// 执行完删除该属性</span></span><br><span class="line">  <span class="keyword">delete</span> ctx[fn]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>因为bind不是立即执行的，需要手动执行，所以可以返回一个函数实现。也可以借助call或apply实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">ctx, ...args1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 箭头函数this指向父级，父级的this是调用该方法的实例</span></span><br><span class="line">    <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>(<span class="number">1</span>)</span><br><span class="line">    ctx[fn] = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> res = ctx[fn](...args1.concat(args2))  <span class="comment">// 参数拼接</span></span><br><span class="line">    <span class="keyword">delete</span> ctx[fn] </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apply实现</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">ctx, ...args1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 箭头函数this指向父级，父级的this是调用该方法的实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.apply(ctx, args1.concat(args2))</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础(一)</title>
    <url>/posts/17039/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>基本类型:</p>
<ol>
<li>Boolean;</li>
<li>Null;</li>
<li>Undefined;</li>
<li>Number;</li>
<li>String;</li>
</ol>
<p>引用类型 :<br>6. Objects: Array, function, Date</p>
<p>新增：<br>7. BigInt: 谷歌67版本出现的数据类型, 是指安全存储、操作大整数，（但是很多人不把这个做为一个类型）;<br>8. Symbol：ES6新增, 这种类型的对象永不相等，即始创建的时候传入相同的值，可以解决属性名冲突的问题，做为标记;</p>
<h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><ul>
<li>typeof</li>
<li>instanceof</li>
<li>Object.prototype.toString</li>
<li>isXXX，比如 isArray</li>
</ul>
<p>typeof:返回一个字符串</p>
<div align="center">
<img data-src="/posts/17039/1.jpg" width="65%">
</div>

<p>因为Object 下有很多细分的类型，如 Array、Function、Date、RegExp、Error 等，typeof无法一一区分，因此可以用Object.prototype.toString来进一步区分：</p>
<blockquote>
<p>When the toString method is called, the following steps are taken:</p>
<ol>
<li>If the this value is undefined, return “[object Undefined]”.</li>
<li>If the this value is null, return “[object Null]”.</li>
<li>Let <em>O</em> be the result of calling ToObject passing the this value as the argument.</li>
<li>Let class be the value of the [[Class]] internal property of O.</li>
<li>Return the String value that is the result of concatenating the three Strings “[object “, class, and “]”.</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下是11种：</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">1</span>;          <span class="comment">// [object Number]</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;123&#x27;</span>;      <span class="comment">// [object String]</span></span><br><span class="line"><span class="keyword">var</span> boolean = <span class="literal">true</span>;      <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="keyword">var</span> und = <span class="literal">undefined</span>;     <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="keyword">var</span> nul = <span class="literal">null</span>;          <span class="comment">// [object Null]</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;         <span class="comment">// [object Object]</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];   <span class="comment">// [object Array]</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();   <span class="comment">// [object Date]</span></span><br><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(); <span class="comment">// [object Error]</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/g</span>;          <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// [object Function]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>[i]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkType(number, string, boolean, und, nul, obj, array, date, error, reg, func)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此外还有</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Math</span>)); <span class="comment">// [object Math]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">JSON</span>)); <span class="comment">// [object JSON]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>)); <span class="comment">// [object Arguments]</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>instanceof： 用于判断一个变量是否属于某个对象的实例。也可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;&#125;;<span class="keyword">var</span> a=<span class="keyword">new</span> test();alert(a <span class="keyword">instanceof</span> test) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Array</span>();<span class="keyword">if</span> (a <span class="keyword">instanceof</span> <span class="built_in">Object</span>) alert(<span class="string">&#x27;Y&#x27;</span>);<span class="keyword">else</span> alert(<span class="string">&#x27;N&#x27;</span>); <span class="comment">// Y</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>) alert(<span class="string">&#x27;Y&#x27;</span>);<span class="keyword">else</span> alert(<span class="string">&#x27;N&#x27;</span>); <span class="comment">// N</span></span><br><span class="line"><span class="comment">// 所以，这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。</span></span><br><span class="line">alert(<span class="keyword">typeof</span>(<span class="built_in">window</span>)) <span class="comment">// 会得到object</span></span><br></pre></td></tr></table></figure>

<p>参考：<br>[1]:<a href="https://www.php.cn/js-tutorial-411579.html">https://www.php.cn/js-tutorial-411579.html</a><br>[2]:<a href="https://github.com/mqyqingfeng/Blog/issues/28">https://github.com/mqyqingfeng/Blog/issues/28</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise(二)——并行请求</title>
    <url>/posts/60422/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- <img data-src="https://cdn.pixabay.com/photo/2021/01/24/20/21/cloud-5946381_1280.jpg" width="100%" height="480px;"/> -->

<p>若想系统学习Promise可以阅读：<a href="https://es6.ruanyifeng.com/#docs/promise">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>
<h3 id="Promise并行请求"><a href="#Promise并行请求" class="headerlink" title="Promise并行请求"></a>Promise并行请求</h3><ul>
<li>getA和getB并行执行，然后输出结果。如果有一个错误，就抛出错误</li>
<li>每一个promise都必须返回resolve结果才正确</li>
<li>每一个promise都不处理错误</li>
<li>参考：<a href="https://www.jianshu.com/p/dbda3053da20">https://www.jianshu.com/p/dbda3053da20</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每一个promise都必须返回resolve结果才正确</span></span><br><span class="line"><span class="comment"> * 每一个promise都不处理错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getA = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//模拟异步任务</span></span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     resolve(<span class="number">2</span>);</span><br><span class="line">   &#125;, <span class="number">1000</span>) </span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getB = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// resolve(3);</span></span><br><span class="line">     reject(<span class="string">&#x27;Error in getB&#x27;</span>);</span><br><span class="line">   &#125;, <span class="number">1000</span>) </span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([getA, getB]).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e));</span><br></pre></td></tr></table></figure>

<ul>
<li>getA和getB并行执行，然后输出结果。总是返回resolve结果</li>
<li>每一个promise自己处理错误</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每一个promise自己处理错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getA = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//模拟异步任务</span></span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     resolve(<span class="number">2</span>);</span><br><span class="line">   &#125;, <span class="number">1000</span>) </span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getB = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// resolve(3);</span></span><br><span class="line">     reject(<span class="string">&#x27;Error in getB&#x27;</span>);</span><br><span class="line">   &#125;, <span class="number">1000</span>) </span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span>=&gt;</span>e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([getA, getB]).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e));</span><br></pre></td></tr></table></figure>

<ul>
<li>Promise.all传入同一个方法不同参数的封装</li>
<li>应用场景 比如你需要同时发起多页请求,需要传入页码但是方法都是一样的此时我们就可以进行封装一下,很实用的一个技巧</li>
<li>参考：<a href="https://blog.csdn.net/qq_25842063/article/details/84284911">https://blog.csdn.net/qq_25842063/article/details/84284911</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    tasks.push(i);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @params : func:你封装的方法 params: 参数的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> getDataBind = <span class="function">(<span class="params">func, params</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> params.map( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> func.call(<span class="literal">null</span>, item) <span class="comment">//传参</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> @params : page_no 页码  </span></span><br><span class="line"><span class="comment"> getDate 可以换成你自己需要重复操作的方法,同理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> getData = <span class="function">(<span class="params">page_no</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> saveListData = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="built_in">this</span>.props.saveListData));</span><br><span class="line">        <span class="keyword">let</span> params = &#123;</span><br><span class="line">            page_no:page_no,</span><br><span class="line">            ...saveListData.loadParams</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            get(<span class="built_in">this</span>.props.sortUrl, params, <span class="built_in">this</span>, <span class="literal">false</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                resolve(data.result;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;  </span><br><span class="line"> <span class="built_in">Promise</span>.all(<span class="built_in">this</span>.getDataBind(<span class="built_in">this</span>.getData, arrPage))</span><br><span class="line">	.then( <span class="function"><span class="params">resultArr</span>  =&gt;</span> &#123;</span><br><span class="line">		    resultArr = resultArr.flat();<span class="comment">//拉平数组</span></span><br><span class="line">		    <span class="built_in">console</span>.log(resultArr)    <span class="comment">//这里就获取到所有页的数据了</span></span><br><span class="line">	&#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础（二）</title>
    <url>/posts/22254/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、类型转换"><a href="#一、类型转换" class="headerlink" title="一、类型转换"></a>一、类型转换</h2><h3 id="（1）原始值-gt-对象"><a href="#（1）原始值-gt-对象" class="headerlink" title="（1）原始值 -&gt; 对象"></a>（1）原始值 -&gt; 对象</h3><h4 id="1-原始值转字符串"><a href="#1-原始值转字符串" class="headerlink" title="1 原始值转字符串"></a>1 原始值转字符串</h4><p>String()</p>
<h4 id="2-原始值转数字"><a href="#2-原始值转数字" class="headerlink" title="2 原始值转数字"></a>2 原始值转数字</h4><p>方法一：<br>Number()<br>方法二：<br>算数函数或表达式：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>变成……</th>
</tr>
</thead>
<tbody><tr>
<td>undefined</td>
<td>NaN</td>
</tr>
<tr>
<td>null</td>
<td>0</td>
</tr>
<tr>
<td>true和false</td>
<td>1 和 0</td>
</tr>
<tr>
<td>string</td>
<td>去掉首尾空格后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。</td>
</tr>
</tbody></table>
<p>注意：<br>如果通过 Number 转换函数传入一个字符串，它会试图将其转换成一个整数或浮点数，而且会忽略所有前导的 0，如果有一个字符不是数字，结果都会返回 NaN，鉴于这种严格的判断，我们一般还会使用更加灵活的 parseInt 和 parseFloat 进行转换。</p>
<p>parseInt 只解析整数，parseFloat 则可以解析整数和浮点数，如果字符串前缀是 “0x” 或者”0X”，parseInt 将其解释为十六进制数，parseInt 和 parseFloat 都会跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略后面的内容。如果第一个非空格字符是非法的数字直接量，将最终返回 NaN：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;3 abc&quot;</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&quot;3.14 abc&quot;</span>)) <span class="comment">// 3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;-12.34&quot;</span>)) <span class="comment">// -12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;0xFF&quot;</span>)) <span class="comment">// 255</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&quot;.1&quot;</span>)) <span class="comment">// 0.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;0.1&quot;</span>)) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h4 id="3-原始值转布尔类型"><a href="#3-原始值转布尔类型" class="headerlink" title="3 原始值转布尔类型"></a>3 原始值转布尔类型</h4><p>转换规则如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>变成……</th>
</tr>
</thead>
<tbody><tr>
<td>+0, -0, null, undefined, NaN, “”, false</td>
<td>false</td>
</tr>
<tr>
<td>其他值</td>
<td>true</td>
</tr>
</tbody></table>
<blockquote>
<p>请注意:</p>
<ul>
<li>当 Boolean 函数不传任何参数时，会返回 false;</li>
<li>包含 0 的字符串 “0” 是 true一些编程语言（比如 PHP）视 “0” 为 false。但在 JavaScript中，非空的字符串总是 true;</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert( <span class="built_in">Boolean</span>(<span class="string">&quot;0&quot;</span>) ); <span class="comment">// true</span></span><br><span class="line">alert( <span class="built_in">Boolean</span>(<span class="string">&quot; &quot;</span>) ); <span class="comment">// 空白，也是 true（任何非空字符串都是 true）</span></span><br></pre></td></tr></table></figure>
<h4 id="4-原始值转对象"><a href="#4-原始值转对象" class="headerlink" title="4 原始值转对象"></a>4 原始值转对象</h4><p>原始值到对象的转换非常简单，原始值通过调用 String()、Number() 或者 Boolean() 构造函数，转换为它们各自的包装对象。</p>
<p>null 和 undefined 属于例外，当将它们用在期望是一个对象的地方都会造成一个类型错误 (TypeError) 异常，而不会执行正常的转换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// number</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）对象-gt-原始值"><a href="#（2）对象-gt-原始值" class="headerlink" title="（2）对象 -&gt; 原始值"></a>（2）对象 -&gt; 原始值</h3><h4 id="1-对象转布尔值"><a href="#1-对象转布尔值" class="headerlink" title="1 对象转布尔值"></a>1 对象转布尔值</h4><p>所有对象（包括函数和数组）的布尔值都是true.</p>
<h4 id="2-对象转字符串和数字"><a href="#2-对象转字符串和数字" class="headerlink" title="2 对象转字符串和数字"></a>2 对象转字符串和数字</h4><p>对象到字符串和对象到数字的转换都是通过调用待转换对象的一个方法来完成的。而 JavaScript 对象有两个不同的方法来执行转换，一个是 toString，一个是 valueOf,这两个方法是真实暴露出来的方法。</p>
<p>所有的对象除了 null 和 undefined 之外的任何值都具有 toString 方法。</p>
<ol>
<li>数组的 toString 方法将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并成结果字符串。</li>
<li>函数的 toString 方法返回源代码字符串。</li>
<li>日期的 toString 方法返回一个可读的日期和时间字符串。</li>
<li>RegExp 的 toString 方法返回一个表示正则表达式直接量的字符串。</li>
</ol>
<p>而另一个转换对象的函数是 valueOf，表示对象的原始值。<strong>默认的 valueOf 方法返回这个对象本身，数组、函数、正则简单的继承了这个默认方法，也会返回对象本身</strong>。日期是一个例外，它会返回它的一个内容表示: 1970 年 1 月 1 日以来的毫秒数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">21</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf()) <span class="comment">// 1495296000000</span></span><br></pre></td></tr></table></figure>

<p>更复杂的情况见参考文献[2],写的很详细，很简单易懂。</p>
<h2 id="二、操作符强制类型转换"><a href="#二、操作符强制类型转换" class="headerlink" title="二、操作符强制类型转换"></a>二、操作符强制类型转换</h2><h3 id="1-一元操作符"><a href="#1-一元操作符" class="headerlink" title="1 一元操作符 +"></a>1 一元操作符 +</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+[]); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(+[<span class="string">&#x27;1&#x27;</span>]); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(+[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(+&#123;&#125;); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>执行的步骤是：</p>
<ol>
<li>如果 obj 为基本类型，直接返回</li>
<li>否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</li>
<li>否则，调用 toString 方法，如果返回一个原始值，则JavaScript 将其返回。</li>
<li>否则，JavaScript 抛出一个类型错误异常。</li>
</ol>
<p>注意：前面讲过：默认的 valueOf 方法返回这个对象本身</p>
<h3 id="2-二元操作符"><a href="#2-二元操作符" class="headerlink" title="2 二元操作符 +"></a>2 二元操作符 +</h3><p>当计算 value1 + value2时：</p>
<ol>
<li>lprim = ToPrimitive(value1)</li>
<li>rprim = ToPrimitive(value2)</li>
<li>如果 lprim 是字符串或者 rprim 是字符串，那么返回 ToString(lprim) 和 ToString(rprim)的拼接结果</li>
<li>返回 ToNumber(lprim) 和 ToNumber(rprim)的运算结果</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="string">&#x27;1&#x27;</span>); <span class="comment">// 11（字符串）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> + <span class="number">1</span>); <span class="comment">// 1（数字）</span></span><br><span class="line"><span class="built_in">console</span>.log([] + []); <span class="comment">// &#x27;&#x27;(空字符串)</span></span><br><span class="line"><span class="built_in">console</span>.log([] + &#123;&#125;); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="literal">true</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; + &#123;&#125;); <span class="comment">// &quot;[object Object][object Object]&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">04</span>, <span class="number">21</span>) + <span class="number">1</span>) <span class="comment">// &quot;Sun May 21 2017 00:00:00 GMT+0800 (CST)1&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-相等"><a href="#3-相等" class="headerlink" title="3 ==相等"></a>3 ==相等</h3><p>操作规则如下图：</p>
<div align="center">
<img data-src="/posts/22254/1.jpg" width="65%">
</div>






<p>参考：<br>[1].<a href="https://zh.javascript.info/type-conversions">类型转换</a><br>[2].<a href="https://github.com/mqyqingfeng/Blog/issues/159">JavaScript 深入之头疼的类型转换(上)</a>  写的很细👍<br>[3].<a href="https://github.com/mqyqingfeng/Blog/issues/164">JavaScript 深入之头疼的类型转换(下)</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise(一)—顺序请求</title>
    <url>/posts/49376/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>若想系统学习Promise可以阅读：<a href="https://es6.ruanyifeng.com/#docs/promise">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>
<h3 id="Promise顺序请求"><a href="#Promise顺序请求" class="headerlink" title="Promise顺序请求"></a>Promise顺序请求</h3><p>方法1——连续使用then链式调用<br>方法2——使用promise构建队列<br>方法3——使用async、await实现类似同步编程，async函数内部实现同步<br>参考：<a href="https://www.jianshu.com/p/dbda3053da20">https://www.jianshu.com/p/dbda3053da20</a></p>
<h4 id="方法1：链式调用"><a href="#方法1：链式调用" class="headerlink" title="方法1：链式调用"></a>方法1：链式调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;     </span><br><span class="line">          resolve(<span class="number">2</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getB</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;       </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(<span class="number">3</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAB</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  obj=&#123;&#125;;</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  getA() </span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">         obj.a=a;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getB() </span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">         obj.b=b;</span><br><span class="line">         <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  addAB(obj[<span class="string">&#x27;a&#x27;</span>],obj[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e));</span><br><span class="line">&#125;</span><br><span class="line">getResult();</span><br></pre></td></tr></table></figure>
<h4 id="方法2：（TODO）"><a href="#方法2：（TODO）" class="headerlink" title="方法2：（TODO）"></a>方法2：（TODO）</h4><h4 id="方法3：（TODO）"><a href="#方法3：（TODO）" class="headerlink" title="方法3：（TODO）"></a>方法3：（TODO）</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2-模板编译</title>
    <url>/posts/38405/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>把用户在模板中写的类似于原生html的内容进行编译。把原生html和非原生html找出，经过一系列处理成render函数的过程称为模板编译过程。</p>
<p>最终目的就是：把用户所写的模板转化成供Vue实例在挂载时可调用的render函数。或者你可以这样简单的理解为：模板编译就是一台机器，给它输入模板字符串，它就输出对应的render函数。</p>
<p>其中有三个阶段：<br>1.代码解析阶段：将一堆模板字符串用正则的方式解析成抽象语法树（AST）；<br>2.代码优化阶段：遍历AST进行静态节点的标记；<br>3.代码生成阶段：将AST转换成render函数；</p>
<div align="center">
<img data-src="/posts/38405/2.png" width="60%">
</div>

<h3 id="1-代码解析阶段"><a href="#1-代码解析阶段" class="headerlink" title="1.代码解析阶段"></a>1.代码解析阶段</h3><p>HTML解析器是主线，先用HTML解析器进行解析整个模板，在解析过程中如果碰到文本内容，那就调用文本解析器来解析文本，如果碰到文本中包含过滤器那就调用过滤器解析器来解析。</p>
<div align="center">
<img data-src="/posts/38405/1.png" width="60%">
</div>

<p>HTML解析器：一边解析不同的内容一边调用对应的钩子函数生成对应的AST节点，最终完成将整个模板字符串转化成AST；<br>文本解析器：作用就是将HTML解析器解析得到的文本内容进行二次解析，解析文本内容中是否包含变量，如果包含变量，则将变量提取出来进行加工，为后续生产render函数做准备；</p>
<p>在解析过程中会给标签标记上type类型，便于后面的优化阶段；<br>type=1: 元素节点<br>type=2: 包含变量的节点<br>type=3: 纯文本节点</p>
<h3 id="2-代码优化阶段"><a href="#2-代码优化阶段" class="headerlink" title="2.代码优化阶段"></a>2.代码优化阶段</h3><p>打静态标记的目的是为后面虚拟dom做diff算法也就是patch时，跳过静态节点，提高性能；</p>
<p>优化阶段干了两件事：<br>1.在AST中找出所有静态节点并打上标记；<br>2.在AST中找出所有静态根节点并打上标记；</p>
<p>打标记会根据type类型进行处理；若type=3, 一定是静态节点；若type=2,一定是非静态；若type=3，再继续深层遍历；</p>
<h3 id="3-代码生成阶段"><a href="#3-代码生成阶段" class="headerlink" title="3.代码生成阶段"></a>3.代码生成阶段</h3><p>所谓代码生成其实就是根据模板对应的抽象语法树AST生成一个函数，通过调用这个函数就可以得到模板对应的虚拟DOM。</p>
<p>见本人CSDN：<a href="https://blog.csdn.net/liuhp123/article/details/117534737?spm=1001.2014.3001.5501">【vue源码】模板编译</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise(三)-核心源码</title>
    <url>/posts/31155/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- <img data-src="https://cdn.pixabay.com/photo/2021/02/07/05/15/road-5990128__480.jpg" width="100%" height="480px"> -->

<p>若想系统学习Promise可以阅读：<a href="https://es6.ruanyifeng.com/#docs/promise">阮一峰大神写的Promise对象</a>，此篇记录常用用法。</p>
<h3 id="源码讲解"><a href="#源码讲解" class="headerlink" title="源码讲解"></a>源码讲解</h3><p>类写法：</p>
<h4 id="step1-同步非链式调用"><a href="#step1-同步非链式调用" class="headerlink" title="step1 - 同步非链式调用"></a>step1 - 同步非链式调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"></span><br><span class="line">Class MyPromise &#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">handle</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;PENDING&#x27;</span> <span class="comment">// 状态</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>  <span class="comment">// 成功状态的变量</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>  <span class="comment">// 失败状态的失败原因</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成功时改变状态，并赋值value</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">        <span class="built_in">this</span>.value = val</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 失败时改变状态，并赋值reason</span></span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">        <span class="built_in">this</span>.reason = reason</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// catch住当前同步代码的错误</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      handle(resolve, reject)</span><br><span class="line">    &#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then时根据状态执行回调</span></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status = FULFILLED) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status = REJECTED) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时还不能链式调用</span></span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = test()</span><br><span class="line">p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>构造函数写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义变量</span></span><br><span class="line">  <span class="built_in">this</span>.status = <span class="string">&#x27;PENDING&#x27;</span> <span class="comment">// 状态</span></span><br><span class="line">  <span class="built_in">this</span>.value = <span class="literal">undefined</span>  <span class="comment">// 成功状态的变量</span></span><br><span class="line">  <span class="built_in">this</span>.reason = <span class="literal">undefined</span>  <span class="comment">// 失败状态的失败原因</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 成功时改变状态，并赋值value</span></span><br><span class="line">  <span class="keyword">let</span> resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">      <span class="built_in">this</span>.value = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 失败时改变状态，并赋值reason</span></span><br><span class="line">  <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">      <span class="built_in">this</span>.reason = reason</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// catch住当前同步代码的错误</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    handle(resolve, reject)</span><br><span class="line">  &#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO  then方法</span></span><br></pre></td></tr></table></figure>

<h4 id="step2-加入异步"><a href="#step2-加入异步" class="headerlink" title="step2 - 加入异步"></a>step2 - 加入异步</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异步调用，该如何处理then方法？</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">100</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = test()</span><br><span class="line">p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"></span><br><span class="line">Class MyPromise &#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">handle</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;PENDING&#x27;</span> <span class="comment">// 状态</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>  <span class="comment">// 成功状态的变量</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>  <span class="comment">// 失败状态的失败原因</span></span><br><span class="line">    <span class="comment">// changed-begin</span></span><br><span class="line">    <span class="built_in">this</span>.resolveCbs = [] <span class="comment">// 存放成功回调</span></span><br><span class="line">    <span class="built_in">this</span>.rejectCbs = [] <span class="comment">// 存放失败回调</span></span><br><span class="line">    <span class="comment">// changed-end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成功时改变状态，并赋值value</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">        <span class="built_in">this</span>.value = val</span><br><span class="line">        <span class="comment">// changed --&gt;</span></span><br><span class="line">         <span class="built_in">this</span>.resolveCbs.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 失败时改变状态，并赋值reason</span></span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">        <span class="built_in">this</span>.reason = reason</span><br><span class="line">        <span class="comment">// changed --&gt;</span></span><br><span class="line">        <span class="built_in">this</span>.rejectCbs.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// catch住当前同步代码的错误</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      handle(resolve, reject)</span><br><span class="line">    &#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then时根据状态执行回调</span></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status = FULFILLED) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status = REJECTED) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异步调用，该如何处理then方法？异步时，此时状态为pending, 需要将回调函数存起来，等待时机到了再拿出来执行</span></span><br><span class="line">    <span class="comment">// changed-begin --&gt;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status = PENDING) &#123;</span><br><span class="line">      <span class="built_in">this</span>.resolveCbs.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onFulfilled(<span class="built_in">this</span>.value)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.rejectCbs.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onRejected(<span class="built_in">this</span>.reason)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// changed-end --&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="step3-加入链式调用"><a href="#step3-加入链式调用" class="headerlink" title="step3 - 加入链式调用"></a>step3 - 加入链式调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">100</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = test();</span><br><span class="line"><span class="comment">// p1 =&gt; resolve(100) =&gt;  p1.then(res)  res =&gt; 100;</span></span><br><span class="line"><span class="comment">// p2  =&gt; resolve(res)  =&gt;  p2.then(res) =&gt; res ??</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = p1.then(</span><br><span class="line">  res =&gt; &#123;</span><br><span class="line">    <span class="comment">// return &#123;</span></span><br><span class="line">    <span class="comment">//   then(resolve, reject) &#123;</span></span><br><span class="line">    <span class="comment">//     reject(100000);</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(</span><br><span class="line">        <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(</span><br><span class="line">            <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">              resolve(<span class="number">100000000000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">          );</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; <span class="built_in">console</span>.log(err)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p2.then(</span><br><span class="line">  res =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;,</span><br><span class="line">  err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&quot;pending&quot;</span>,</span><br><span class="line">  FULFILLED = <span class="string">&quot;fulfilled&quot;</span>,</span><br><span class="line">  REJECTED = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.state = PENDING;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = FULFILLED;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = REJECTED;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulFilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> x;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === FULFILLED) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          x = onFulFilled(<span class="built_in">this</span>.value);</span><br><span class="line">          <span class="comment">//resolve(x);</span></span><br><span class="line"></span><br><span class="line">          resolvePromise(p2, x, resolve, reject);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// x 决定 了 p2 的状态, resolve(x)或者 reject(x)；</span></span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === REJECTED) &#123;</span><br><span class="line">        x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">        resolvePromise(p2, x, resolve, reject);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === PENDING) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          x = onFulFilled(<span class="built_in">this</span>.value);</span><br><span class="line">          resolvePromise(p2, x, resolve, reject);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">          resolvePromise(p2, x, resolve, reject);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">p2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;引用错误&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// thenable 对象;  blueBird q;</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&quot;object&quot;</span> &amp;&amp; x !== <span class="literal">null</span>) || <span class="keyword">typeof</span> x === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        then.call(</span><br><span class="line">          x,</span><br><span class="line">          y =&gt; &#123;</span><br><span class="line">            resolvePromise(p2, y, resolve, reject);</span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Promise-完整核心源码"><a href="#Promise-完整核心源码" class="headerlink" title="Promise 完整核心源码"></a>Promise 完整核心源码</h3><p>参考：<a href="https://www.jianshu.com/p/43de678e918a">https://www.jianshu.com/p/43de678e918a</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断变量否为function</span></span><br><span class="line"><span class="keyword">const</span> isFunction = <span class="function"><span class="params">variable</span> =&gt;</span> <span class="keyword">typeof</span> variable === <span class="string">&#x27;function&#x27;</span></span><br><span class="line"><span class="comment">// 定义Promise的三种状态常量</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;PENDING&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;FULFILLED&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">handle</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isFunction(handle)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;MyPromise must accept a function as a parameter&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加状态</span></span><br><span class="line">    <span class="built_in">this</span>._status = PENDING</span><br><span class="line">    <span class="comment">// 添加状态</span></span><br><span class="line">    <span class="built_in">this</span>._value = <span class="literal">undefined</span></span><br><span class="line">    <span class="comment">// 添加成功回调函数队列</span></span><br><span class="line">    <span class="built_in">this</span>._fulfilledQueues = []</span><br><span class="line">    <span class="comment">// 添加失败回调函数队列</span></span><br><span class="line">    <span class="built_in">this</span>._rejectedQueues = []</span><br><span class="line">    <span class="comment">// 执行handle</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      handle(<span class="built_in">this</span>._resolve.bind(<span class="built_in">this</span>), <span class="built_in">this</span>._reject.bind(<span class="built_in">this</span>)) </span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">this</span>._reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加resovle时执行的函数</span></span><br><span class="line">  _resolve (val) &#123;</span><br><span class="line">    <span class="keyword">const</span> run = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>._status !== PENDING) <span class="keyword">return</span></span><br><span class="line">      <span class="built_in">this</span>._status = FULFILLED</span><br><span class="line">      <span class="comment">// 依次执行成功队列中的函数，并清空队列</span></span><br><span class="line">      <span class="keyword">const</span> runFulfilled = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cb;</span><br><span class="line">        <span class="keyword">while</span> (cb = <span class="built_in">this</span>._fulfilledQueues.shift()) &#123;</span><br><span class="line">          cb(value)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class="line">      <span class="keyword">const</span> runRejected = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cb;</span><br><span class="line">        <span class="keyword">while</span> (cb = <span class="built_in">this</span>._rejectedQueues.shift()) &#123;</span><br><span class="line">          cb(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,</span></span><br><span class="line"><span class="comment">        当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">if</span> (val <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">        val.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>._value = value</span><br><span class="line">          runFulfilled(value)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>._value = err</span><br><span class="line">          runRejected(err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._value = val</span><br><span class="line">        runFulfilled(val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(run, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加reject时执行的函数</span></span><br><span class="line">  _reject (err) &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>._status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 依次执行失败队列中的函数，并清空队列</span></span><br><span class="line">    <span class="keyword">const</span> run = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>._status = REJECTED</span><br><span class="line">      <span class="built_in">this</span>._value = err</span><br><span class="line">      <span class="keyword">let</span> cb;</span><br><span class="line">      <span class="keyword">while</span> (cb = <span class="built_in">this</span>._rejectedQueues.shift()) &#123;</span><br><span class="line">        cb(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为了支持同步的Promise，这里采用异步调用</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(run, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加then方法</span></span><br><span class="line">  then (onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _value, _status &#125; = <span class="built_in">this</span></span><br><span class="line">    <span class="comment">// 返回一个新的Promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">onFulfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 封装一个成功时执行的函数</span></span><br><span class="line">      <span class="keyword">let</span> fulfilled = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isFunction(onFulfilled)) &#123;</span><br><span class="line">            onFulfilledNext(value)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> res =  onFulfilled(value);</span><br><span class="line">            <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">              <span class="comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class="line">              res.then(onFulfilledNext, onRejectedNext)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class="line">              onFulfilledNext(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class="line">          onRejectedNext(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 封装一个失败时执行的函数</span></span><br><span class="line">      <span class="keyword">let</span> rejected = <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isFunction(onRejected)) &#123;</span><br><span class="line">            onRejectedNext(error)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> res = onRejected(error);</span><br><span class="line">              <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">                <span class="comment">// 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调</span></span><br><span class="line">                res.then(onFulfilledNext, onRejectedNext)</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数</span></span><br><span class="line">                onFulfilledNext(res)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 如果函数执行出错，新的Promise对象的状态为失败</span></span><br><span class="line">          onRejectedNext(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">switch</span> (_status) &#123;</span><br><span class="line">        <span class="comment">// 当状态为pending时，将then方法回调函数加入执行队列等待执行</span></span><br><span class="line">        <span class="keyword">case</span> PENDING:</span><br><span class="line">          <span class="built_in">this</span>._fulfilledQueues.push(fulfilled)</span><br><span class="line">          <span class="built_in">this</span>._rejectedQueues.push(rejected)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="comment">// 当状态已经改变时，立即执行对应的回调函数</span></span><br><span class="line">        <span class="keyword">case</span> FULFILLED:</span><br><span class="line">          fulfilled(_value)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> REJECTED:</span><br><span class="line">          rejected(_value)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加catch方法</span></span><br><span class="line">  <span class="keyword">catch</span> (onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加静态resolve方法</span></span><br><span class="line">  <span class="keyword">static</span> resolve (value) &#123;</span><br><span class="line">    <span class="comment">// 如果参数是MyPromise实例，直接返回这个实例</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加静态reject方法</span></span><br><span class="line">  <span class="keyword">static</span> reject (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve ,reject</span>) =&gt;</span> reject(value))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加静态all方法</span></span><br><span class="line">  <span class="keyword">static</span> all (list) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回值的集合</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">let</span> values = []</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> [i, p] <span class="keyword">of</span> list.entries()) &#123;</span><br><span class="line">        <span class="comment">// 数组参数如果不是MyPromise实例，先调用MyPromise.resolve</span></span><br><span class="line">        <span class="built_in">this</span>.resolve(p).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          values[i] = res</span><br><span class="line">          count++</span><br><span class="line">          <span class="comment">// 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled</span></span><br><span class="line">          <span class="keyword">if</span> (count === list.length) resolve(values)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 有一个被rejected时返回的MyPromise状态就变成rejected</span></span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加静态race方法</span></span><br><span class="line">  <span class="keyword">static</span> race (list) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> list) &#123;</span><br><span class="line">        <span class="comment">// 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变</span></span><br><span class="line">        <span class="built_in">this</span>.resolve(p).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> (cb) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(</span><br><span class="line">      value  =&gt; MyPromise.resolve(cb()).then(<span class="function">() =&gt;</span> value),</span><br><span class="line">      reason =&gt; MyPromise.resolve(cb()).then(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3+TS项目中遇到的eslint问题</title>
    <url>/posts/59852/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li>Component name “Tabs” should always be multi-word  vue/multi-word-component-names</li>
</ol>
<p>配置.eslintrc.json中的rules:</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;vue/multi-word-component-names&quot;</span>: [<span class="string">&quot;off&quot;</span>]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>error  ‘.native’ modifier on ‘v-on’ directive is deprecated  vue/no-deprecated-v-on-native-modifier</li>
</ol>
<p>‘.<a href="https://so.csdn.net/so/search?q=native&spm=1001.2101.3001.7020">native</a>‘修饰符在vue3中被弃用了，所以在代码中去掉<code>.native</code>就可以了。</p>
<ol start="3">
<li>error  Custom elements in iteration require ‘v-bind:key’ directives  vue/valid-v-for</li>
</ol>
<p>原因是代码模板中使用了v-for, 但是没有绑定key值，解决办法建议给v-for绑定key值。</p>
<ol start="4">
<li>Unexpected mutation of “isShowDialog” prop  vue/no-mutating-props</li>
</ol>
<p>父组件传递过来的变量绑定弹窗会报错，原因是单向数据流，子组件不能该变父组件变量。</p>
<p>改成如下写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;biz-detail</span><br><span class="line">    v-model:isShowDialog=<span class="string">&quot;state.isShowDialog&quot;</span></span><br><span class="line">    ...</span><br><span class="line">&gt;&lt;/biz-detail&gt;</span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">...</span><br><span class="line">&lt;el-dialog</span><br><span class="line">    v-model=<span class="string">&quot;dialogVisible&quot;</span></span><br><span class="line">    ...</span><br><span class="line">&gt;...&lt;/dialog&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emits = defineEmits([<span class="string">&#x27;update:isShowDialog&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> dialogVisible = computed(&#123;</span><br><span class="line">  get: <span class="function">() =&gt;</span> props.isShowDialog,</span><br><span class="line">  set: <span class="function">(<span class="params">val: boolean</span>) =&gt;</span> &#123;</span><br><span class="line">    emits(<span class="string">&#x27;update:isShowDialog&#x27;</span>, val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能贷款平台-Upstart</title>
    <url>/posts/27694/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Upstart是什么？"><a href="#Upstart是什么？" class="headerlink" title="Upstart是什么？"></a>Upstart是什么？</h3><p>Upstart是领先的人工智能（AI）贷款平台，旨在改善人们负担得起的信贷的使用率，同时降低银行合作伙伴的贷款风险和成本。 通过利用Upstart的AI平台，支持Upstart的银行可以提供更高的批准率，并降低损失率（不良貸款率），同时提供客户所需的卓越的数字优先贷款体验。</p>
<h3 id="运作模式"><a href="#运作模式" class="headerlink" title="运作模式"></a>运作模式</h3><p>Upstart与银行间的服务模式是由Upstart负责带入客户，以AI审核贷款跟决定利率，实际由银行合作伙伴完成实际贷款的流程，而Upstart负责抽成[1]。它的一些产品包括<strong>个人贷款、婚礼贷款、信用卡合併和汽车贷款</strong>。Upstart贷款年利率在 8.27% 到 35.99% 之间，具体取决于产品。合作银行通过这样的促销方式将可带来更多的用户流量与稳定使用率，在未来也能够针用户们提供贷款以外的产品与客制化服务，提升客户的黏度[2]。</p>
<h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>美國傳統的信貸模型是利用FICO[3]來計算信用分數，但此方法量化風險的能力有限，目前，该公司的人工智能模型包含了1000多个变量来提供决策。公司的人工智能平台已经通过1050万多个还款事件进行自我学习，实时自我优化模型。Upstart 的演算法能够根据非传统指标评估借款人。<strong>如除了他们的工作经历之外，它还考虑了借款人的教育和他们上学的地方，而不仅是收入和资产。</strong>公司声称其决策过程可以将违约率降低 75%。事实上，在相同的整体贷款损失率下，Upstart批出的贷款数目比美国大型银行多173% 。</p>
<h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>另一方面，Upstart 当前的商业模式以及产品也都还未发展完善 ，以用户面来看，目前散户投资人还无法利用 Upstart 平台进行投资；以产品面来看，Upstart 目前的贷款方案种类相较其他成熟的 P2P 借贷市场来的少；以商业范畴面（scope）来看，Upstart 目前仍仅提供贷款相关的产品及服务，其他如理财投资等商业模式亦尚未被开发 。<br>因此我们认为，若是 Upstart 能够在精准判断申贷人的信用风险并比其他业者有更低的违约率、外加产品的广度也能够持续发展，公司未来前景是值得期待[2]。</p>
<p>参考：<br>[1].美國AI貸款平台UPSTART介紹:<a href="https://www.find.org.tw/index/wind/browse/39a09ecd2ac75c0b646cb60e74fcb49b/">https://www.find.org.tw/index/wind/browse/39a09ecd2ac75c0b646cb60e74fcb49b/</a><br>[2].<a href="https://dreamloan.com.tw/articles/13-Upstart-%E4%BF%A1%E7%94%A8%E8%A9%95%E5%88%86-%E5%AD%B8%E7%94%9F%E8%B2%B8%E6%AC%BE-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7">https://dreamloan.com.tw/articles/13-Upstart-%E4%BF%A1%E7%94%A8%E8%A9%95%E5%88%86-%E5%AD%B8%E7%94%9F%E8%B2%B8%E6%AC%BE-%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7</a><br>[3].FICO模型： <a href="https://usdailyrewards.com/fico-score/">https://usdailyrewards.com/fico-score/</a></p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3+Typescript项目配置eslint和commitlint</title>
    <url>/posts/16572/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在多人合作的项目中，如果没有规范约束，可能每个人提上来的代码都要被格式化一遍，不便于查看该功能具体修改了哪些代码，并且commit信息写的五花八门，有时也不利于理解，所以规范是一个非常nice的东西，有了它，在多人合作的项目中，避免了很多不必要的麻烦，也会节省很多时间。</p>
<p>本人将如何一步一步添加规范的过程记录下来，方便和我一样有同样需求的小伙伴学习。</p>
<h3 id="配置eslint"><a href="#配置eslint" class="headerlink" title="配置eslint"></a>配置eslint</h3><ol>
<li>安装eslint依赖并初始化</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i eslint -D</span><br><span class="line"><span class="comment">// 安装好后，进行初始化</span></span><br><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure>

<p>初始化的步骤如下：</p>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1949611d7e76456b99d33ff403edc9de~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca97821402b243cab0cdcf7c5eea1479~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>这一步需要根据你项目的框架选择，vue.js:<br><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f327df04bb544a0ba9f847a6b3acbd4f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>Vue3使用了TypeScript所以需要选“Yes”:</p>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/126e84330df14658b15ebff793d73aaa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c5dc24999ae4865baf713c5e6ab6a8f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>这个选什么就会生成一个什么文件进行配置eslint规则，根据自己的需要选择，我这里选择的是JSON（我选JavaScript，生成的.eslintrc.js会报错），然后继续，一路到底就初始化好了。<br><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b95c049351f84145a5eb76d8e31eeecd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ol start="2">
<li>配置eslint规则</li>
</ol>
<p>然后根据自己的需要在.eslintrc.json配置eslint规则，可以参考<a href="https://eslint.bootcss.com/docs/rules/">eslint规则中文版</a>。</p>
<ol start="3">
<li>安装eslint插件</li>
</ol>
<p>配置完成后，若vscode没有安装eslint插件，需要安装eslint插件。</p>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18ff6f1c906f4afc94e60f81d4b4a9c2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>安装完后，需要给vscode设置一下：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置prettier"><a href="#配置prettier" class="headerlink" title="配置prettier"></a>配置prettier</h3><ol>
<li>安装依赖</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">npm i prettier eslint-<span class="built_in">config</span>-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置文件：</li>
</ol>
<p>在项目根目录下新建.prettierrc文件，然后写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="string">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据需要配置自己的prettier规则：可参考<a href="https://prettier.io/docs/en/options.html">prettier规则</a></p>
<ol start="3">
<li>vscode安装prettier插件：</li>
</ol>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6e6d317e69149f48ca138ebce710ac5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>然后在vscode设置中，把这个勾上，保存时就能自动修复：</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c1ea4ae9f6242b4be65a48ccb635eb4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>并在vscode设置中添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&quot;<span class="selector-attr">[javascript]</span>&quot;: &#123;</span><br><span class="line">    <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>然后在.eslintrc.json文件中extends中添加：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:vue/vue3-essential&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prettier&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h3 id="配置代码提交规范husky"><a href="#配置代码提交规范husky" class="headerlink" title="配置代码提交规范husky"></a>配置代码提交规范husky</h3><p>安装依赖</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -D husky</span><br></pre></td></tr></table></figure>
<p>初始化</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npx husky <span class="keyword">install</span> .husky</span><br></pre></td></tr></table></figure>
<p>添加commit-msg</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">npx husky <span class="keyword">add</span> .husky/<span class="keyword">commit</span>-msg &quot;node scripts/verifyCommit.js&quot;</span><br></pre></td></tr></table></figure>
<p>在根目录下创建scripts文件夹，然后在该文件夹下创建verifyCommit.js文件：<br>然后写入下面代码，在提交时就会执行检验commit的信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line no-undef, @typescript-eslint/no-var-requires</span></span><br><span class="line"><span class="keyword">const</span> msg = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">  .readFileSync(<span class="string">&#x27;.git/COMMIT_EDITMSG&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  .trim()</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> commitRE = <span class="regexp">/^(revert: )?(feat|fix|docs|dx|style|refactor|perf|test|workflow|build|ci|chore|types|wip|release)((.+))?: .&#123;1,50&#125;/</span></span><br><span class="line"><span class="keyword">const</span> mergeRe = <span class="regexp">/^(Merge pull request|Merge branch)/</span></span><br><span class="line"><span class="keyword">if</span> (!commitRE.test(msg)) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!mergeRe.test(msg))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;git commit信息校验不通过&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">`git commit的信息格式不对, 需要使用 title(scope): desc的格式</span></span><br><span class="line"><span class="string">      比如 fix: xxbug</span></span><br><span class="line"><span class="string">      feat(test): add new </span></span><br><span class="line"><span class="string">      具体校验逻辑看 scripts/verifyCommit.js</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">    process.exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;git commit信息校验通过&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在检验commit提交信息前需要先检验eslint规则，有个钩子pre-commit，在commit之前会执行。在工程终端中执行：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">npx husky <span class="keyword">add</span> .husky/pre-<span class="keyword">commit</span> &quot;npm run lint&quot;</span><br></pre></td></tr></table></figure>
<p>然后在package.json的scripts中，加入下面的语句：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint --fix --ext .js,vue src/&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后可以提交一下代码检测一下是否加上了eslint和commitlint.<br>可能会遇到一些问题，慢慢一个一个解决后就可以提交了。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack常用loader</title>
    <url>/posts/28173/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="常用loader"><a href="#常用loader" class="headerlink" title="常用loader"></a>常用loader</h3><p>loader: webpack本身只能打包Javascript文件，对于其他资源例如 css，图片，或者其他的语法集比如jsx，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。</p>
<p><strong>样式</strong></p>
<ul>
<li>css-loader : 解析css文件中代码</li>
<li> style-loader : 将css模块作为样式导出到DOM中</li>
<li> less-loader : 加载和转义less文件</li>
<li>sass-loader : 加载和转义sass/scss文件</li>
<li> postcss-loader: 自动添加css的兼容前缀</li>
</ul>
<p><strong>脚本转换编译</strong></p>
<ul>
<li>script-loader : 在全局上下文中执行一次javascript文件，不需要解析</li>
<li>babel-loader : 加载ES6 代码后使用Babel转义为ES5后浏览器才能解析</li>
</ul>
<p><strong>Files文件</strong></p>
<ul>
<li>url-loader : 多数用于加载图片资源,超过文件大小显示则返回data URL</li>
<li> raw-loader : 加载文件原始内容(utf-8格式)</li>
</ul>
<p><strong>加载框架</strong></p>
<ul>
<li>vue-loader : 加载和转义vue组件</li>
<li>react-hot-loader : 动态刷新和转义react组件中修改的部分</li>
</ul>
<p><strong>校验测试：</strong><br>eslint-loader等: 打包时通过 ESLint 检查 JavaScript 代码,当启用了eslint-loader之后，会影响打包速度。</p>
<p><strong>vue-template-compiler</strong><br>作用： 该模块可用于将 Vue 2.0 模板预编译为渲染函数（template =&gt; ast =&gt; render），以避免运行时编译开销和 CSP 限制。大都数场景下，与 vue-loader一起使用，只有在编写具有非常特定需求的构建工具时，才需要单独使用它，vue-template-compiler 的代码是从 vue 源码中抽离的！因此，vue 和 vue-template-compiler 的版本必须一致（同一份源码）！<br><strong>vue-loader</strong><br>用于 Vue 单文件组件的 webpack 加载器。*.vue 文件是一种自定义文件格式，使用类似于 HTML 的语法来描述 Vue 组件。每个 *.vue 文件都包含三种类型的顶级语言块：<code>&lt;template&gt;</code>，<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>，以及其他可选的自定义块, vue-loader 将解析文件，提取每个语言块，如有必要，将它们通过其他加载器进行管道传输，最后将它们组装回ES 模块，其默认导出为 Vue.js 组件选项对象。</p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack常用plugin</title>
    <url>/posts/3002/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="常用plugin"><a href="#常用plugin" class="headerlink" title="常用plugin"></a>常用plugin</h3><p>使用plugin丰富的自定义API，可以控制webpack编译流程的每个环节，实现对webpack的自定义功能扩展。<br>plugin是一个具有 apply方法的 js对象。apply方法会被 webpack的 compiler（编译器）对象调用，并且 compiler 对象可在整个 compilation（编译）生命周期内访问。</p>
<ul>
<li>define-plugin：webpack模块自带的, DefinePlugin 允许在 编译时<br>创建配置的全局常量，这在需要区分开发模式与生产模式进行不同的操作时，非常有用。<br>例如，如果想在开发构建中进行日志记录，而不在生产构建中进行，就可以定义一个全局常量去判断是否记录日志。</li>
<li>copy-webpack-plugin：将个别文件或整个目录复制到构建目录。</li>
<li>postcss-namespace: css命名</li>
<li>BannerPlugin：对所有的文件打包后添加一个版权声明</li>
<li>uglifyjs-webpack-plugin：对 JS 进行压缩混淆</li>
<li>HtmlWebpackPlugin：可以根据模板自动生成 html 代码，并将打包生成的js，和css文件，插入到该html中</li>
<li>Hot Module Replacement：在每次修改代码保存后，浏览器会自动刷新，实时预览修改后的效果</li>
<li>extract-text-webpack-plugin：将 js 文件和 css 文件分别单独打包，不混在一个文件中</li>
<li>optimize-css-assets-webpack-plugin 不同组件中重复的 css 可以快速去重</li>
<li>html-withimg-loader 页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好</li>
<li>clean-webpack-plugin：在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱，所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 打包前先清空</span></span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(<span class="string">&#x27;dist&#x27;</span>)  </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack打包原理</title>
    <url>/posts/18755/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="打包原理"><a href="#打包原理" class="headerlink" title="打包原理"></a>打包原理</h3><p>（1）读取入口文件，如项目中的main.js；</p>
<p>（2）由入口文件，解析模块所依赖的文件或包，生成ATS树；</p>
<p>（3）对模块代码进行处理：根据@babel工具转换ATS树（es6转es5、polyfill等）；</p>
<p>（4）递归所有模块</p>
<p>（5）生成浏览器可运行的代码</p>
<h3 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h3><p>1.自带优化</p>
<p>a)tree-shaking：依赖关系解析（不用的不打包），只在production环境下执行</p>
<p>b)scope-hosting：作用域提升，有结果输出的直接打包出结果，相应的变量不进行打包</p>
<p>2.插件或其他自定义配置</p>
<p>速度方面：</p>
<p>a)happypack 多线程打包，但是项目体积小的话反而更慢</p>
<p>体积方面：</p>
<p>a) webpack.IgnorePlugin，不需要的语言包不打包</p>
<p>b) external:{‘vue’:’vue’}配置不需要打包的文件</p>
<p>c) modules:{noParse:/vue/} 配置不需要解析的文件</p>
<p>d) 动态链接库：一个想要提取出来的包，单独打包，然后放到CDN上</p>
<p>e) 抽离公共代码块:  splitChunkPlugin</p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>import和require区别</title>
    <url>/posts/45356/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="遵循规范"><a href="#遵循规范" class="headerlink" title="遵循规范"></a>遵循规范</h3><p>require 是 AMD规范引入方式<br>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p>
<h3 id="调用时间"><a href="#调用时间" class="headerlink" title="调用时间"></a>调用时间</h3><p>require是运行时调用，所以require理论上可以运用在代码的任何地方（虽然这么说但是还是一般放开头）<br>import是编译时调用，所以必须放在文件开头</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量<br>import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p>
<p>require / exports ：<br>遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。<br>用法只有以下三种简单的写法：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="built_in">exports</span>.fs = fs</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = fs</span><br></pre></td></tr></table></figure>

<p>import / export：<br>遵循 ES6 规范，支持编译时静态分析，便于JS引入宏和类型检验。动态绑定。<br>写法就比较多种多样：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> fs&#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;readFile&#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;readFile <span class="keyword">as</span> read&#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fs, &#123;readFile&#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> fs</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fs</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> readFile</span><br><span class="line"><span class="keyword">export</span> &#123;readFile, read&#125;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br></pre></td></tr></table></figure>

<p>通过require引入基础数据类型时，属于复制该变量。<br>通过require引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时，会输出已经执行的模块，而未执行的模块不输出（比较复杂）。<br>CommonJS模块默认export的是一个对象，即使导出的是基础数据类型。</p>
<p>总结：</p>
<p>| 规范 | 加载方式 | 命令|特点|<br>|–|–|<br>| CommonJS/AMD |运行时加载  |require|只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化|<br>| ES6  | 编译时加载 |import| 支持编译时静态分析，便于JS引入宏和类型检验|</p>
<p> 参考：<a href="https://www.cnblogs.com/myfirstboke/p/10563597.html">https://www.cnblogs.com/myfirstboke/p/10563597.html</a></p>
]]></content>
      <categories>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>前端工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>JS循环知多少</title>
    <url>/posts/13579/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><h4 id="for循环、while、do…while"><a href="#for循环、while、do…while" class="headerlink" title="for循环、while、do…while"></a>for循环、while、do…while</h4><p>听说速度最快，效率最高，其他不过多解释。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><p>遍历的是值，能正确响应return、break、continue语句。不仅可以循环遍历数组对象。还可以迭代 Array、Map、Set、String 等对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历String</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> str) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// H e l l o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历Map</span></span><br><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&quot;a&quot;</span>, <span class="number">1</span>], [<span class="string">&quot;b&quot;</span>, <span class="number">2</span>], [<span class="string">&quot;c&quot;</span>, <span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;a&quot;, 1]</span></span><br><span class="line"><span class="comment">// [&quot;b&quot;, 2]</span></span><br><span class="line"><span class="comment">// [&quot;c&quot;, 3]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h4 id="数组内置方法："><a href="#数组内置方法：" class="headerlink" title="数组内置方法："></a>数组内置方法：</h4><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>不能中断，除非手动抛出异常<code>throw new Error()</code>, return、break、continue都不能跳出循环</p>
<h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>处理数组元素，返回新数组</p>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>过滤，返回新数组</p>
<h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>过滤，返回找到的元素或undefined，非数组</p>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>能干好多事：<a href="https://jelly.jd.com/article/6006b1035b6c6a01506c87a1">看这里</a></p>
<h4 id="erery"><a href="#erery" class="headerlink" title="erery()"></a>erery()</h4><p>检测数组元素是否全部符合指定条件</p>
<h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>检测数组是否存在一个符合指定条件的元素</p>
<h3 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h3><h4 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h4><p>遍历对象。虽然可以遍历数组，遍历的是数组的索引，并且索引会变成string类型，不做推荐，很多坑。</p>
<blockquote>
<p>for…in只会遍历自身的属性以及继承下来并且设置为可遍历的属性(继承的类的属性是默认不可遍历的, 但这个属性是更改为可以遍历的，就会造成遍历到不属于自身的属性)必要时可以结合使用hasOwnProperty方法，在循环内部判断一下。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;老张&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (person.hasOwnProperty(key)) &#123;   </span><br><span class="line">         <span class="built_in">console</span>.log(key); <span class="comment">// name </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Object-keys-和-Object-getOwnPropertyNames"><a href="#Object-keys-和-Object-getOwnPropertyNames" class="headerlink" title="Object.keys() 和 Object.getOwnPropertyNames()"></a>Object.keys() 和 Object.getOwnPropertyNames()</h4><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>原始for循环 &gt; forEach &gt; for…of &gt; map &gt; for…in</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>html知识点记录</title>
    <url>/posts/60546/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-DOCTYPE-标签："><a href="#1-DOCTYPE-标签：" class="headerlink" title="1. !DOCTYPE 标签："></a>1. !DOCTYPE 标签：</h3><p>它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令.</p>
<h3 id="2-H5新特性"><a href="#2-H5新特性" class="headerlink" title="2. H5新特性"></a>2. H5新特性</h3><p>媒体播放的 video 和 audio<br>本地存储 localStorage 和 sessionStorage<br>离线应用 manifest<br>桌面通知 Notifications<br>语意化标签 article、footer、header、nav、section<br>增强表单控件 calendar、date、time、email、url、search<br>地理位置 Geolocation<br>多任务 webworker<br>全双工通信协议 websocket<br>历史管理 history<br>跨域资源共享(CORS) Access-Control-Allow-Origin<br>页面可见性改变事件 visibilitychange<br>跨窗口通信 PostMessage<br>Form Data 对象<br>绘画 canvas</p>
<h3 id="3-行内元素及块级元素"><a href="#3-行内元素及块级元素" class="headerlink" title="3. 行内元素及块级元素"></a>3. 行内元素及块级元素</h3><ol>
<li><p>HTML4中，元素被分成两大类: inline （内联元素）与 block（块级元素）。一个行内元素只占据它对应标签的边框所包含的空间。<br>常见的行内元素有： a b span img strong sub sup button input label select textarea</p>
</li>
<li><p>块级元素占据其父元素（容器）的整个宽度，因此创建了一个“块”。<br>常见的块级元素有:  div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p </p>
</li>
<li><p>区别<br>(1)格式上，默认情况下，行内元素不会以新行开始，而块级元素会新起一行。<br>(2)内容上，默认情况下，行内元素只能包含文本和其他行内元素。而块级元素可以包含行内元素和其他块级元素。<br>(3)行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 width 无效，height 无效（可以设置 line-height），设置 margin 和 padding 的上下不会对其他元素产生影响。</p>
</li>
</ol>
<h3 id="4-自闭和标签"><a href="#4-自闭和标签" class="headerlink" title="4. 自闭和标签"></a>4. 自闭和标签</h3><p>br hr img input link meta</p>
<h3 id="5-页面导入样式时，使用-link-和-import-有什么区别？"><a href="#5-页面导入样式时，使用-link-和-import-有什么区别？" class="headerlink" title="5. 页面导入样式时，使用 link 和 @import 有什么区别？"></a>5. 页面导入样式时，使用 link 和 @import 有什么区别？</h3><p>（1）从属关系区别。 @import 是 CSS 提供的语法规则，只有导入样式表的作用；link 是 HTML 提供的标签，不仅可以加<br>     载 CSS 文件，还可以定义 RSS、rel 连接属性、引入网站图标等。</p>
<p>（2）加载顺序区别。加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载。</p>
<p>（3）兼容性区别。@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link 标签作为 HTML 元素，不存在兼容<br>     性问题。</p>
<p>（4）DOM 可控性区别。可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 @i<br>    mport 的方式插入样式。</p>
<h3 id="6-常见的浏览器内核比较"><a href="#6-常见的浏览器内核比较" class="headerlink" title="6. 常见的浏览器内核比较"></a>6. 常见的浏览器内核比较</h3><p>Trident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多<br>网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微<br>软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等<br>安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。</p>
<p>Gecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩<br>展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。</p>
<p>Presto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的<br>天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。</p>
<p>Webkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trid<br>ent，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit<br>前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。</p>
<p>Blink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 B<br>link 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是<br>KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto<br>内核，加入 Google 阵营，跟随谷歌一起研发 Blink。</p>
<h3 id="7-常见浏览器所用内核"><a href="#7-常见浏览器所用内核" class="headerlink" title="7. 常见浏览器所用内核"></a>7. 常见浏览器所用内核</h3><p> （1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；</p>
<p> （2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；</p>
<p> （3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；</p>
<p> （4） Safari 浏览器内核：Webkit 内核；</p>
<p> （5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；</p>
<p> （6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；</p>
<p> （7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；</p>
<p> （8） 百度浏览器、世界之窗内核：IE 内核；</p>
<p> （9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；</p>
<p> （10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说<br>      是基于火狐内核。</p>
<h3 id="8-浏览器渲染原理"><a href="#8-浏览器渲染原理" class="headerlink" title="8.浏览器渲染原理"></a>8.浏览器渲染原理</h3><p>（1）解析收到的文档，构建DOM树；<br>（2）解析CSS，构建CSSOM规则树；<br>（3）根据DOM和CSSOM构建渲染树，渲染树的节点渲染对象包含颜色，大小等属性的矩形；<br>（4）浏览器根据渲染器布局，确定位置，大小；<br>（5）绘制，调用渲染对象的paint方法进行绘制；</p>
<h3 id="9-CSS-如何阻塞文档解析？（浏览器解析过程）"><a href="#9-CSS-如何阻塞文档解析？（浏览器解析过程）" class="headerlink" title="9. CSS 如何阻塞文档解析？（浏览器解析过程）"></a>9. CSS 如何阻塞文档解析？（浏览器解析过程）</h3><p> 理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们，然而，存在一个问题，JavaScript 脚本执行时可<br> 能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。</p>
<p> 所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档<br> 的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。</p>
<h3 id="10-如何减少回流（重排）？（浏览器绘制过程）"><a href="#10-如何减少回流（重排）？（浏览器绘制过程）" class="headerlink" title="10.如何减少回流（重排）？（浏览器绘制过程）"></a>10.如何减少回流（重排）？（浏览器绘制过程）</h3><p> （1）使用 transform 替代 top</p>
<p> （2）不要把节点的属性值放在一个循环里当成循环里的变量</p>
<p> （3）不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p>
<p> （4）把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</p>
<p> （5）不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className。</p>
<h3 id="11-DOMContentLoaded-事件和-Load-事件的区别？"><a href="#11-DOMContentLoaded-事件和-Load-事件的区别？" class="headerlink" title="11. DOMContentLoaded 事件和 Load 事件的区别？"></a>11. DOMContentLoaded 事件和 Load 事件的区别？</h3><p>DOMContentLoaded：初始的HTML文档被完全加载和解析完成之后触发改事件，无需等待样式、子框架的加载完成；<br>Load：所有资源加载完成后触发；</p>
<h3 id="12-和，和区别？"><a href="#12-和，和区别？" class="headerlink" title="12. 和，和区别？"></a>12. <b>和<strong>，<i>和<em>区别？</em></i></strong></b></h3><p> 从页面显示效果来看，被 <b> 和 <strong> 包围的文字将会被加粗，而被 <i> 和 <em> 包围的文字将以斜体的形式呈现。</em></i></strong></b></p>
<p> 但是 <b> <i> 是自然样式标签，分别表示无意义的加粗，无意义的斜体，表现样式为 { font-weight: bolder}，仅仅表示「这<br> 里应该用粗体显示」或者「这里应该用斜体显示」，此两个标签在 HTML4.01 中并不被推荐使用。</i></b></p>
<p> 而 <em> 和 <strong> 是语义样式标签。 <em> 表示一般的强调文本，而 <strong> 表示比 <em> 语义更强的强调文本。</em></strong></em></strong></em></p>
<p> 使用阅读设备阅读网页时：<strong> 会重读，而 <b> 是展示强调内容。</b></strong></p>
<h3 id="13-前端性能优化？"><a href="#13-前端性能优化？" class="headerlink" title="13.前端性能优化？"></a>13.前端性能优化？</h3><p> 前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。</p>
<p>内容方面：</p>
<p> （1）通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况。</p>
<p> （2）通过 DNS 缓存等机制来减少 DNS 的查询次数。</p>
<p> （3）通过设置缓存策略，对常用不变的资源进行缓存。</p>
<p> （4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。</p>
<p> （5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。<br>服务器方面：</p>
<p> （1）使用 CDN 服务，来提高用户对于资源请求时的响应速度。</p>
<p> （2）服务器端启用 Gzip、Deflate 等方式对于传输的资源进行压缩，减小文件的体积。</p>
<p> （3）尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie</p>
<p>CSS 和 JavaScript 方面：</p>
<p> （1）把样式表放在页面的 head 标签中，减少页面的首次渲染的时间。</p>
<p> （2）避免使用 @import 标签。</p>
<p> （3）尽量把 js 脚本放在页面底部或者使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染。</p>
<p> （4）通过对 JavaScript 和 CSS 的文件进行压缩，来减小文件的体积。</p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>Html</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3学习笔记</title>
    <url>/posts/8636/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue3的新特性，如下：</p>
<ul>
<li>速度更快</li>
<li>体积减少</li>
<li>更易维护</li>
<li>更接近原生</li>
<li>更易使用</li>
</ul>
<h3 id="速度更快"><a href="#速度更快" class="headerlink" title="速度更快"></a>速度更快</h3><p>vue3相比vue2</p>
<ol>
<li><p>重写了虚拟Dom实现</p>
</li>
<li><p>编译模板的优化</p>
</li>
<li><p>更高效的组件初始化</p>
</li>
<li><p>undate性能提高1.3~2倍</p>
</li>
<li><p>SSR速度提高了2~3倍</p>
</li>
</ol>
<h3 id="体积更小"><a href="#体积更小" class="headerlink" title="体积更小"></a>体积更小</h3><p>通过webpack的tree-shaking功能，可以将无用模块“剪辑”，仅打包需要的<br>能够tree-shaking，有两大好处：</p>
<ol>
<li>对开发人员，能够对vue实现更多其他的功能，而不必担忧整体体积过大</li>
<li>对使用者，打包出来的包体积变小了<br>vue可以开发出更多其他的功能，而不必担忧vue打包出来的整体体积过多</li>
</ol>
<h3 id="更易维护"><a href="#更易维护" class="headerlink" title="更易维护"></a>更易维护</h3><p>compositon Api<br>可与现有的Options API一起使用<br>灵活的逻辑组合与复用<br>Vue3模块可以和其他框架搭配使用</p>
<h3 id="更好的Typescript支持"><a href="#更好的Typescript支持" class="headerlink" title="更好的Typescript支持"></a>更好的Typescript支持</h3><p>VUE3是基于typescipt编写的，可以享受到自动的类型定义提示</p>
<h3 id="更接近原生"><a href="#更接近原生" class="headerlink" title="更接近原生"></a>更接近原生</h3><p>可以自定义渲染 API</p>
<h3 id="Vue3新增特性"><a href="#Vue3新增特性" class="headerlink" title="Vue3新增特性"></a>Vue3新增特性</h3><p>Vue 3 中需要关注的一些新功能包括：</p>
<ul>
<li>framents</li>
<li>Teleport</li>
<li>composition Api</li>
<li>createRenderer</li>
</ul>
<h4 id="framents"><a href="#framents" class="headerlink" title="framents"></a>framents</h4><p>在 Vue3.x 中，组件现在支持有多个根节点；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Layout.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h4><p>Teleport 是一种能够将我们的模板移动到 DOM 中 Vue app 之外的其他位置的技术，就有点像哆啦A梦的“任意门”。在vue2中，像 modals,toast 等这样的元素，如果我们嵌套在 Vue 的某个组件内部，那么处理嵌套组件的定位、z-index 和样式就会变得很困难，通过Teleport，我们可以在组件的逻辑位置写模板代码，然后在 Vue 应用范围之外渲染它。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showToast&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>打开 toast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- to 属性就是目标位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;#teleport-target&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toast-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-msg&quot;</span>&gt;</span>我是一个 Toast 文案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="composition-Api"><a href="#composition-Api" class="headerlink" title="composition Api"></a>composition Api</h4><p>composition Api，也就是组合式api，通过这种形式，我们能够更加容易维护我们的代码，将相同功能的变量进行一个集中式的管理。</p>
<div align="center">
<img data-src="/posts/8636/1.png" width="60%">
</div>

<p><img data-src="/posts/8636/2.png" alt="composition"></p>
<div align="center">
<img data-src="/posts/8636/3.png" width="60%">
</div>
#### createRenderer
通过createRenderer，我们能够构建自定义渲染器，我们能够将 vue 的开发模型扩展到其他平台。


<h3 id="移除-API"><a href="#移除-API" class="headerlink" title="移除 API"></a>移除 API</h3><ol>
<li>keyCode 支持作为 v-on 的修饰符</li>
<li>$on，$off和$once 实例方法</li>
<li>过滤filter</li>
<li>内联模板 attribute</li>
<li>$destroy 实例方法。用户不应再手动管理单个Vue 组件的生命周期。</li>
</ol>
<h3 id="其他小改变"><a href="#其他小改变" class="headerlink" title="其他小改变"></a>其他小改变</h3><ol>
<li>destroyed 生命周期选项被重命名为 unmounted</li>
<li>beforeDestroy 生命周期选项被重命名为 beforeUnmount</li>
<li>[prop default工厂函数不再有权访问 this 是上下文</li>
<li>自定义指令 API 已更改为与组件生命周期一致</li>
<li>data 应始终声明为函数</li>
<li>来自 mixin 的 data 选项现在可简单地合并</li>
<li>attribute 强制策略已更改</li>
<li>一些过渡 class 被重命名</li>
<li>组建 watch 选项和实例方法 $watch不再支持以点分隔的字符串路径。请改用计算属性函数作为参数。</li>
<li><code>&lt;template&gt;</code> 没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot) 现在被视为普通元素，并将生成原生的 <code>&lt;template&gt;</code> 元素，而不是渲染其内部内容。</li>
<li>在Vue 2.x 中，应用根容器的 <code>outerHTML</code> 将替换为根组件模板 (如果根组件没有模板/渲染选项，则最终编译为模板)。Vue 3.x 现在使用应用容器的 <code>innerHTML</code>，这意味着容器本身不再被视为模板的一部分。</li>
</ol>
<h3 id="Vue3和Vue2开发区别"><a href="#Vue3和Vue2开发区别" class="headerlink" title="Vue3和Vue2开发区别"></a>Vue3和Vue2开发区别</h3><ol>
<li>Vue2响应式原理采用的是defineProperty，而vue3选用的是proxy。这两者前者是修改对象属性的权限标签，后者是代理整个对象。性能上proxy会更加优秀;</li>
<li>Vue3支持多个根节点;</li>
<li>Vue3优化diff算法。不再像vue2那样比对所有dom，而采用了block tree的做法。此外重新渲染的算法里也做了改进，利用了闭包来进行缓存。这使得vue3的速度比vue2快了6倍。</li>
<li>Vue2的Options API 对比Vue3的Composition API; </li>
<li>生命周期的钩子使用方式，在 Vue3 生周期钩子不是全局可调用的了，需要另外从vue中引入。和引入reactive一样，生命周期的挂载钩子叫onMounted；</li>
<li>emit使用方式：<br>emit：vue2使用<code>this.$emit(&#39;evnetName&#39;, params)</code>,vue3使用：<code>setup(_props, &#123;emit&#125;)&#123; emit(&#39;eventName&#39;, params)&#125;</code></li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【react-note】useState()使用</title>
    <url>/posts/48187/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="useState是什么？"><a href="#useState是什么？" class="headerlink" title="useState是什么？"></a>useState是什么？</h3><p>useState()是改变状态的开关，将状态添加到函数组件需要4个步骤:启用状态、初始化、读取和更新。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>场景： 有4个tab键需要切换，当切换不同tab时，要在指定区域内渲染指定的自定义组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>; <span class="comment">// 启用状态</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.less&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ComponentZero <span class="keyword">from</span> <span class="string">&#x27;./ComponentZero&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ComponentOne <span class="keyword">from</span> <span class="string">&#x27;./ComponentOne&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ComponentTwo <span class="keyword">from</span> <span class="string">&#x27;./ComponentTwo&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ComponentThree <span class="keyword">from</span> <span class="string">&#x27;./ComponentThree&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fuction <span class="function"><span class="title">ControlTabActive</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化状态为 1</span></span><br><span class="line">  <span class="keyword">const</span> [selectStatus, setSelectStatus] = useState(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> tabsList = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;Tab1&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;Tab2&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;Tab3&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;Tab4&#x27;</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;tab&quot;</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          tabsList.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span></span><br><span class="line">            &lt;div key=&#123;index&#125;</span><br><span class="line">              className=&#123;<span class="string">`<span class="subst">$&#123;styles.navitem&#125;</span> <span class="subst">$&#123;selectStatus === index ? styles.active : <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>&#125;</span><br><span class="line">              <span class="comment">// 更新状态</span></span><br><span class="line">              onClick=&#123;<span class="function">() =&gt;</span> setSelectStatus(index)&#125;&gt;</span><br><span class="line">              &#123;item.label&#125;</span><br><span class="line">            &lt;/div&gt;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &#123;<span class="comment">/*读取状态*/</span>&#125;</span><br><span class="line">      &lt;div className=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">        &#123;selectStatus === <span class="number">0</span> ? <span class="xml"><span class="tag">&lt;<span class="name">ComponentZero</span> /&gt;</span></span> : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        &#123;selectStatus === <span class="number">1</span> ? <span class="xml"><span class="tag">&lt;<span class="name">ComponentOne</span> /&gt;</span></span> : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        &#123;selectStatus === <span class="number">2</span> ? <span class="xml"><span class="tag">&lt;<span class="name">ComponentTwo</span> /&gt;</span></span> : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        &#123;selectStatus === <span class="number">3</span> ? <span class="xml"><span class="tag">&lt;<span class="name">ComponentThree</span> /&gt;</span></span> : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多种状态、状态的延迟初始化、seState() 中的坑等点击查看: <a href="https://www.jianshu.com/p/700777ea9db0">https://www.jianshu.com/p/700777ea9db0</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Array.prototype.reduce()</title>
    <url>/posts/25025/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, item, index, arr</span>)</span>&#123;&#125;,</span><br><span class="line">initialValue)</span><br></pre></td></tr></table></figure>
<ol>
<li>callback入参：</li>
</ol>
<ul>
<li>previousValue：上一次调用 callbackFn 时的返回值。在第一次调用时，若指定了初始值 initialValue，其值则为 initialValue，否则为数组索引为 0 的元素 array[0]。</li>
<li>item initialValue，其值则为数组索引为 0 的元素 array[0]，否则为 array[1]。</li>
<li>index：数组中正在处理的元素的索引。若指定了初始值 initialValue，则起始索引号为 0，否则从索引 1 起始。</li>
<li>arr：用于遍历的数组。</li>
</ul>
<ol start="2">
<li><p>initialValue 可选<br>作为第一次调用 callback 函数时参数 previousValue 的值。若指定了初始值 initialValue，则 currentValue 则将使用数组第一个元素；否则 previousValue 将使用数组第一个元素，而 currentValue 将使用数组第二个元素。</p>
</li>
<li><p>返回值<br>使用 “reducer” 回调函数遍历整个数组后的结果。</p>
</li>
<li><p>如果数组为空且未指定初始值 initialValue，则会抛出 TypeError。</p>
</li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="1-求所有数组的和"><a href="#1-求所有数组的和" class="headerlink" title="1 求所有数组的和"></a>1 求所有数组的和</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> res = arr.reduce(<span class="function">(<span class="params">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pre + item</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h4 id="2-数组扁平化"><a href="#2-数组扁平化" class="headerlink" title="2 数组扁平化"></a>2 数组扁平化</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="keyword">const</span> res = arr.reduce(<span class="function">(<span class="params">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pre.concat(item)</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>

<h4 id="3-统计数组中元素出现的次数"><a href="#3-统计数组中元素出现的次数" class="headerlink" title="3 统计数组中元素出现的次数"></a>3 统计数组中元素出现的次数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> res = arr.reduce(<span class="function">(<span class="params">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(item <span class="keyword">in</span> pre)&#123;</span><br><span class="line">    pre[item] += <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pre[item] = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="comment">// &#123; &#x27;1&#x27;: 1, &#x27;2&#x27;: 2, &#x27;3&#x27;: 3, &#x27;4&#x27;: 2 &#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-按照属性对object进行分类"><a href="#4-按照属性对object进行分类" class="headerlink" title="4 按照属性对object进行分类"></a>4 按照属性对object进行分类</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupby</span>(<span class="params">arr, property</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, item, index, arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = item[property]</span><br><span class="line">      <span class="keyword">if</span>(!pre[key])&#123;</span><br><span class="line">        pre[key] = [item]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pre[key].push(item)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(groupby(people, age))</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &#x27;20&#x27;: [ &#123; name: &#x27;Max&#x27;, age: 20 &#125;, &#123; name: &#x27;Jane&#x27;, age: 20 &#125; ],</span></span><br><span class="line"><span class="comment">//   &#x27;21&#x27;: [ &#123; name: &#x27;Alice&#x27;, age: 21 &#125; ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="5-数组去重"><a href="#5-数组去重" class="headerlink" title="5 数组去重"></a>5 数组去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> res = arr.sort().reduce(<span class="function">(<span class="params">pre, item, index, arr.sort()</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pre.length === <span class="number">0</span> || pre[pre.length-<span class="number">1</span>] !== item)&#123;</span><br><span class="line">    pre.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>
<h4 id="6-函数组合实现管道-高阶函数"><a href="#6-函数组合实现管道-高阶函数" class="headerlink" title="6 函数组合实现管道-高阶函数"></a>6 函数组合实现管道-高阶函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">x</span> =&gt;</span> x + x</span><br><span class="line"><span class="keyword">const</span> triple = <span class="function"><span class="params">x</span> =&gt;</span> <span class="number">3</span> * x</span><br><span class="line"><span class="keyword">const</span> quadruple = <span class="function"><span class="params">x</span> =&gt;</span> <span class="number">4</span> * x</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">pipe</span> (<span class="params">...fns</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fns.reduce(<span class="function">(<span class="params">pre, fn, index</span>) =&gt;</span> fn(pre)</span><br><span class="line">    &#125;, input)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sixble = pipe(double, triple)</span><br><span class="line"><span class="built_in">console</span>.log(sixble(<span class="number">6</span>))</span><br></pre></td></tr></table></figure>
<h4 id="7-reduce实现map"><a href="#7-reduce实现map" class="headerlink" title="7 reduce实现map"></a>7 reduce实现map</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.mapUseReduce)&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.mapUseReduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, initialValue</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// this指向调用mapUseReduce的数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.reduce(<span class="function">(<span class="params">pre, item, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">      pre[index] = callback.call(initialValue, item, index, arr)</span><br><span class="line">      <span class="keyword">return</span> pre</span><br><span class="line">    &#125;,[])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = arr.mapUseReduce(<span class="function">(<span class="params">item, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item+index+arr.length</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">//[ 5, 7, &lt;1 empty item&gt;, 10 ]</span></span><br></pre></td></tr></table></figure>
<h3 id="手写实现reduce"><a href="#手写实现reduce" class="headerlink" title="手写实现reduce"></a>手写实现reduce</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, initialValue</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(<span class="built_in">this</span>) || !<span class="built_in">this</span>.length || <span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>)&#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">const</span> isHasInitval = initialValue === <span class="literal">undefined</span> ? <span class="literal">false</span>: <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> pre = isHasInitval ? initialValue : arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> i = isHasInitval ? <span class="number">0</span> : <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span>(; i&lt;arr.length; i++)&#123;</span><br><span class="line">    pre = fn(pre, arr[i], i, arr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.myReduce(<span class="function">(<span class="params">pre, item</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pre + item</span><br><span class="line">&#125;, <span class="number">0</span>)) <span class="comment">// 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>require.context使用</title>
    <url>/posts/36892/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是require-context"><a href="#什么是require-context" class="headerlink" title="什么是require.context"></a>什么是require.context</h3><p>  一个webpack的api,通过执行require.context函数获取一个特定的上下文,主要用来实现自动化导入模块,在前端工程中,如果遇到从一个文件夹引入很多模块的情况,可以使用这个api,它会遍历文件夹中的指定文件,然后自动导入,使得不需要每次显式的调用import导入模块。</p>
<h3 id="require-context使用场景"><a href="#require-context使用场景" class="headerlink" title="require.context使用场景"></a>require.context使用场景</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;../page/home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> demo <span class="keyword">from</span> <span class="string">&#x27;../page/demo&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> lcdp <span class="keyword">from</span> <span class="string">&#x27;../page/lcdp&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> table <span class="keyword">from</span> <span class="string">&#x27;../page/table&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> form <span class="keyword">from</span> <span class="string">&#x27;../page/form&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> detail <span class="keyword">from</span> <span class="string">&#x27;../page/detail&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>可以使用require.context：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取全部modules目录</span></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;../pages&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/^[.](\/[^/]*)\/index\.js$/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组织modules为数组</span></span><br><span class="line"><span class="keyword">const</span> appModules = modulesFiles.keys().reduce(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> value = modulesFiles(modulePath);</span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.match(<span class="regexp">/\.\/(\S*)\//</span>)[<span class="number">1</span>];</span><br><span class="line">  modules.push(&#123;</span><br><span class="line">    moduleName,</span><br><span class="line">    <span class="built_in">module</span>: value.default,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> modules;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; appModules &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="require-context使用方法"><a href="#require-context使用方法" class="headerlink" title="require.context使用方法"></a>require.context使用方法</h3><p>require.context函数接受三个参数：</p>
<ol>
<li>directory {String} -读取文件的路径</li>
<li>useSubdirectories {Boolean} -是否遍历文件的子目录</li>
<li>regExp {RegExp} -匹配文件的正则</li>
</ol>
<p>eg: <code> require.context(&#39;./test&#39;, false, /.test.js$/);</code></p>
<p>require.context()执行后返回是一个函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="title">webpackContext</span>(<span class="params">req</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> id = webpackContextResolve(req);</span><br><span class="line">	<span class="keyword">return</span> __webpack_require__(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且这个函数有三个属性：</p>
<ol>
<li>resolve {Function} -接受一个参数request,request为test文件夹下面匹配文件的相对路径,返回这个匹配文件相对于整个工程的相对路径</li>
<li>keys {Function} -返回匹配成功模块的名字组成的数组</li>
<li>id {String} -执行环境的id,返回的是一个字符串,主要用在module.hot.accept,应该是热加载?</li>
</ol>
<p>打印这三个属性：</p>
<p><img data-src="/posts/36892/2.jpg" alt="2.jpg"></p>
<p><img data-src="/posts/36892/1.jpg" alt="1.jpg"></p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-this</title>
    <url>/posts/14526/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="绑定规则及优先级"><a href="#绑定规则及优先级" class="headerlink" title="绑定规则及优先级"></a>绑定规则及优先级</h3><ol>
<li>new 绑定：new foo()</li>
<li>显示绑定：call,apply,bind</li>
<li>隐式绑定：对象调用(obj.foo())，谁调用指向谁</li>
<li>默认绑定：默认指向window</li>
</ol>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数本身没有this，this指向由外层函数的作用域决定，父级this指向谁，箭头函数的this就指向谁。上面四项绑定规则对箭头函数都无效</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">var</span> test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> test</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    foo: foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">    foo: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.foo()() <span class="comment">// this此时指向obj1,虽然是window调用，但是默认绑定规则对箭头函数失效，箭头函数this就是父级this的指向。</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.call(obj1) <span class="comment">// this依然指向window, 显示绑定也无法改变this指向</span></span><br><span class="line">obj2.foo() <span class="comment">// this此时指向window,而不指向obj2，所以隐式调用也无效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数不允许作为构造函数</span></span><br><span class="line"><span class="keyword">var</span> foo1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> foo1() <span class="comment">// 浏览器报错：Uncaught typeerror</span></span><br></pre></td></tr></table></figure>

<h3 id="练习题1："><a href="#练习题1：" class="headerlink" title="练习题1："></a>练习题1：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    fn1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;,</span><br><span class="line">    fn2: <span class="function">() =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>.name)&#125;,</span><br><span class="line">    fn3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    fn4: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj1.fn1() <span class="comment">// 1</span></span><br><span class="line">obj1.fn1.call(obj2) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">obj1.fn2() <span class="comment">// window</span></span><br><span class="line">obj1.fn2.call(obj2) <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line">obj1.fn3()() <span class="comment">//错误 1 // 正确 window 返回的函数自调用，所以指向window</span></span><br><span class="line">obj1.fn3().call(obj2)  <span class="comment">// 2</span></span><br><span class="line">obj1.fn3.call(obj2)() <span class="comment">// 错误 2 // 正确 window 返回的函数自调用，所以指向window</span></span><br><span class="line"></span><br><span class="line">obj1.fn4()() <span class="comment">// 错误window //正确 1，返回的箭头函数中this指向父级fn4,fn4的this是obj1调用，故this指向obj1, 所以答案是1</span></span><br><span class="line">obj1.fn4().call(obj2) <span class="comment">// 错误window //正确 1,上题返回1，call不能改变箭头函数的this,故还是1</span></span><br><span class="line">obj1.fn4.call(obj2)() <span class="comment">// 2，相当于fn4在obj2中了，fn4 this指向obj2,故返回的箭头函数this也指向obj2。</span></span><br><span class="line"><span class="comment">//想更改箭头函数的this指向，只能更改父级作用域this指向</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="练习题2："><a href="#练习题2：" class="headerlink" title="练习题2："></a>练习题2：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">4</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span> (<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">5</span>) &#125;</span><br><span class="line"></span><br><span class="line">Foo.getName() <span class="comment">// 2</span></span><br><span class="line">getName() <span class="comment">// 4</span></span><br><span class="line">Foo().getName() <span class="comment">// 1</span></span><br><span class="line">getName() <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 预编译时，函数提升，执行时getNname表达式会覆盖函数getNname，所以5永远也不会打印出来了。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Foo.getName() <span class="comment">// 2, new的是对象上的属性，该属性是个方法(Foo.getNname = function()&#123; console.log(2) &#125;)，new的时候会执行里面的语句</span></span><br><span class="line"><span class="keyword">new</span> Foo().getName()  <span class="comment">// 3, 要这么看：(new Foo()).getName()，也就是new Foo()之后的实例对象的getName()，在实例对象上没有找到getName()，再去原型上找</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName()  <span class="comment">// 3，这么看：new( (new Foo()).getName() ),  最终new对象实例上的属性，实例上没有该属性，去原型上找，该属性是个方法，new时会执行里面的语句</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex学习</title>
    <url>/posts/3116/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>官方文档： <a href="https://vuex.vuejs.org/zh/">https://vuex.vuejs.org/zh/</a></p>
<h3 id="1-vuex概述"><a href="#1-vuex概述" class="headerlink" title="1 vuex概述"></a>1 vuex概述</h3><p>组件之间共享数据的方式</p>
<ul>
<li>父-&gt;子：v-bind</li>
<li>子-&gt;父：v-on</li>
<li>兄弟之间共享数据：EventBus<br>只适用于小范围共享。</li>
</ul>
<p>vuex是一个状态管理模式，适用于多个组件共享同一状态时的场景，这里状态也可以理解为数据变量。</p>
<div align="center">
<img data-src="/posts/3116/vuex-1.png" width="65%">
<!-- ![vuex](vuex-1.png) -->
</div>

<p>使用vuex好处：</p>
<ul>
<li>能够在vuex中集中管理共享的数据，易于开发和后期维护</li>
<li>能够高效地实现组件之间的数据共享，提高开发效率</li>
<li>存储在vuex中的数据都是响应式的，能够实时保持数据与页面的同步</li>
</ul>
<h3 id="2-vuex核心概念"><a href="#2-vuex核心概念" class="headerlink" title="2 vuex核心概念"></a>2 vuex核心概念</h3><h4 id="state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储"><a href="#state-提供唯一公共数据源，所有共享的数据都要放到Store中进行存储" class="headerlink" title="state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储"></a>state: 提供唯一公共数据源，所有共享的数据都要放到Store中进行存储</h4><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = new Vuex.store(&#123;</span><br><span class="line">  <span class="keyword">state</span>: &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>两种访问state数据方式：<br>1.直接在需要用的地方使用”$store.state.***”<br>2. 先引入mapState,再使用<br>import { mapState } from vuex;<br>computed: {<br>  …mapState([‘count’]),<br>},</p>
<h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>Mutation用于改变store中的数据,只能处理同步任务，不能执行异步操作</p>
<ul>
<li>只能通过Mutation变更store数据，不可以直接在组件中操作store数据</li>
<li>这种方式虽然操作繁琐一些，但是可以集中监听所有数据的变化<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">// 定义Mutation</span><br><span class="line"><span class="keyword">const</span> store  = new Vuex.store(&#123;</span><br><span class="line">  <span class="keyword">state</span>: &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    add(<span class="keyword">state</span>, step) &#123;</span><br><span class="line">      <span class="keyword">state</span>.count += step;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//触发mutation: 第一种方式</span><br><span class="line">methods: &#123;</span><br><span class="line">  handle1() &#123;</span><br><span class="line">    this.<span class="variable">$store</span>.commit(&#x27;add&#x27;, <span class="number">3</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">//触发mutation：第二种方式</span><br><span class="line"></span><br><span class="line">import &#123; mapMutations &#125; <span class="keyword">from</span> vuex;</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations([&#x27;add&#x27;]),</span><br><span class="line">  handle2() &#123;</span><br><span class="line">    this.add(<span class="number">3</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action用于处理异步任务。<br>注意：</p>
<ul>
<li>如果通过异步操作变更数据，必须通过Action，而不能使用Mutation，但是在Action中还是要通过触发Mutation的方式间接变更数据。</li>
<li>Action不能直接修改state数据，必须通过commit触发mutation才行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义Action</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.store(&#123;</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">state, step</span>)</span> &#123;</span><br><span class="line">      state.count += step;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">addAsync</span>(<span class="params">context, step</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// Action不能直接修改state数据，必须通过commit触发mutation才行</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.conmmit(<span class="string">&#x27;add&#x27;</span>, step);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发Action: 第一种方式</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">handle3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;addAsync&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发Action:第二种方式</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([<span class="string">&#x27;addAsync&#x27;</span>]),</span><br><span class="line">  <span class="function"><span class="title">handle4</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.addAsync(<span class="number">3</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>getter用于对store中的数据进行加工处理形成新的数据。</p>
<ul>
<li>getter可以对store中已有的数据加工处理之后形成新的数据，类似于vue的计算属性</li>
<li>getter中所依赖的store中的数据发生变化时，getter的数据也会发生变化</li>
</ul>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">// 定义getter</span><br><span class="line"><span class="keyword">const</span> store = new Vuex.store(&#123;</span><br><span class="line">  <span class="keyword">state</span>: &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    showNum: (<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">      return <span class="keyword">state</span>.count++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 第一种使用方式</span><br><span class="line">methods: &#123;</span><br><span class="line">  handle5() &#123;</span><br><span class="line">    return this.<span class="variable">$store</span>.getter(&#x27;showNum&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">/ 第二种使用方式</span><br><span class="line">import &#123; mapGetters &#125; <span class="keyword">from</span> &#x27;vuex&#x27;;</span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([&#x27;showNum&#x27;]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Vuex</category>
      </categories>
      <tags>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈前端安全</title>
    <url>/posts/28265/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li>老生常谈的XSS</li>
<li>警惕iframe带来的风险</li>
<li>别被点击劫持了</li>
<li>错误的内容推断</li>
<li>防火防盗防猪队友：不安全的第三方依赖包</li>
<li>用了HTTPS也可能掉坑里</li>
<li>本地存储数据泄露</li>
<li>缺失静态资源完整性校验</li>
</ol>
<h3 id="XSS-跨站脚本攻击"><a href="#XSS-跨站脚本攻击" class="headerlink" title="XSS 跨站脚本攻击"></a>XSS 跨站脚本攻击</h3><h5 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h5><p>XSS是跨站脚本攻击（Cross-Site Scripting）的简称，攻击者可以利用XSS漏洞来窃取包括用户身份信息在内的各种敏感信息、修改Web页面以欺骗用户，甚至控制受害者浏览器，或者和其他漏洞结合起来形成蠕虫攻击，等等。</p>
<h5 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h5><p>防御XSS最佳的做法就是对数据进行严格的输出编码，使得攻击者提供的数据不再被浏览器认为是脚本而被误执行。例如<code>&lt;script&gt;</code>在进行HTML编码后变成了<code>&amp;lt;script&amp;gt;</code>，而这段数据就会被浏览器认为只是一段普通的字符串，而不会被当做脚本执行了。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>tsconfig.json配置</title>
    <url>/posts/33825/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一些常见的tsconfig.json配置。TypeScript官方文档</p>
<p>英文：<a href="https://www.typescriptlang.org/docs/">https://www.typescriptlang.org/docs/</a></p>
<p>中文：<a href="https://www.tslang.cn/docs/home.html">https://www.tslang.cn/docs/home.html</a></p>
<p>先简单上一个tsconfig.json的配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;useDefineForClassFields&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;esnext&quot;</span>, <span class="string">&quot;dom&quot;</span>],</span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;src/*&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src/**/*.ts&quot;</span>, <span class="string">&quot;src/**/*.d.ts&quot;</span>, <span class="string">&quot;src/**/*.tsx&quot;</span>, <span class="string">&quot;src/**/*.vue&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>],</span><br><span class="line">  <span class="string">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class="literal">true</span>, <span class="comment">// </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 下面具体理解一下。</p>
<h3 id="compilerOptions下的配置："><a href="#compilerOptions下的配置：" class="headerlink" title="compilerOptions下的配置："></a>compilerOptions下的配置：</h3><p>定义项目的运行时期望、JavaScript 的发出方式和位置以及与现有 JavaScript 代码的集成级别。</p>
<ol>
<li><p>target</p>
<p>TypeScript文件编译后生成的javascript文件里的语法应该遵循哪个JavaScript的版本。可选项为：”ES5”， “ES6”/ “ES2015”， “ES2016”， “ES2017”或 “ESNext”</p>
</li>
<li><p>useDefineForClassFields：   <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier</a></p>
</li>
<li><p>module</p>
<p>告诉编译器对发出的.js文件中的模块使用什么语法。可选择 none、commonjs、amd、system、umd、es2015或esnext告诉编译器以哪种语法编写代码，意味着必须从哪个代码将其编译为commonjs。如果用于服务器端项目 如果使用的是Angular前端应用程序，则使用Node.js，然后可能使用CJS 可能不是ESM 较新的JS版本有时包含用于模块导入/导出的更多功能。 将export设置为”module”可以支持这些功能，而这些功能通常尚未添加到官方规范中。例如dynamic import的”ESNext”表达式。无论如何，编译器的目的是将代码编译成浏览器可理解的语法（commonjs） module影响发出代码的模块语法，而target影响其余代码。</p>
</li>
<li><p>moduleResolution</p>
<p>模块解析策略，ts默认用node的解析策略，即相对的方式导入, 可选值：node、classic<br>如果未指定，则 –module commonjs 默认为 node，否则默认为 classic（包括 –module 设置为 amd、system、umd、es2015、esnext 等）Node 模块解析是 TypeScript 社区中最常用的，推荐用于大多数项目。 如果您在 TypeScript 中遇到导入和导出的解析问题，请尝试设置 moduleResolution: “node” 以查看它是否解决了问题。</p>
</li>
<li><p>strict</p>
<p> 开启所有严格的类型检查</p>
<ul>
<li>true =&gt; 同时开启 alwaysStrict, noImplicitAny, noImplicitThis 和 strictNullChecks</li>
<li>alwaysStrict：严格模式，为每个文件添加 “use strict”</li>
<li>noImplicitAny：不允许隐式 any，如果true，函数的形参必须带类型，如果叫不出class名的js对象，那就得any。比如(d:any)=&gt;{}；如果false, 则允许隐式any,函数的样子更像js (d)=&gt;{}</li>
<li>noImplicitThis：不允许 this 为隐式 any</li>
<li>strictNullChecks：undefined 和 null 两个空类型的设计，使用上不方便，所以 通过strictNullChecks严格校验类型，让代码更安全</li>
</ul>
</li>
<li><p>jsx</p>
<p> 指定jsx代码用于的开发环境: ‘preserve’, ‘react-native’, or ‘react’</p>
<ul>
<li>preserve:生成代码中会保留JSX以供后续的转换操作使用(比如：Babel)。另外,输出文件会带有.jsx扩展名。 </li>
<li>react:会生成React.createElement,在使用前不需要再进行转换操作了,输出文件的扩展名为.js。 </li>
<li>react-native:相当于preserve,它也保留了所有的JSX,但是输出文件的扩展名是.js</li>
</ul>
</li>
<li><p>sourceMap</p>
<p> 是否生成目标文件的sourceMap文件。此文件允许调试器和其他工具在实际使用发出的JavaScript文件时显示原始的TypeScript源代码。此文件为 .js.map (or .jsx.map) 格式，位于相应的.js 输出文件相同目录</p>
</li>
<li><p>resolveJsonModule</p>
<p> 防止 ts文件中引入json文件，会报如下红色波浪线。TypeScript 2.9的resolveJsonModule功能，只要我使用ts-node执行应用程序，该功能就可以正常工作。</p>
</li>
<li><p>esModuleInterop</p>
<p> 作用是支持使用import d from ‘cjs’的方式引入commonjs包。</p>
</li>
<li><p>lib</p>
<p>编译过程中需要引入的库文件的列表，告诉 typescript 编译器可以使用哪些功能。</p>
<ul>
<li>比如说，我们这里有一个 dom 的库文件，这个文件会告诉编译器 dom api 的接口，所以当我们在 ts 代码中使用 dom 的时候，比如说执行 “document.getElementById (“root”)” 这句话的时候，编译器就会知道该如何进行检查。</li>
<li>如果我们不设置这个选项，那么编译器也有自己默认的库文件列表，一般来说是 [“dom”, “es6”,”DOM.Iterable”] 等等。</li>
</ul>
</li>
<li><p>skipLibCheck</p>
<p>解决打包报<code>vue-tsc --noEmit &amp;&amp; vite build</code>的错,忽略所有的声明文件(*.d.ts)的类型检查</p>
</li>
<li><p>path</p>
<p>用于拓宽引入非相对模块时的查找路径的。其默认值就是”./“，目的是解决项目代码层级较深相互之间引用起来会比较麻烦的问题，各种 …/,…/…/,…/…/…/ 等等。</p>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>用于指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符， 比如”./src”即表示要编译src文件夹下的所有文件以及子文件夹的文件。</p>
<h3 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h3><p>ts 排除的文件</p>
<h3 id="将suppressImplicitAnyIndexErrors"><a href="#将suppressImplicitAnyIndexErrors" class="headerlink" title="将suppressImplicitAnyIndexErrors"></a>将suppressImplicitAnyIndexErrors</h3><p>将suppressImplicitAnyIndexErrors 设为true 将禁止在对对象进行索引时报告有关隐式anys 的错误。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>加解密算法</title>
    <url>/posts/52606/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>小程序中经常会使用加解密提高安全性，此文采用对称加密，使用CryptoJS库，ECB模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; CryptoJS &#125; <span class="keyword">from</span> <span class="string">&#x27;./CryptoJS&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>params 要加密的明文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>cryptoKey 秘钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">string</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> encrypt = <span class="function">(<span class="params">params, cryptoKey</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = CryptoJS.enc.Utf8.parse(cryptoKey)</span><br><span class="line">    <span class="comment">// 设置固定 iv 和 key 保证同样输入同样输出，可取消保证生成唯一性</span></span><br><span class="line">    <span class="keyword">const</span> result = CryptoJS.TripleDES.encrypt(<span class="built_in">JSON</span>.stringify(params), key, &#123;</span><br><span class="line">        mode: CryptoJS.mode.ECB, <span class="comment">// 模式</span></span><br><span class="line">        padding: CryptoJS.pad.Pkcs7, <span class="comment">// 填充方式</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>result 要解密的密文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>cryptoKey 秘钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">Object</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrypt = <span class="function">(<span class="params">result, cryptoKey</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = CryptoJS.enc.Utf8.parse(cryptoKey)</span><br><span class="line">    <span class="keyword">const</span> decrypted = CryptoJS.TripleDES.decrypt(result, key, &#123;</span><br><span class="line">        mode: CryptoJS.mode.ECB, <span class="comment">// 模式</span></span><br><span class="line">        padding: CryptoJS.pad.Pkcs7, <span class="comment">// 填充方式</span></span><br><span class="line">    &#125;).toString(CryptoJS.enc.Utf8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(decrypted)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> decrypted</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序开发问题记录</title>
    <url>/posts/58156/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li><p>微信小程序原生textarea的placeholder-style对rgba识别bug：(0,10-15,27,0.15)识别不出来，会设置不上颜色</p>
</li>
<li><p>滚动穿透：popup中滚动会穿透到底层</p>
</li>
<li><p>微信原生picker mode=date start，end设置后，依然会展示不在设置范围内的，只是不能选择</p>
</li>
<li><p> setTimeout、setInterval实现的定时器在鸿蒙系统出现掉帧现象，目前已解决，参考<a href="https://blog.csdn.net/liuhp123/article/details/122361919?spm=1001.2014.3001.5501">高刷屏对requestAnimationFrame和setTimeout的影响</a></p>
</li>
<li><p>兼容性：ios和安卓底部黑条问题兼容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// **兼容iphone 下方小黑条</span></span><br><span class="line"> @supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) &#123;</span><br><span class="line">     padding-bottom: calc(constant(safe-area-inset-bottom)); <span class="comment">/* 兼容 iOS &lt; 11.2 */</span></span><br><span class="line">     padding-bottom: calc(env(safe-area-inset-bottom)); <span class="comment">/* 兼容 iOS &gt;= 11.2 */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在scroll-view列表中，ios底部会出现大量留白。<br>解决方案： 将scroll-view中的enhanced属性置为false。</p>
</li>
<li><p>在【返回上一页】和【toast提示】这两个动作考虑好先后的时机，不然可能会toast提示不出来。<br>最好在B页面，等待toast提示完再返回A页面，不要同时提示toast和返回上一页，会造成toast被返回上一页动作覆盖掉。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3项目中使用TypeScript一些报错问题</title>
    <url>/posts/28547/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Vue3项目中，使用TypeScript遇到的问题及解决方案。</p>
<ol>
<li>Vue3的template中使用v-for，提示错误：对象的类型为 “unknown”。ts(2571)</li>
</ol>
<p>解决方案：<br>给循环中item定义类型；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form :model=<span class="string">&quot;state.form&quot;</span> ref=<span class="string">&quot;form&quot;</span>  :label-width=<span class="string">&quot;labelWidth&quot;</span></span><br><span class="line">    @submit.native.prevent</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;el-row :gutter=<span class="string">&quot;20&quot;</span>&gt;</span><br><span class="line">      &lt;el-col v-bind=<span class="string">&quot;item.layout||layout&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in elements&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">        &lt;el-form-item</span><br><span class="line">          :prop=<span class="string">&quot;item.prop&quot;</span></span><br><span class="line">          :label=<span class="string">&quot;item.label&quot;</span></span><br><span class="line">          :label-width=<span class="string">&quot;item.labelWidth ? (item.labelWidth + &#x27;px&#x27;) : &#x27;&#x27;&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">          &lt;!-- el-input --&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-<span class="keyword">if</span>=<span class="string">&quot;item.type === &#x27;input&#x27; || item.type === undefined&quot;</span></span><br><span class="line">            v-model=<span class="string">&quot;state.form[item.prop]&quot;</span></span><br><span class="line">            :size=<span class="string">&quot;item.size ? item.size : size&quot;</span></span><br><span class="line">            :disabled=<span class="string">&quot;item.disabled&quot;</span></span><br><span class="line">            :placeholder=<span class="string">&quot;item.placeholder&quot;</span></span><br><span class="line">            :suffix-icon=<span class="string">&quot;item.suffixIcon&quot;</span></span><br><span class="line">            clearable</span><br><span class="line">          /&gt;</span><br><span class="line">         &lt;/el-form-item&gt;</span><br><span class="line">       &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, reactive, defineProps,watch, PropType &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Search, RefreshLeft &#125; <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line">type elementItem = &#123;</span><br><span class="line">  prop: string,</span><br><span class="line">  label: string,</span><br><span class="line">  type: string,</span><br><span class="line">  size?: string,</span><br><span class="line">  disabled?: boolean,</span><br><span class="line">  placeholder?: string,</span><br><span class="line">  suffixIcon?: string,</span><br><span class="line">  filterable?: boolean,</span><br><span class="line">  multiple?: boolean,</span><br><span class="line">  style?: object,</span><br><span class="line">  optionGroup?: boolean,</span><br><span class="line">  options: <span class="built_in">Array</span>&lt;any&gt;,</span><br><span class="line">  layout?:object,</span><br><span class="line">  labelWidth?: number | string,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> emits = defineEmits([<span class="string">&#x27;search&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> props = defineProps(&#123;</span><br><span class="line">  <span class="comment">// layout</span></span><br><span class="line">    layout: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        lg: &#123;</span><br><span class="line">          span: <span class="number">6</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        md: &#123;</span><br><span class="line">          span: <span class="number">8</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        sm: &#123;</span><br><span class="line">          span: <span class="number">12</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        xs: &#123;</span><br><span class="line">          span: <span class="number">24</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表单label宽度</span></span><br><span class="line">    labelWidth: &#123;</span><br><span class="line">      type: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表单元素大小 默认 meidum</span></span><br><span class="line">    size: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">      <span class="comment">// validator: sizeValidator,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表单元素</span></span><br><span class="line">    elements: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span> <span class="keyword">as</span> unknown <span class="keyword">as</span> PropType&lt;[elementItem]&gt;,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 是否展示搜索、重置按钮</span></span><br><span class="line">    hideBtns: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> form = ref()</span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  form: &#123;&#125;,</span><br><span class="line">  formatters: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在定义接口时，入参如果不定义类型会报：<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">(parameter) <span class="built_in">params</span>: <span class="keyword">any</span></span><br><span class="line"></span><br><span class="line">参数“<span class="built_in">params</span>”隐式具有“<span class="keyword">any</span>”类型。ts(<span class="number">7006</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img data-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439521acfbaa49338539156b9329e153~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>解决办法就是给入参定义接口类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> generalViewIn &#123;</span><br><span class="line">  page: <span class="built_in">number</span>,</span><br><span class="line">  pagesize: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取概览列表数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getGeneralView</span>(<span class="params">params: generalViewIn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> http.get(Api.getGeneralView, params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样params入参就不会标红了。</p>
<ol start="3">
<li>对象使用变量索引时，会标红，报：</li>
</ol>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line">元素隐式具有 <span class="string">&quot;any&quot;</span> 类型，因为类型为 <span class="string">&quot;string&quot;</span> 的表达式不能用于索引类型 <span class="string">&quot;&#123;&#125;&quot;</span>。\在类型 <span class="string">&quot;&#123;&#125;&quot;</span> 上找不到具有类型为 <span class="string">&quot;string&quot;</span> 的参数的索引签名。<span class="function"><span class="title">ts</span>(<span class="number">7053</span>)</span></span><br></pre></td></tr></table></figure>

<p>解决办法：<br>最简单是方案是修改tsconfig.json配置：在”compilerOptions”下加入下面这句，就不报错了。还有其他方案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;suppressImplicitAnyIndexErrors&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>给reactive的变量赋值，会报：<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">不能将类型“&#123; path: any; meta: any; &#125;<span class="selector-attr">[]</span>”分配给类型“never<span class="selector-attr">[]</span>”。\</span><br><span class="line">不能将类型“&#123; path: any; meta: any; &#125;”分配给类型“never”。ts(<span class="number">2322</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/845f5d9a319247dbb9d25a55c44d84a8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>解决办法：<br>在声明变量出就定义类型：</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93316f5ee5ac4b3f900cf41b2bea040d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ol start="5">
<li>在遍历中，item会报错：</li>
</ol>
<p><img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/524c3332f3534028944f96225c5b2aac~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>解决办法： 给item定义类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> subChildren = children.filter(<span class="function">(<span class="params">item:any</span>) =&gt;</span> !item.meta?.hidden);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>从路由中获取参数，然后传递给接口<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量声明</span></span><br><span class="line"><span class="keyword">const</span> &#123; regionName=<span class="string">&quot;&quot;</span>, regionId=<span class="string">&#x27;&#x27;</span>,  status=<span class="string">&quot;&quot;</span> &#125; = route.query</span><br><span class="line"><span class="comment">//接口声明</span></span><br><span class="line">interface getHostListIn &#123;</span><br><span class="line">  regionId: string,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口使用</span></span><br><span class="line"><span class="keyword">const</span> getOptionList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  getHostList(&#123;regionId&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
传给接口的入参使用从路由中获取的参数时会报错：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">不能将类型“string | LocationQueryValue[]”分配给类型“string”。\</span><br><span class="line">不能将类型“LocationQueryValue[]”分配给类型“string”。ts(<span class="number">2322</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3d814427b6f405897321486b2d351cb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>解决办法：<br>修改接口入参声明类型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量声明</span></span><br><span class="line"><span class="keyword">const</span> regionName = route.query.regionName</span><br><span class="line"><span class="keyword">const</span> regionId = route.query.regionId</span><br><span class="line"><span class="keyword">const</span> status = route.query.status</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口声明</span></span><br><span class="line">interface getHostListIn &#123;</span><br><span class="line">  regionId: string | LocationQueryValue[],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端（一）-父子应用</title>
    <url>/posts/45795/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>背景：一种类似于微服务的架构，它将微服务的理念应用于浏览器端，适用于巨石应用拆分为多个小型系统、多个单体应用整合等应用场景，并且各个前端应用可以独立运行、独立开发、独立部署。</p>
<h2 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h2><p>主应用为基座，接入所有子应用</p>
<div align="center">
<img data-src="/posts/45795/micro-1.jpg" width="65%">
</div>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>注册所有子应用</p>
<h2 id="子应用"><a href="#子应用" class="headerlink" title="子应用"></a>子应用</h2><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>需要在入口暴露生命周期接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">props = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; container, routerBase &#125; = props;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">  router.base =  <span class="built_in">window</span>.__POWERED_BY_QIANKUN__ ? routerBase : process.env.BASE_URL;</span><br><span class="line">  router.mode = <span class="string">&#x27;history&#x27;</span>;</span><br><span class="line">  instance = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">  &#125;).$mount(container ? container.querySelector(<span class="string">&#x27;#app&#x27;</span>) : <span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;[vue] vue app bootstraped&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;[vue] props from main framework&#x27;</span>, props);</span><br><span class="line">  render(props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  instance.$destroy();</span><br><span class="line">  instance.$el.innerHTML = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>micro</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端模块化(一)—前言</title>
    <url>/posts/8881/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><p>将一个复杂的程序依据一定的规则规范封装成几个块文件，并进行组合在一起。<br>内部数据与实现是私有的，只是向外暴露一些接口方法与外部其他模块通信。</p>
<h3 id="模块化的进程"><a href="#模块化的进程" class="headerlink" title="模块化的进程"></a>模块化的进程</h3><p>1.全局function模式-把不同的功能封装成不同的全局函数</p>
<p>2.命名空间模式-基于简单的对象封装,<br>劣势：数据不安全，外部可以直接修改模块内部的数据;所有成员都暴露在外；</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">  data: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  fu<span class="symbol">nc1</span>: <span class="comment">()</span> =&gt; &#123;&#125;,</span><br><span class="line">  fu<span class="symbol">nc2</span>: <span class="comment">()</span> =&gt; <span class="comment">()</span> &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.data = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">obj.fu<span class="symbol">nc1</span><span class="comment">()</span>;</span><br></pre></td></tr></table></figure>
<p>3.匿名函数自执行方式（闭包）<br>向window对象上添加全局属性，也有的把这种方法叫做添加命名空间，目的是向外暴露接口，其实这种方式很好，方法是私有的，只能通过外部接口来小左，但是多个模块有依赖关系的时候就不好办了。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">type</span>=&quot;text/javascript&gt;</span><br><span class="line">(function(<span class="keyword">win</span>) &#123;</span><br><span class="line">  function func1() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  function func2() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向外暴露方法，es6的写法</span></span><br><span class="line">  <span class="keyword">win</span>.myMethods = &#123;func1, func2&#125;;</span><br><span class="line">&#125;)(<span class="keyword">window</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>4.匿名函数的模式增加：向入口传入依赖的模块</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">type</span>=&quot;text/javascript&gt;</span><br><span class="line">(function(a, b) &#123;</span><br><span class="line">  b(a);</span><br><span class="line">&#125;)(<span class="keyword">window</span>, function(<span class="keyword">window</span>)&#123;</span><br><span class="line">  <span class="keyword">window</span>.jQuery = jQuery;</span><br><span class="line">  function jQuery()&#123;&#125;;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  m.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> m;</span><br><span class="line">&#125;)(<span class="built_in">window</span>.module1 || &#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>劣势：这种方式引入的js文件、模块必须要有一定的先后顺序，否则会报错（各种undefined）</p>
<h3 id="模块化的好处"><a href="#模块化的好处" class="headerlink" title="模块化的好处"></a>模块化的好处</h3><ol>
<li>避免命名冲突（减少命名空间污染）</li>
<li>更好的分离，按需加载</li>
<li>更高的复用性，更高的可维护性</li>
</ol>
<h3 id="引入多个script后出现的问题"><a href="#引入多个script后出现的问题" class="headerlink" title="引入多个script后出现的问题"></a>引入多个script后出现的问题</h3><p>引入多个script之后，会不可避免的出现引用交叉。</p>
<ul>
<li>请求过多</li>
<li>依赖会乱掉，就所谓的依赖模糊</li>
<li>难以维护，因为各种调用，依赖都交织在一起了。</li>
</ul>
<p>这就导致真正意义上的模块化的出现，也就是后来的Common.js, AMD, ES6, CMD.</p>
]]></content>
      <categories>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化（二）</title>
    <url>/posts/21747/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>每个文件就是一个模块，内部定义的变量是属于这个模块的，不会对外暴露，也就是不会污染全局变量。<br>node和webpack都对commonjs原生支持。</p>
<p>核心思想是通过require方法同步加载所依赖的其他模块，然后通过exports或者module.exports来导出需要暴露的接口.</p>
<p>浏览器不兼容CommonJs,原因是浏览器缺少module,export,require,global四个环境变量，如需使用要用工具转换。</p>
<p>commonJs采用同步加载不同模块文件，适用于服务端。因为模块文件都存放在服务器的各个硬盘上没读取加载时间快，适合服务端，不适用浏览器。</p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">var <span class="function"><span class="keyword">module</span> =</span> require(&#x27;<span class="keyword">module</span>.js);</span><br><span class="line"><span class="keyword">module</span>.aa(&#x27;hello&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">module</span>.exports = &#123;</span><br><span class="line">  aa: <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">str</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p>异步加载模块，允许指定回调函数，等模块异步加载完成后即可调用回调函数。</p>
<p>AMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> main.js</span><br><span class="line">require([<span class="string">&#x27;jQuire&#x27;</span>, <span class="string">&#x27;math&#x27;</span>], <span class="keyword">function</span>($, math) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> math,js</span><br><span class="line">define(<span class="keyword">function</span>() &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>CMD异步加载，跟AMD的主要区别在于，AMD依赖前置，提起加载依赖前置，CMD就近加载，按需加载。</p>
<p>产物seaJS，跟require JS使用有些类似。</p>
<p>CMD核心思想就是通过define定义一个模块，然后使用require来加载一个模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./sea.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// index.html</span></span></span><br><span class="line"><span class="javascript">seajs.use(<span class="string">&#x27;main.js&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// main.js</span></span></span><br><span class="line"><span class="javascript">define(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>,<span class="built_in">module</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> module1 = <span class="built_in">require</span>(<span class="string">&#x27;module1.js&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(module1);</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// module1.js</span></span></span><br><span class="line"><span class="javascript">define (<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>, <span class="built_in">module</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="javascript">  <span class="built_in">exports</span>.module1 = arr;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>自带模块化，可以用import关键字引入模块，通过export关键字导出模块，功能较前几方案更强大，但由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的require。</p>
<p>使用import关键字引入模块，通过export关键字导出模块</p>
<p>总结：<br>CommonJS同步加载，适用于服务端、AMD异步加载完所有依赖、CMD异步按需加载、ES6自带模块化，使用最广泛。</p>
]]></content>
      <categories>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>0-1搭建业务组件库一</title>
    <url>/posts/24916/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在完成了一个项目，去做另一个项目时，会用到重复的组件，我们可以去打开上一个工程，把组件代码拷过来，再重新调整数据，这样会很麻烦，随着项目的越来越多，也不好定位哪个项目中使用了可复用的组件，所以业务组件库就发挥了它的优势，直接安装好后，按需引入，不用再手搬代码。本篇文章会讲述如何从 0-1 搭建自己的组件库。</p>
<p>技术栈：</p>
<ul>
<li>Vue3</li>
<li>TypeScript</li>
<li>pnpm</li>
</ul>
<h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h3><p>在 cmd 终端安装 pnpm</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install pnpm -g</span><br></pre></td></tr></table></figure>

<p>创建工程目录：vue3-components。</p>
<p>用 vscode 打开工程目录，在 vscode 终端执行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure>

<p>根目录新建.npmrc 文件，写入下面的语句，作用是与项目不直接相关的不会安装在 node modules 下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">shamefully-hoist = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>在根目录安装依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pnpm install vue@next typescript -D</span><br></pre></td></tr></table></figure>

<p>配置 tsconfig.json:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;declaration&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;removeComments&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">    <span class="string">&quot;noLib&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es2018&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;esnext&quot;</span>, <span class="string">&quot;DOM&quot;</span>],</span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dist/**&quot;</span>,</span><br><span class="line">    <span class="string">&quot;**/__tests__&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根目录新建 pnpm-workspace.yaml 文件，写入：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">packages:</span><br><span class="line">  - &quot;packages/**&quot; # 存放编写的组件</span><br><span class="line">  - play # 使用组件的地方</span><br></pre></td></tr></table></figure>

<h3 id="2-项目创建"><a href="#2-项目创建" class="headerlink" title="2 项目创建"></a>2 项目创建</h3><p>在根目录新建 paly 目录，进入 play，执行:<code>pnpm init</code>，<br>修改 package.json 文件配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@vue3-components/play&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;liuhp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 play 目录下安装依赖：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">pnpm install vite <span class="meta">@vitejs</span>/plugin-vue -D</span><br></pre></td></tr></table></figure>

<p>在 play 目录下新建 vite.config.ts, 写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>新建 index.html,写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;/main.ts&quot;</span> type=<span class="string">&quot;module&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>新建 app.vue, 写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;测试&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>新建 main.js, 写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./app.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>main.ts 此时会提示：</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/586e502f911440868c8781bebd87737f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>所以我们在 vue3-components 根目录下新建<code>typings</code>文件夹，在 typings 下新建<code>vue-shim.d.ts</code>文件，写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">&quot;*.vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> type &#123; DefineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">  <span class="keyword">const</span> component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, any&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，main.ts 就不会报错了。<br>修改 package.json 里 script 的命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>然后就可以在 play 目录下运行<code>npm run dev</code>, 为了能够在 vue3-components 根目录下直接运行 play 项目，需要修改 vue3-components 根目录下的 package.json 里 script 的命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;pnpm -C play dev&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>就可以在 vue3-components 根目录下直接运行<code>npm run dev</code>了。</p>
<h3 id="3-封装组件"><a href="#3-封装组件" class="headerlink" title="3 封装组件"></a>3 封装组件</h3><h4 id="3-1-创建三个文件夹"><a href="#3-1-创建三个文件夹" class="headerlink" title="3.1 创建三个文件夹"></a>3.1 创建三个文件夹</h4><p>packages 下建立 3 个文件夹：</p>
<ul>
<li>components：存放封装的组件；</li>
<li>utils: 存放公共方法；</li>
<li>theme-chalk: 存放公共样式；</li>
</ul>
<p>这三个文件夹下都要执行<code>pnpm init</code>，为 package.json 中的 name 起好名字（后面安装需要用这个名字），都是独立包，可以独立发布。</p>
<p>然后在 vue3-components 根目录下安装这三个包，例如：<code>pnpm install @vue3-components/components -w</code> -w 是安装在根目录下，安装好后根目录下的 package.json 如下：</p>
<p><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/020e465feb504bafb99a2eb4bf271d50~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h4 id="3-2-封装组件："><a href="#3-2-封装组件：" class="headerlink" title="3.2 封装组件："></a>3.2 封装组件：</h4><p>在 packages\components\下新建组件文件夹，这里以 v-form 为例：</p>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b94efbb36d7d45e5abd70f1fffe4c5aa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>在<code>v-form.vue</code>和<code>v-form.ts</code>中封装好组件，也可以先随便写点，方便测试，<code>README.md</code>中，写好参数说明。index.ts 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vform <span class="keyword">from</span> <span class="string">&quot;./src/v-form.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; withInstall &#125; <span class="keyword">from</span> <span class="string">&quot;@vue3-components/utils/with-install&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VForm = withInstall(vform)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VForm</span><br></pre></td></tr></table></figure>

<p>packages\utils\with-install.ts:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> type &#123; App, Plugin &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span> <span class="comment">// 只导入类型，不是值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type SFCWithInstall&lt;T&gt; = T &amp; Plugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withInstall = &lt;T&gt;<span class="function">(<span class="params">comp: T</span>) =&gt;</span> &#123;</span><br><span class="line">  (comp <span class="keyword">as</span> SFCWithInstall&lt;T&gt;).install = <span class="function"><span class="keyword">function</span> (<span class="params">app: App</span>) </span>&#123;</span><br><span class="line">    app.component((comp <span class="keyword">as</span> any).name, comp)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> comp <span class="keyword">as</span> SFCWithInstall&lt;T&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="验证封装组件是否生效"><a href="#验证封装组件是否生效" class="headerlink" title="验证封装组件是否生效"></a>验证封装组件是否生效</h3><p>play\main.ts 全局引入组件:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./app.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/dist/index.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VForm <span class="keyword">from</span> <span class="string">&quot;@vue3-components/components/v-form&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line">app.use(ElementPlus)</span><br><span class="line">app.use(VForm)</span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>play\app.vue 中使用组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;测试&lt;/div&gt;</span><br><span class="line">  &lt;v-form :elements=<span class="string">&quot;forms&quot;</span> @search=<span class="string">&quot;search&quot;</span>&gt;&lt;/v-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="keyword">const</span> forms = [</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&quot;角色标识&quot;</span>,</span><br><span class="line">    prop: <span class="string">&quot;roleCode&quot;</span>,</span><br><span class="line">    placeholder: <span class="string">&quot;角色标识&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&quot;角色名称&quot;</span>,</span><br><span class="line">    prop: <span class="string">&quot;roleName&quot;</span>,</span><br><span class="line">    placeholder: <span class="string">&quot;分组名称&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&quot;产品&quot;</span>,</span><br><span class="line">    prop: <span class="string">&quot;productCode&quot;</span>,</span><br><span class="line">    placeholder: <span class="string">&quot;产品&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;select&quot;</span>,</span><br><span class="line">    optionGroup: <span class="literal">true</span>,</span><br><span class="line">    options: [],</span><br><span class="line">    style: <span class="string">&quot;width:100%;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">&quot;创建时间&quot;</span>,</span><br><span class="line">    prop: <span class="string">&quot;create_at_start,create_at_end&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;datetimerange&quot;</span>,</span><br><span class="line">    defaultValue: [],</span><br><span class="line">    startPlaceholder: <span class="string">&quot;选择开始时间&quot;</span>,</span><br><span class="line">    endPlaceholder: <span class="string">&quot;选择结束时间&quot;</span>,</span><br><span class="line">    valueFormat: <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,</span><br><span class="line">    layout: &#123;</span><br><span class="line">      lg: &#123;</span><br><span class="line">        span: <span class="number">8</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      md: &#123;</span><br><span class="line">        span: <span class="number">12</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      sm: &#123;</span><br><span class="line">        span: <span class="number">24</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      xs: &#123;</span><br><span class="line">        span: <span class="number">24</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> search = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至此，组件封装完成，接下来需要解决的问题是如何抽离公共样式，随着组件库中组件越来越多，一些重复的样式需要抽离出来，抽离完公共样式后，再解决打包和发布问题，发布后才能在其他项目中安装使用。</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>组件通信</title>
    <url>/posts/42732/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><ul>
<li>通过 props 传递</li>
<li>通过 $emit 触发自定义事件</li>
<li>使用 ref</li>
</ul>
<h3 id="祖先子孙组件通信"><a href="#祖先子孙组件通信" class="headerlink" title="祖先子孙组件通信"></a>祖先子孙组件通信</h3><ul>
<li>provide 与 inject</li>
<li>$attrs和 $listeners</li>
</ul>
<h3 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h3><ul>
<li>EventBus</li>
<li>$parent 或$root</li>
</ul>
<h3 id="复杂关系的组件"><a href="#复杂关系的组件" class="headerlink" title="复杂关系的组件"></a>复杂关系的组件</h3><p>Vuex</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JS节流和防抖</title>
    <url>/posts/42062/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>
<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttled1</span>(<span class="params">fn, delay = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> oldtime = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> newtime = <span class="built_in">Date</span>.now()</span><br><span class="line">        <span class="keyword">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class="line">            fn.apply(<span class="literal">null</span>, args)</span><br><span class="line">            oldtime = <span class="built_in">Date</span>.now()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttled2</span>(<span class="params">fn, delay = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳与定时器结合更加准确</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttled3</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> curentTime = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">let</span> remainTime = delay - (curentTime - startTime)</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">      startTime = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125; <span class="keyword">else</span> (</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(fn, remainTime)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单版本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout); <span class="comment">// timeout 不为null</span></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">let</span> callNow = !timeout; <span class="comment">// 第一次会立即执行，以后只有事件执行后才会再次触发</span></span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol>
<li>防抖在连续的事件，只需触发一次回调的场景有：</li>
</ol>
<ul>
<li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li>
<li>手机号、邮箱验证输入检测</li>
<li>窗口大小resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li>
</ul>
<ol start="2">
<li>节流在间隔一段时间执行一次回调的场景有：</li>
</ol>
<ul>
<li>滚动加载，加载更多或滚到底部监听</li>
<li>搜索框，搜索联想功能</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>高刷屏对requestAnimationFrame和setTimeout的影响</title>
    <url>/posts/59071/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>背景：<br>setInterval和setTimeout实现的定时器在鸿蒙系统上会出现掉帧卡顿现象，比如倒计时中，10，9间隔长，8，7间隔又很短。</p>
<p>解决办法：用requestAnimationFrame实现定时功能。</p>
<h3 id="高刷屏对setTimeout的影响"><a href="#高刷屏对setTimeout的影响" class="headerlink" title="高刷屏对setTimeout的影响"></a>高刷屏对setTimeout的影响</h3><p>在低端机中，用setTimeout实现的动画可能会出现丢帧卡顿现象主要原因有以下两点：</p>
<ol>
<li>setTimeout回调执行时间不确定。因为setTimeout的回调会放在异步队列中，当主线程的任务执行完成后，才会检查异步队列中是否有要执行的任务，所以setTimeout执行的时间会比设定时间稍晚一些。</li>
<li>刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的屏幕刷新频率可能会不同，而 setTimeout只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。<br>以上两种情况会是setTimeout的执行步调和屏幕刷新时间步调不一致，从而引起丢帧卡顿现象。</li>
</ol>
<p>而在高刷屏下，因为屏幕刷新率更高，setTimeout执行的结果会很快被渲染在屏幕上，感觉会更丝滑，所以丢帧卡顿现象会削弱。</p>
<h3 id="高刷屏对requestAnimationFrame的影响"><a href="#高刷屏对requestAnimationFrame的影响" class="headerlink" title="高刷屏对requestAnimationFrame的影响"></a>高刷屏对requestAnimationFrame的影响</h3><p>requestAnimationFrame在屏幕刷新的时候执行，所以和屏幕刷新步调一致，用它实现的动画就会更丝滑，不会卡顿。</p>
<p>但感觉会耗性能一些，因为一分钟屏幕刷新多少次函数就执行多少次。</p>
<p>高刷屏下： </p>
<ol>
<li>PC端：经查阅使用了165hz的显示器，但通过requestAnimationFrame 计算出来的FPS依然只有30-60fps，这只是偶现，刷新率和 requestAnimationFrame 存在不同步问题；谷歌浏览器是支持高刷屏的。</li>
<li>移动端：微信固定写死60Hz,其他app也不支持高刷，只有少数游戏app支持；</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>继承的6种方式</title>
    <url>/posts/22769/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="原型、构造函数、实例对象的关系"><a href="#原型、构造函数、实例对象的关系" class="headerlink" title="原型、构造函数、实例对象的关系"></a>原型、构造函数、实例对象的关系</h3><p>构造函数能够生成实例对象，实例对象拥有构造函数里的属性和方法，并继承构造函数原型上的属性及方法。</p>
<div align="center">
  <img data-src="/posts/22769/1.jpeg" width="65%">
</div>

<h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><p>子类原型等于父类构造函数的实例</p>
<p>特点：<br>子类实例能够继成父类及父类原型中属性和方法</p>
<p>问题：</p>
<ol>
<li>如果父类构造函数中有引用类型的属性，会导致通过子类创建的所有实例都共享该属性，其中一个实例修改了这个引用值，其他实例的这个属性都会同步变化，造成数据污染。</li>
<li>子类构造函数无法向父类构造函数传值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;super&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明父类原型属性</span></span><br><span class="line">Super.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类原型指向父类实例</span></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sub1 = <span class="keyword">new</span> Sub()</span><br><span class="line"><span class="keyword">const</span> sub2 = <span class="keyword">new</span> Sub()</span><br><span class="line"><span class="comment">// 修改sub1的引用值会影响sub2的引用值</span></span><br><span class="line">sub.arr.push(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sub1.name, sub1.arr) <span class="comment">// super [ 1, 2, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(sub2.name, sub2.arr) <span class="comment">// super [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>
<h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><p>使用call或者apply在子类构造函数中调用父类构造函数</p>
<p>特点：子类构造函数能够向父类构造函数中传值，继承了父类构造函数的属性和方法，但无法继承父类原型上的属性和方法</p>
<p>问题：</p>
<ol>
<li>只能在子类构造函数中定义方法，因此不能重用函数</li>
<li>子类不能访问父类原型上定义的方法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明父类原型属性</span></span><br><span class="line">Super.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Super.call(<span class="built_in">this</span>, name)</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sub1 = <span class="keyword">new</span> Sub(<span class="string">&#x27;lili&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sub1.name, sub1.age)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="组合继承（伪经典继承）"><a href="#组合继承（伪经典继承）" class="headerlink" title="组合继承（伪经典继承）"></a>组合继承（伪经典继承）</h4><p>特点：解决了上述两种的缺陷；</p>
<p>问题：父类构造函数会执行两次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明父类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明父类原型属性</span></span><br><span class="line">Super.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Super.call(<span class="built_in">this</span>, name)</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Super()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sub1 = <span class="keyword">new</span> Sub(<span class="string">&#x27;sub1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sub2 = <span class="keyword">new</span> Sub(<span class="string">&#x27;sub2&#x27;</span>)</span><br><span class="line"><span class="comment">// 修改sub1实例的引用值，不会影响到sub2</span></span><br><span class="line">sub1.arr.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sub1.name, sub1.arr) <span class="comment">// sub1 [ 1, 2, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(sub2.name, sub2.arr) <span class="comment">// sub2 [ 1, 2, 3 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>本质是进行了浅拷贝，与原型链相似，引用值会被共享</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心函数：创建临时的构造函数，传入的对象作为临时构造函数的原型，然后返回这个临时构造函数的实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectCreate</span>(<span class="params">fatherPrototype</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  Fun.prototype = prototype <span class="comment">// 浅拷贝</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">  arr: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1  = objectCreate(person)</span><br><span class="line">son1.name = <span class="string">&#x27;son1&#x27;</span></span><br><span class="line">son1.arr.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son2  = objectCreate(person)</span><br><span class="line">son2.name = <span class="string">&#x27;son2&#x27;</span></span><br><span class="line">son2.arr.push(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(son1.name, son1.arr) <span class="comment">//son1 [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(son2.name, son2.arr) <span class="comment">//son2 [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>
<h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><p>背后思路类似于寄生构造函数和工厂模式：先创造一个实现继承的构造函数，然后再增强对象（给继承后的对象添加方法），再将这个对象返回。</p>
<p>特点：类似借用构造函数，函数不能重用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectCreate</span>(<span class="params">fatherPrototype</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  Fun.prototype = fatherPrototype <span class="comment">// 浅拷贝</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">fatherPrototype</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cloneObj = objectCreate(fatherPrototype)  <span class="comment">// 通过调用函数创建新对象</span></span><br><span class="line">  cloneObj.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 增强对象，类似于给对象扩展功能，添加方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">  arr: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1  = createAnother(person)</span><br><span class="line">son1.sayHi() <span class="comment">// hi</span></span><br></pre></td></tr></table></figure>
<h4 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h4><p>取原型的副本（寄生式继承）赋值给子类原型。算引用类型继承的最佳模式，但有点复杂。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectCreate</span>(<span class="params">fatherPrototype</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  Fun.prototype = fatherPrototype <span class="comment">// 浅拷贝</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prototype = objectCreate(superType) <span class="comment">// 创建对象</span></span><br><span class="line">  prototype.consructor = subType <span class="comment">// 增强对象</span></span><br><span class="line">  subType.prototype = prototype</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明父类原型属性</span></span><br><span class="line">Super.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Super.call(<span class="built_in">this</span>, name)</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Sub, Super)</span><br><span class="line"></span><br><span class="line">Sub.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son1  = <span class="keyword">new</span> Sub()</span><br><span class="line">son1.name = <span class="string">&#x27;son1&#x27;</span></span><br><span class="line">son1.arr.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son2  = <span class="keyword">new</span> Sub()</span><br><span class="line">son2.name = <span class="string">&#x27;son2&#x27;</span></span><br><span class="line">son2.arr.push(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(son1.name, son1.arr) <span class="comment">//Super [ 1, 2, 3, 4 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(son2.name, son2.arr) <span class="comment">//Super [ 1, 2, 3, 5 ]</span></span><br></pre></td></tr></table></figure>

<p>得多看几遍，多理解几遍~</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记</title>
    <url>/posts/51847/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="高效能人士的七个习惯"><a href="#高效能人士的七个习惯" class="headerlink" title="高效能人士的七个习惯"></a>高效能人士的七个习惯</h3><h4 id="七个习惯"><a href="#七个习惯" class="headerlink" title="七个习惯"></a>七个习惯</h4><ol>
<li>积极主动</li>
<li>以终为始</li>
<li>要事第一</li>
<li>双赢思维</li>
<li>知彼解己</li>
<li>统合综效</li>
<li>不断更新</li>
</ol>
<h4 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h4><ol>
<li>潜在的、持久的、不断上升的成功才是值得称颂的。</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>羽毛球学习记录</title>
    <url>/posts/44862/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录学习过程的心得体会，可能对可能错，但没关系，在学习中纠正，实践中成长。</p>
<h1 id="发球"><a href="#发球" class="headerlink" title="发球"></a>发球</h1><h2 id="在偶数区发球："><a href="#在偶数区发球：" class="headerlink" title="在偶数区发球："></a>在偶数区发球：</h2><ol>
<li>1号内角  封正手  </li>
<li>3号外角  封反手  启动 左腿后侧一步</li>
<li>2号中间区 对方正手握拍封正手 对方反手握拍封反手<br>注：对方站的靠后 发重球 封网方向同上</li>
<li>4号内后场 大概率对方杀对角</li>
<li>5号外后场  大概率杀直线 <h2 id="在奇数区发球："><a href="#在奇数区发球：" class="headerlink" title="在奇数区发球："></a>在奇数区发球：</h2></li>
<li>1号内角 左腿后侧一步奇数区头顶球封网</li>
<li>3号外角 封正手 右脚后侧一步</li>
<li>2号 对方抢网 我需要马上反手握拍 前进一步 封中间或奇数区</li>
<li>4号内后场 封奇数区</li>
<li>5号外后场 封偶数区</li>
<li>站的靠后就发重球 轻重结合  </li>
</ol>
<h1 id="接发"><a href="#接发" class="headerlink" title="接发"></a>接发</h1><p>重心压低</p>
<h2 id="偶数区接球："><a href="#偶数区接球：" class="headerlink" title="偶数区接球："></a>偶数区接球：</h2><p>迈右腿</p>
<ol>
<li>对方男发内角：<br>抹小对角网前或加力推对方反手底线；抓女直线回球，抓男斜线回球；若对方男发球后，没有后退，直接推对方反手底线；</li>
<li>对方女发内角：<br>搓对方反手网前，同时为了避免对方抓住球路，结合假动作推其斜线腰部；<br>这时男子因为不发球，有充分的准备，所以尽可能打网前球多变化为佳。</li>
<li>对方男发外角：<br>主动时快推直线腰部后场或者搓放网前，一定要确保质量；如果已经抢不到高点，不如高挑直线后场尽可能到底线，正是对方的反手位，然后跑相应斜线封堵，或者直线后退至前接发球线后一步左右,降低重心举拍准备防守接杀其边线球。等再有点能力时可以加上网前勾对角，关键是节奏和质量的全盘考虑。<h2 id="奇数区接发："><a href="#奇数区接发：" class="headerlink" title="奇数区接发："></a>奇数区接发：</h2></li>
<li>对方男发内角：<br>搓直线网前、勾对角网前，或者加力推对方底线两角</li>
<li>对方女发内角：<br>反手区直线网前的高质量搓球是第一选择，一定多加练习，争取早日搓出高质量贴近边线的网前球，同时中路网前，勾对角网前，抹 拨 推两腰等，网前球多点变化。</li>
<li>对方发外角：<br>反手区直线网前的高质量搓球依然是第一选择，但要注意切忌打出质量不高的直线推腰球，因为这一点是男子上来正手扑杀的绝佳位置，宁可挑对方反手底线，哪怕挑不到反手，挑到正手底线也绝对不能随意直线放腰！</li>
</ol>
<h1 id="封网"><a href="#封网" class="headerlink" title="封网"></a>封网</h1><ol>
<li>队友杀球时球拍不要举太高，会影响队友杀球路线，球过到对方区域立刻举拍随时准备封网；</li>
</ol>
<h1 id="抽球"><a href="#抽球" class="headerlink" title="抽球"></a>抽球</h1><p>1、如果对方来球正对自己而又来不及闪让时，千万不要用正手方法击球，当来球靠近自己身体时，即使击球点在自己右侧腋下，反手也要比正手容易发力还击；<br>2、在正手平抽时，要善于运用食指的力量发力击球，而在反手平抽时，拇指朝前顶压发力；</p>
<h1 id="混双战术"><a href="#混双战术" class="headerlink" title="混双战术"></a>混双战术</h1><h2 id="接发-1"><a href="#接发-1" class="headerlink" title="接发"></a>接发</h2><ol>
<li>男接发放网往女搭档一侧放网，放完可立即后撤，女跟球；<h2 id="进攻"><a href="#进攻" class="headerlink" title="进攻"></a>进攻</h2></li>
<li>女举拍封网 （占位确认一下发球线前后） 尽量封直线 意识在斜线<h2 id="防守"><a href="#防守" class="headerlink" title="防守"></a>防守</h2></li>
<li>防守若被动挑球时，男队友尽量挑直线，女队员挑斜线。直线的球吊网前会很快 杀球又会很重，女队员防守比较困难，这样就可以让女队员防斜线，男队员防直线。</li>
</ol>
<h1 id="意识习惯养成"><a href="#意识习惯养成" class="headerlink" title="意识习惯养成"></a>意识习惯养成</h1><ul>
<li>发球时思考：<ol>
<li>对方站位、握拍，发到他难受的位置；</li>
<li>根据你发的位置，想好第三拍如何接，发完立即准备第三拍；<ul>
<li>发完球一定一定一定要举拍，对方推腰要抢高点封住，不能留给搭档，否则会很被动；</li>
<li>避免急于求成，质量要求过高，急于一拍将对手置于死地的打法意识；</li>
<li>偶数位接发男生发球，压反手，抓对方正手网前；</li>
</ul>
</li>
</ol>
</li>
<li>不击球时握拍放松</li>
<li>其实看很多比赛，不接球的人也会随着球的节奏进行举拍，同时脚也会随着球进行小垫，并没有站死，而是时刻跟着球的节奏准备接球；</li>
</ul>
]]></content>
  </entry>
</search>
